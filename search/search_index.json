{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Coders for Causes Workshops \u00b6 This is where you can see all the materials for workshops that are presented to the volunteers of the project for each year. If you would to know more about us, please visit our website at codersforcauses.org","title":"Overview"},{"location":"#coders-for-causes-workshops","text":"This is where you can see all the materials for workshops that are presented to the volunteers of the project for each year. If you would to know more about us, please visit our website at codersforcauses.org","title":"Coders for Causes Workshops"},{"location":"contributions/","text":"Contributions \u00b6 Hi! We are happy that you thought of contributing! If you have any suggestions or issues, please raise it here . I would be happy if you could provide pull requests, if you know how to do it here . Structure \u00b6 Folder Structure \u00b6 The structure of this repo is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u251c\u2500\u2500 docs // Folders for documentation \u2502 \u251c\u2500\u2500 CNAME \u2502 \u251c\u2500\u2500 contributions.md \u2502 \u251c\u2500\u2500 deployment_and_automated_site_deployment.md \u2502 \u251c\u2500\u2500 flavoured_markdown.md \u2502 \u251c\u2500\u2500 images // Assets \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2502 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 writing_markdown.md \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 mkdocs.yml // MkDocs Configuration \u251c\u2500\u2500 overrides \u2502 \u2514\u2500\u2500 partials \u2502 \u2514\u2500\u2500 footer.html \u251c\u2500\u2500 README.md \u2514\u2500\u2500 requirements.txt Installation \u00b6 Python \u00b6 Prerequisite You need to have Python installed to be able to use pip . There are a few ways of installing Python. You can use a package distributor like Anaconda Or you can just install Python . Once you have installed Python, install mkdocs requirements by opening a terminal and typing: 1 pip install -r requirements.txt Python Environments (Optional) however, it is good practice to use different environments for different purposes, in which case, for Anaconda, you would open a terminal and type: 1 2 conda create -n mkdocstutorial python conda activate mkdocstutorial then enter: 1 pip install -r requirements.txt Docker \u00b6 Just run docker-compose up , it should show the web server running at localhost:8000 Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. Very helpful when you want to take a look at the docs before deploying. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploy in github pages Web Documentation Configuration \u00b6 For full documentation visit: mkdocs.org for the generic MkDocs PyMdown Extensions for the different extensions that are installed MkDocs Material for the customisation of the web server documentation.","title":"Contributions"},{"location":"contributions/#contributions","text":"Hi! We are happy that you thought of contributing! If you have any suggestions or issues, please raise it here . I would be happy if you could provide pull requests, if you know how to do it here .","title":"Contributions"},{"location":"contributions/#structure","text":"","title":"Structure"},{"location":"contributions/#installation","text":"","title":"Installation"},{"location":"contributions/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. Very helpful when you want to take a look at the docs before deploying. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs gh-deploy - Deploy in github pages","title":"Commands"},{"location":"contributions/#web-documentation-configuration","text":"For full documentation visit: mkdocs.org for the generic MkDocs PyMdown Extensions for the different extensions that are installed MkDocs Material for the customisation of the web server documentation.","title":"Web Documentation Configuration"},{"location":"2021-2022-summer/","text":"Coders for Causes 2021/22 Summer Workshops \u00b6 This project period continues the two main projects from the winter of 2020 : Foodbank WAIS If you have not before seen the existing progress, see this video . These two projects have their own corresponding technology stacks being used, hence will dictate the workshops that will be held. Project Technology \u00b6 Foodbank \u00b6 Foodbank is mainly with frontend with React + NextJS + TypeScript + TailwindCSS with Firebase and Notion CMS. WAIS \u00b6 WAIS is a full-stack application with Vue and Django. It uses Docker containerisation for both development (and production in the future). Workshop Recordings \u00b6 The workshop recordings will be held on our youtube channel .","title":"Overview"},{"location":"2021-2022-summer/#coders-for-causes-202122-summer-workshops","text":"This project period continues the two main projects from the winter of 2020 : Foodbank WAIS If you have not before seen the existing progress, see this video . These two projects have their own corresponding technology stacks being used, hence will dictate the workshops that will be held.","title":"Coders for Causes 2021/22 Summer Workshops"},{"location":"2021-2022-summer/#project-technology","text":"","title":"Project Technology"},{"location":"2021-2022-summer/#workshop-recordings","text":"The workshop recordings will be held on our youtube channel .","title":"Workshop Recordings"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/","text":"Automated Testing and CI Pipelines \u00b6 What is the problem with manual testing? \u00b6 tedious some scenarious are hard to repeat eg. network issues, database randomly crashes repetitive growning number of scenarios time consuming Cost Savings Scenarios that are hard to repeat - Network Requests 1 2 3 4 5 6 7 8 9 10 import requests def make_network_request (): try : response = requests . get ( \"https://www.google.com\" ) if response . status_code == 200 : return response . text else : return None exception requests . exceptions . ConnectionError : return None This is the way to simulate an exception after a network request. 1 2 3 4 import pytest def test_make_network_request_exception ( mocker ): mocker . patch ( \"requests.get\" , side_effect = requests . exceptions . ConnectionError ) assert make_network_request () is None Importance of Software \u00b6 Before you can truly understand why testing is important, we first have to understand the importance of software. Importance of software in different parts Control Systems Healthcare Transportations Daily life Office Work Education Software is Fragile \u00b6 Quote It only takes a character difference to prevent a software from compiling or running. Consequences of Fault Softwares \u00b6 Huge Compute Charges Embarrassment Disruptions User Frustations Client loss Death Automated Testing \u00b6 What is involved manual testing usually? \u00b6 To be able to automate testing, we need to understand what is involved in manual testing. Open your own environment and tools Git checkout/pull/fetch Install dependency Setup the environment Do you need to clear the database? Do you need to enter a couple of data? Do you need to disconnect the internet while server is running? Perform the steps to test Assert the test correction? Did you make a mistake? (repeat the entire thing) Now do a different scenario! Hang on a sec? Your coworker forgot to push? Now do all scenarios again How does automated testing work? \u00b6 Write scripts to evaluate code Write script to run scripts when certain events happen (more so later) Update Scripts whenever change happens Example from the workshop with github actions - Software Engineering Practices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 name: Python package on: pull_request: workflow_dispatch: inputs: logLevel: description: \"Log level\" required: false default: \"warning\" jobs: flake8_py3: name: \"Linting with Flake8\" runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: \"Set up Python\" uses: actions/setup-python@v2 with: python-version: 3.x - name: \"Install flake8\" run: pip install flake8 - name: \"Run flake8\" uses: liskin/gh-problem-matcher-wrap@v1 with: linters: flake8 run: flake8 --max-line-length 150 . test: runs-on: ubuntu-latest strategy: matrix: python-version: [3.8] # you can add more python version to test it in steps: - uses: actions/checkout@v2 - name: Set up Python ${{ matrix.python-version }} uses: actions/setup-python@v2 with: python-version: ${{ matrix.python-version }} - name: Install dependencies run: | python -m pip install --upgrade pip if [ -f requirements.txt ]; then pip install -r requirements.txt; fi - name: Test with pytest run: | pytest --cov-report html --cov=. - uses: actions/upload-artifact@v1 if: always() with: name: coverage-report path: htmlcov Test-Driven Development \u00b6 Define test/specification first, then write functionality. Works best if you know way ahead of time what you want. Note: This does not always work (eg. Frontend) Simple Example 1 2 def test_add_two_numbers (): assert add_two_numbers ( 1 , 2 ) == 3 1 2 def add_two_numbers ( a , b ): return a + b More complex example, but demonstrates how it can save time Let say you have to develop a function that sends email depending on the number of users in the database 1 2 3 4 5 from django.core.mail import send_mail # Not guaranteed to work code def send_email_to_admin (): number_of_users = User . objects . count () send_mail ( \"Number of users\" , f \"There are { number_of_users } users in the database\" , \"no-reply@system.com\" ,[ \"admin@system.com\" ]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from django.core import mail from module import send_email_to_admin class EmailTest ( TestCase ): def setup (): # Create users User . objects . create ( username = \"admin\" ... ) def test_send_email_to_admin ( self ): send_email_to_admin () # Test that one message has been sent. self . assertEqual ( len ( mail . outbox ), 1 ) self . assertEqual ( mail . outbox [ 0 ] . subject , \"Number of users\" ) self . assertTrue ( \"1 users in the database\" in mail . outbox [ 0 ] . body ) ... Usual workflow: Prepare your tools - mail client and smtp server Prepare your database Do manual testing + Write code (repeat) Write Automated testing Test Driven development workflow (also known as red-green-refactor ): Write the Automated Testing - when this is run it will fail Write code until test pass Refactor + improve code GIVEN-WHEN-THEN \u00b6 Acceptance of features can be divided into: - GIVEN \u2013 what are the assumptions - WHEN \u2013 occurence - THEN - effect or observation What is CI/CD? \u00b6 Scripts that runs for certain events (such as pull request, a commit) to run test or deploy Providers Github Actions Circle CI Bitbucket Pipelines Travis CI What's usually in CI? \u00b6 Linting (code consistency + undefined variables) Tests Builds + Deploy Others: - bot to auto tag issue - Security checks - Code Autosuggestion (kinda like linting, but it suggests stuff) Testing Artifacts \u00b6 Files given when testing Coverage Report Cypress Screenshots + Videos Long term test reports Demo - Cypress Integration Test / E2E Test \u00b6 Cypress is a tool that simulates user interaction by programatically performing action against a browser. Get started at Cypress .","title":"Automated Testing and CI Pipelines"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#automated-testing-and-ci-pipelines","text":"","title":"Automated Testing and CI Pipelines"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#what-is-the-problem-with-manual-testing","text":"tedious some scenarious are hard to repeat eg. network issues, database randomly crashes repetitive growning number of scenarios time consuming Cost Savings Scenarios that are hard to repeat - Network Requests 1 2 3 4 5 6 7 8 9 10 import requests def make_network_request (): try : response = requests . get ( \"https://www.google.com\" ) if response . status_code == 200 : return response . text else : return None exception requests . exceptions . ConnectionError : return None This is the way to simulate an exception after a network request. 1 2 3 4 import pytest def test_make_network_request_exception ( mocker ): mocker . patch ( \"requests.get\" , side_effect = requests . exceptions . ConnectionError ) assert make_network_request () is None","title":"What is the problem with manual testing?"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#importance-of-software","text":"Before you can truly understand why testing is important, we first have to understand the importance of software. Importance of software in different parts Control Systems Healthcare Transportations Daily life Office Work Education","title":"Importance of Software"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#software-is-fragile","text":"Quote It only takes a character difference to prevent a software from compiling or running.","title":"Software is Fragile"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#consequences-of-fault-softwares","text":"Huge Compute Charges Embarrassment Disruptions User Frustations Client loss Death","title":"Consequences of Fault Softwares"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#automated-testing","text":"","title":"Automated Testing"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#what-is-cicd","text":"Scripts that runs for certain events (such as pull request, a commit) to run test or deploy Providers Github Actions Circle CI Bitbucket Pipelines Travis CI","title":"What is CI/CD?"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#demo-cypress-integration-test-e2e-test","text":"Cypress is a tool that simulates user interaction by programatically performing action against a browser. Get started at Cypress .","title":"Demo - Cypress Integration Test / E2E Test"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/","text":"Welcome to the Djangol! \u00b6 We've got puns 'n' data, We\u2019ve got everything you request How does an application communicate with backend systems? \u00b6 JavaScript Object Notation JSON Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 [ { \"id\" : 1 , \"name\" : \"Leanne Graham\" , \"username\" : \"Bret\" , \"email\" : \"Sincere@april.biz\" , \"address\" : { \"street\" : \"Kulas Light\" , \"suite\" : \"Apt. 556\" , \"city\" : \"Gwenborough\" , \"zipcode\" : \"92998-3874\" , \"geo\" : { \"lat\" : \"-37.3159\" , \"lng\" : \"81.1496\" } }, \"phone\" : \"1-770-736-8031 x56442\" , \"website\" : \"hildegard.org\" , \"company\" : { \"name\" : \"Romaguera-Crona\" , \"catchPhrase\" : \"Multi-layered client-server neural-net\" , \"bs\" : \"harness real-time e-markets\" } }, ... { \"id\" : 10 , \"name\" : \"Clementina DuBuque\" , \"username\" : \"Moriah.Stanton\" , \"email\" : \"Rey.Padberg@karina.biz\" , \"address\" : { \"street\" : \"Kattie Turnpike\" , \"suite\" : \"Suite 198\" , \"city\" : \"Lebsackbury\" , \"zipcode\" : \"31428-2261\" , \"geo\" : { \"lat\" : \"-38.2386\" , \"lng\" : \"57.2232\" } }, \"phone\" : \"024-648-3804\" , \"website\" : \"ambrose.net\" , \"company\" : { \"name\" : \"Hoeger LLC\" , \"catchPhrase\" : \"Centralized empowering task-force\" , \"bs\" : \"target end-to-end models\" } } ] Query this endpoint using JavaScript 1 2 3 fetch ( \"https://jsonplaceholder.typicode.com/users\" ) . then ( response => response . json ()) . then ( data => console . log ( data )) Other ways JSON is not the only way. There are things like SOAP, RPC, but nevermind them for now as you will most likely have to deal with JSON for the most parts. What are APIs and REST-APIs? \u00b6 Application Programming Interface Analogy Who interacts with the user interface? - the user Who interacts with the application programming interface ? - the application program (eg. the browser) Representational State Transfer Application Programming Interface backend architectural pattern that follows the GET/POST/PUT/PATCH/DELETE Can be represented in Swagger/ Open API specification Swagger/ Open API specification What is Django? \u00b6 Django Python web framework for creating server-side application Follows MVC: Model - database View \u2013 Interface (API or User Interface) Controller \u2013 URLs + routes See Documentation What is Django REST Framework (DRF)? \u00b6 library for creating REST-API just makes it easier develop REST-API In: Authentication + Permission Generic API Views Serialisers (payload validation and format) See Documentation Features of Django and DRF \u00b6 Serializers \u00b6 converter to and from Python Data types to JSON/XML can be used to do validation More info here Models \u00b6 Models representation of database connection or schema Example: Todo Django + React Models with Serializers \u00b6 Model already defined the structure of the data Configuration file settings.py \u00b6 One of the most important file - determines the app configurations and default Example of Items you can configure timezones start of URL installed Django Apps middlewares usually becomes the \"default\" configs after environment variables database configuration Route with URLs \u00b6 Determines the URL route of the API starts with the urls.py in the config (settings.py) Packaging a \"Django App\" \u00b6 \"Django Apps\" are plugin system of Django. Django codebase prefers packaging each endpoint feature to a \"Django App\" Authenticate with Microsoft For example: django-saml2-auth-lw (used for Microsoft SAML SSO) More documentation can be seen here You can start creating your own Django app by following the steps: python manage.py startapp <app_name> . This will bootstrap commonly used files for any \"app\". Add the app in the INSTALLED_APPS in the settings.py python manage.py makemigrations to create the migration scripts python manage.py migrate to run the migration script Views \u00b6 The interface at which any application program interacts with to get something done in the backend. Use DRF instead of Base Django This is where it gets a little tricky. Django accomodates both frontend and backend, but where it shines is with DRF . So always refer to documentation regarding write it from the documentation. If you plan to use Django as an entire full-stack option, then you may not need DRF at all. Just use the generic views . Function-based Views and Class-based Views \u00b6 Codes Summary: In DRF, there's a lot more advantage to use class-based views. However, if you want the flexibility and writing things on your own, then you might want to use function-based view. Function-Based View Link : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 from django.shortcuts import render from django.http import JsonResponse from rest_framework.decorators import api_view from rest_framework.response import Response from .serializers import TaskSerializer from .models import Task @api_view ([ 'GET' ]) def apiOverview ( request ): api_urls = { 'List' : '/task-list/' , 'Detail View' : '/task-detail/<str:pk>/' , 'Create' : '/task-create/' , 'Update' : '/task-update/<str:pk>/' , 'Delete' : '/task-delete/<str:pk>/' , } return Response ( api_urls ) @api_view ([ 'GET' ]) def taskList ( request ): tasks = Task . objects . all () . order_by ( '-id' ) serializer = TaskSerializer ( tasks , many = True ) return Response ( serializer . data ) @api_view ([ 'GET' ]) def taskDetail ( request , pk ): tasks = Task . objects . get ( id = pk ) serializer = TaskSerializer ( tasks , many = False ) return Response ( serializer . data ) @api_view ([ 'POST' ]) def taskCreate ( request ): serializer = TaskSerializer ( data = request . data ) if serializer . is_valid (): serializer . save () return Response ( serializer . data ) @api_view ([ 'POST' ]) def taskUpdate ( request , pk ): task = Task . objects . get ( id = pk ) serializer = TaskSerializer ( instance = task , data = request . data ) if serializer . is_valid (): serializer . save () return Response ( serializer . data ) @api_view ([ 'DELETE' ]) def taskDelete ( request , pk ): task = Task . objects . get ( id = pk ) task . delete () return Response ( 'Item succsesfully delete!' ) Class-Based View To be seen in in the live demos Django Admin \u00b6 Django comes with a built-in user-interface for managing \"Django Apps\" with models.py By default it in the path /admin Django Admin Other Tools \u00b6 DRF Frontend for Consuming API \u00b6 When you use DRF for developing API, and use the generic API views and serializers, it will automatically create this for you. DRF Frontend Postman \u00b6 Development tool for interacting with APIs: environment variables collection of possible endpoints send different JSON body Postman Python Debugger (pdb) \u00b6 When you run the django python manage.py runserver , you can add breakpoint() to anywhere piece of your code. This will stop the terminal line to the breakpoint if it hits it. From here you can do debugging. Demo - Live Coding \u00b6 Demonstrate how to create a backend for a Todo app. Setup Python environment python -m venv venv then activate with source venv/bin/activate Install Django pip install Django Setup django codebase django-admin startproject todo Install DRF 1 2 3 4 5 # As per https://www.django-rest-framework.org/#installation pip install djangorestframework pip install markdown # Markdown support for the browsable API. pip install django-filter # Filtering support pip install pytz # Timezone support Freeze requirements pip freeze > requirements.txt Do a python sqlite migration python manage.py migrate to initialise the Django database for the apps Create a super user python manage.py createsuperuser Run the django app with python manage.py runserver Login with the super user and show Django Admin Setup django app python manage.py startapp api Create a model models.py 1 2 3 4 5 6 7 8 9 10 11 12 from django.db import models # Todo Model class Todo ( models . Model ): title = models . CharField ( max_length = 100 ) description = models . TextField () completed = models . BooleanField ( default = False ) created_at = models . DateTimeField ( auto_now_add = True ) updated_at = models . DateTimeField ( auto_now = True ) def __str__ ( self ): return self . title Do a python sqlite migration python manage.py makemigrations and python manage.py migrate Show sqlite Create serialiser serializers.py 1 2 3 4 5 6 7 8 9 10 11 from api.models import Todo from rest_framework import serializers class TodoSerializer ( serializers . ModelSerializer ): \"\"\" Serializer for Todo model \"\"\" class Meta : model = Todo # All fields fields = '__all__' Create Class-based view views.py and link back to the urls.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # api/views.py from django.shortcuts import render from rest_framework import viewsets , permissions from api.serializers import TodoSerializer from api.models import Todo # Class Model Viewset class TodoModelViewSet ( viewsets . ModelViewSet ): # Define the serializer class serializer_class = TodoSerializer # Define the queryset queryset = Todo . objects . all () # Permissions (left to your own exercise) # permission_classes = [permissions.IsAuthenticated] # Define the list of allowed HTTP methods (by default if you didn't define it, it will just enable all) http_method_names = [ 'get' , 'post' , 'put' , 'patch' , 'delete' , 'head' , 'options' , 'trace' ] 1 2 3 4 5 6 7 8 9 10 11 # api/urls.py from django.urls import path , include from rest_framework import routers from api.views import TodoModelViewSet router = routers . DefaultRouter ( trailing_slash = False ) router . register ( r 'todos' , TodoModelViewSet ) urlpatterns = [ path ( '' , include ( router . urls )), ] 1 2 3 4 5 6 7 8 9 # urls.py from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( 'api-auth/' , include ( 'rest_framework.urls' )), path ( 'api/' , include ( 'api.urls' )), ] Manually test with DRF Frontend or postman Final code can be seen here . Read through the Viewset Documentation Viewsets are one of the most powerful feature ever. In just a couple of lines of code, you can create a CRUD API for your models. As one of my favourite developer once said, Quote Frinze, Viewset is the future! - J. Morales","title":"Introduction to Backend Development with Django"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#welcome-to-the-djangol","text":"We've got puns 'n' data, We\u2019ve got everything you request","title":"Welcome to the Djangol!"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#how-does-an-application-communicate-with-backend-systems","text":"JavaScript Object Notation JSON Link 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 [ { \"id\" : 1 , \"name\" : \"Leanne Graham\" , \"username\" : \"Bret\" , \"email\" : \"Sincere@april.biz\" , \"address\" : { \"street\" : \"Kulas Light\" , \"suite\" : \"Apt. 556\" , \"city\" : \"Gwenborough\" , \"zipcode\" : \"92998-3874\" , \"geo\" : { \"lat\" : \"-37.3159\" , \"lng\" : \"81.1496\" } }, \"phone\" : \"1-770-736-8031 x56442\" , \"website\" : \"hildegard.org\" , \"company\" : { \"name\" : \"Romaguera-Crona\" , \"catchPhrase\" : \"Multi-layered client-server neural-net\" , \"bs\" : \"harness real-time e-markets\" } }, ... { \"id\" : 10 , \"name\" : \"Clementina DuBuque\" , \"username\" : \"Moriah.Stanton\" , \"email\" : \"Rey.Padberg@karina.biz\" , \"address\" : { \"street\" : \"Kattie Turnpike\" , \"suite\" : \"Suite 198\" , \"city\" : \"Lebsackbury\" , \"zipcode\" : \"31428-2261\" , \"geo\" : { \"lat\" : \"-38.2386\" , \"lng\" : \"57.2232\" } }, \"phone\" : \"024-648-3804\" , \"website\" : \"ambrose.net\" , \"company\" : { \"name\" : \"Hoeger LLC\" , \"catchPhrase\" : \"Centralized empowering task-force\" , \"bs\" : \"target end-to-end models\" } } ] Query this endpoint using JavaScript 1 2 3 fetch ( \"https://jsonplaceholder.typicode.com/users\" ) . then ( response => response . json ()) . then ( data => console . log ( data )) Other ways JSON is not the only way. There are things like SOAP, RPC, but nevermind them for now as you will most likely have to deal with JSON for the most parts.","title":"How does an application communicate with backend systems?"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#what-are-apis-and-rest-apis","text":"Application Programming Interface Analogy Who interacts with the user interface? - the user Who interacts with the application programming interface ? - the application program (eg. the browser) Representational State Transfer Application Programming Interface backend architectural pattern that follows the GET/POST/PUT/PATCH/DELETE Can be represented in Swagger/ Open API specification Swagger/ Open API specification","title":"What are APIs and REST-APIs?"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#what-is-django","text":"Django Python web framework for creating server-side application Follows MVC: Model - database View \u2013 Interface (API or User Interface) Controller \u2013 URLs + routes See Documentation","title":"What is Django?"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#what-is-django-rest-framework-drf","text":"library for creating REST-API just makes it easier develop REST-API In: Authentication + Permission Generic API Views Serialisers (payload validation and format) See Documentation","title":"What is Django REST Framework (DRF)?"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#features-of-django-and-drf","text":"","title":"Features of Django and DRF"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#packaging-a-django-app","text":"\"Django Apps\" are plugin system of Django. Django codebase prefers packaging each endpoint feature to a \"Django App\" Authenticate with Microsoft For example: django-saml2-auth-lw (used for Microsoft SAML SSO) More documentation can be seen here You can start creating your own Django app by following the steps: python manage.py startapp <app_name> . This will bootstrap commonly used files for any \"app\". Add the app in the INSTALLED_APPS in the settings.py python manage.py makemigrations to create the migration scripts python manage.py migrate to run the migration script","title":"Packaging a \"Django App\""},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#django-admin","text":"Django comes with a built-in user-interface for managing \"Django Apps\" with models.py By default it in the path /admin Django Admin","title":"Django Admin"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#other-tools","text":"","title":"Other Tools"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#demo-live-coding","text":"Demonstrate how to create a backend for a Todo app. Setup Python environment python -m venv venv then activate with source venv/bin/activate Install Django pip install Django Setup django codebase django-admin startproject todo Install DRF 1 2 3 4 5 # As per https://www.django-rest-framework.org/#installation pip install djangorestframework pip install markdown # Markdown support for the browsable API. pip install django-filter # Filtering support pip install pytz # Timezone support Freeze requirements pip freeze > requirements.txt Do a python sqlite migration python manage.py migrate to initialise the Django database for the apps Create a super user python manage.py createsuperuser Run the django app with python manage.py runserver Login with the super user and show Django Admin Setup django app python manage.py startapp api Create a model models.py 1 2 3 4 5 6 7 8 9 10 11 12 from django.db import models # Todo Model class Todo ( models . Model ): title = models . CharField ( max_length = 100 ) description = models . TextField () completed = models . BooleanField ( default = False ) created_at = models . DateTimeField ( auto_now_add = True ) updated_at = models . DateTimeField ( auto_now = True ) def __str__ ( self ): return self . title Do a python sqlite migration python manage.py makemigrations and python manage.py migrate Show sqlite Create serialiser serializers.py 1 2 3 4 5 6 7 8 9 10 11 from api.models import Todo from rest_framework import serializers class TodoSerializer ( serializers . ModelSerializer ): \"\"\" Serializer for Todo model \"\"\" class Meta : model = Todo # All fields fields = '__all__' Create Class-based view views.py and link back to the urls.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # api/views.py from django.shortcuts import render from rest_framework import viewsets , permissions from api.serializers import TodoSerializer from api.models import Todo # Class Model Viewset class TodoModelViewSet ( viewsets . ModelViewSet ): # Define the serializer class serializer_class = TodoSerializer # Define the queryset queryset = Todo . objects . all () # Permissions (left to your own exercise) # permission_classes = [permissions.IsAuthenticated] # Define the list of allowed HTTP methods (by default if you didn't define it, it will just enable all) http_method_names = [ 'get' , 'post' , 'put' , 'patch' , 'delete' , 'head' , 'options' , 'trace' ] 1 2 3 4 5 6 7 8 9 10 11 # api/urls.py from django.urls import path , include from rest_framework import routers from api.views import TodoModelViewSet router = routers . DefaultRouter ( trailing_slash = False ) router . register ( r 'todos' , TodoModelViewSet ) urlpatterns = [ path ( '' , include ( router . urls )), ] 1 2 3 4 5 6 7 8 9 # urls.py from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( 'api-auth/' , include ( 'rest_framework.urls' )), path ( 'api/' , include ( 'api.urls' )), ] Manually test with DRF Frontend or postman Final code can be seen here . Read through the Viewset Documentation Viewsets are one of the most powerful feature ever. In just a couple of lines of code, you can create a CRUD API for your models. As one of my favourite developer once said, Quote Frinze, Viewset is the future! - J. Morales","title":"Demo - Live Coding"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/","text":"Introduction to Frontend Frameworks \u00b6 An intuitive explanation of why frontend frameworks are used Frontend Engineering \u00b6 Frontend Engineering, one of the most important aspect of web dev Feared by lots of developers (ehem ehem CSS) Memes Job Market and Trends \u00b6 StackOverflow 2020 Can be seen that there is a huge portion that will needs frontend. Note: Developers can identify as many types Startups Github Copilot and Drag and Drops \u00b6 Getting replaced by AIs, Drag and drops? Far from reality? Github Copilot and Squarespace Problems \u00b6 Cross-Browser Support \u00b6 Need to support multiple browsers HTML is WET! \u00b6 Not DRY = WET D \u2013 Don't R \u2013 Repeat Y - Yourself Github Tags System Inefficiencies of Reloading \u00b6 Most parts of website don't change Youtube What about with notifications and realtime updates? notifications State Management and Rerendering \u00b6 How do you handle changes in the state of the application? Example \"Spotimania\" \u00b6 Realtime Multiplayer Song Guessing Game https://spotimania.herokuapp.com/ Information Song picture Notifications when someone joined or scored Song title + artist How do we handle when we \"Submit Guess\"? HTML Format Submit Approach Reloads = loses current state How do you coordinate with players? AJAX Calls From frontend, use JS to do AJAX Calls After receiving AJAX call, modify everything that needs the data (Find element by DOM, do some janky HTML inject) 1 2 3 const newData = await fetch ( \u2026 ) const image = document . querySelector ( 'img .music' ) image . outerText = `<img src={newData.image} / >` Cross-site Scripting Now, you have to implement your own strategy to do this. 1 newData = { \u2026 , image : \"<script>hack()</script>\" , ...} When you try to do render by that approach: slower (rerendering things that should not render) tedious (find element and update) security code complexity hard to keep track of states (especially if different portion of the UI relies on a certain data) How do we fix it? \u00b6 Cross-Browser Support \u00b6 Babel: Transpiles / Translates New JavaScript to old JavaScript that is supported Webpack: Bundles / Packs Bundles the JavaScript modules into a single minified file SCSS Compilation Translates concise and programatic version of CSS to something that can be understood by the browser Minification Makes files smaller by removing unnecessary characters What if HTML is NOT WET? What if HTML is a programming language? \u00b6 Memes about HTML as a programming language What if HTML has variables? perform computations to be displayed in the interface (solves State Management and Rerendering ) What if HTML has loops? Eliminate repetitive code (solves wet HTML ) What if HTML has functions? Divide interface into modular components (solves wet HTML ) load only components that are not loaded (solves Inefficiencies of Reloading ) interface determined by parameters Maybe we can write a function that will automatically update HTML when data changes? (solves State Management and Rerendering ) What if HTML has condition? Conditional rendering (solves Reloading to show different view) What's next? \u00b6 The next two workshop content are: React Vue","title":"Overview"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#introduction-to-frontend-frameworks","text":"An intuitive explanation of why frontend frameworks are used","title":"Introduction to Frontend Frameworks"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#frontend-engineering","text":"Frontend Engineering, one of the most important aspect of web dev Feared by lots of developers (ehem ehem CSS) Memes","title":"Frontend Engineering"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#job-market-and-trends","text":"StackOverflow 2020 Can be seen that there is a huge portion that will needs frontend. Note: Developers can identify as many types Startups","title":"Job Market and Trends"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#problems","text":"","title":"Problems"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#how-do-we-fix-it","text":"","title":"How do we fix it?"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#whats-next","text":"The next two workshop content are: React Vue","title":"What's next?"},{"location":"2021-2022-summer/introduction-to-react/","text":"Introduction to React \u00b6 Sparking the REACTion of User Interface and Experience Decomposing the HTML User Interface \u00b6 Complete code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin = \"anonymous\" /> < link rel = \"stylesheet\" href = \"style.css\" /> < title > My Home Page - Frinze Lapuz </ title > </ head > < body > < nav class = \"navbar sticky-top navbar-dark bg-dark\" > < div class = \"container nav\" > < a class = \"navbar-brand\" href = \"#\" > Royal Homepage </ a > </ div > </ nav > < div class = \"container\" > < div class = \"row\" > < div class = \"col\" > Here Some Dog For You. Cool Stuff right? </ div > < div class = \"col\" > <!-- <img class=\"img-fluid img-thumbnail\" src=\"dog.jpg\" alt=\"dog\" /> --> < div class = \"carouselWrapper\" > < div id = \"carouselDoggo\" class = \"carousel slide\" data-ride = \"carousel\" > < ol class = \"carousel-indicators\" > < li data-target = \"#carouselDoggo\" data-slide-to = \"0\" class = \"active\" ></ li > < li data-target = \"#carouselDoggo\" data-slide-to = \"1\" ></ li > < li data-target = \"#carouselDoggo\" data-slide-to = \"2\" ></ li > </ ol > < div class = \"carousel-inner\" > < div class = \"carousel-item active\" > < img src = \"dog.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > First Dog </ h5 > < p > Cutie :) </ p > </ div > </ div > < div class = \"carousel-item\" > < img src = \"dog2.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > Second Dog </ h5 > < p > Good Doggo! </ p > </ div > </ div > < div class = \"carousel-item\" > < img src = \"dog3.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > Third Dog </ h5 > < p > Walkie Barkie Cutie! </ p > </ div > </ div > </ div > < a class = \"carousel-control-prev\" href = \"#carouselDoggo\" data-slide = \"prev\" > < span class = \"carousel-control-prev-icon\" ></ span > < span class = \"sr-only\" > Previous </ span > </ a > < a class = \"carousel-control-next\" href = \"#carouselDoggo\" data-slide = \"next\" > < span class = \"carousel-control-next-icon\" ></ span > < span class = \"sr-only\" > Next </ span > </ a > </ div > </ div > </ div > </ div > </ div > < script src = \"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity = \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity = \"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity = \"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin = \"anonymous\" ></ script > </ body > </ html > Relevant Code for Discussion 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 < nav class = \"navbar sticky-top navbar-dark bg-dark\" > <!--(1)--> < div class = \"container nav\" > < a class = \"navbar-brand\" href = \"#\" > Royal Homepage </ a > </ div > </ nav > < div class = \"container\" > < div class = \"row\" > < div class = \"col\" > Here Some Dog For You. Cool Stuff right? </ div > <!--(2)--> < div class = \"col\" > < div class = \"carouselWrapper\" > <!--(3)--> < div id = \"carouselDoggo\" class = \"carousel slide\" data-ride = \"carousel\" > < ol class = \"carousel-indicators\" > < li data-target = \"#carouselDoggo\" data-slide-to = \"0\" class = \"active\" ></ li > < li data-target = \"#carouselDoggo\" data-slide-to = \"1\" ></ li > < li data-target = \"#carouselDoggo\" data-slide-to = \"2\" ></ li > </ ol > < div class = \"carousel-inner\" > < div class = \"carousel-item active\" > < img src = \"dog.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > First Dog </ h5 > < p > Cutie :) </ p > </ div > </ div > < div class = \"carousel-item\" > < img src = \"dog2.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > Second Dog </ h5 > < p > Good Doggo! </ p > </ div > </ div > < div class = \"carousel-item\" > < img src = \"dog3.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > Third Dog </ h5 > < p > Walkie Barkie Cutie! </ p > </ div > </ div > </ div > < a class = \"carousel-control-prev\" href = \"#carouselDoggo\" data-slide = \"prev\" > < span class = \"carousel-control-prev-icon\" ></ span > < span class = \"sr-only\" > Previous </ span > </ a > < a class = \"carousel-control-next\" href = \"#carouselDoggo\" data-slide = \"next\" > < span class = \"carousel-control-next-icon\" ></ span > < span class = \"sr-only\" > Next </ span > </ a > </ div > </ div > </ div > </ div > </ div > Navigation Bar Some Text Carousel HTML Stored in Variables \u00b6 1 2 3 4 5 6 7 const Nav = `<nav class=\"navbar sticky-top navbar-dark bg-dark\"> <div class=\"container nav\"> <a class=\"navbar-brand\" href=\"#\">Royal Homepage</a> </div> </nav> ` HTML Stored in Functions \u00b6 1 2 3 4 5 6 7 8 const Nav = ( title ) => ` <nav class=\"navbar sticky-top navbar-dark bg-dark\"> <div class=\"container nav\"> <a class=\"navbar-brand\" href=\"#\"> ${ title } </a> </div> </nav> ` Carousel Decomposition The highlighted ones are the key-distinct data driven elements. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 < div class = \"carouselWrapper\" > < div id = \"carouselDoggo\" class = \"carousel slide\" data-ride = \"carousel\" > < ol class = \"carousel-indicators\" > <!--(1)--> < li data-target = \"#carouselDoggo\" data-slide-to = \"0\" class = \"active\" ></ li > < li data-target = \"#carouselDoggo\" data-slide-to = \"1\" ></ li > < li data-target = \"#carouselDoggo\" data-slide-to = \"2\" ></ li > </ ol > < div class = \"carousel-inner\" > < div class = \"carousel-item active\" > <!--(2)--> < img src = \"dog.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > First Dog </ h5 > < p > Cutie :) </ p > </ div > </ div > < div class = \"carousel-item\" > < img src = \"dog2.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > Second Dog </ h5 > < p > Good Doggo! </ p > </ div > </ div > < div class = \"carousel-item\" > < img src = \"dog3.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > Third Dog </ h5 > < p > Walkie Barkie Cutie! </ p > </ div > </ div > </ div > < a class = \"carousel-control-prev\" href = \"#carouselDoggo\" data-slide = \"prev\" > < span class = \"carousel-control-prev-icon\" ></ span > < span class = \"sr-only\" > Previous </ span > </ a > < a class = \"carousel-control-next\" href = \"#carouselDoggo\" data-slide = \"next\" > < span class = \"carousel-control-next-icon\" ></ span > < span class = \"sr-only\" > Next </ span > </ a > </ div > </ div > Carousel Indicators Carousel Items Now, what if we have a variable called dogsData an array of objects (may come from fetch ). 1 2 3 4 5 6 7 8 9 dogsData = [ ... { imgSrc : \"dog.jpg\" , title : \"First Dog\" , caption : \"Cutie :)\" } ... ] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 const Carousel = ( dogsData ) => ` <div class=\"carouselWrapper\"> <!--(1)--> <div id=\"carouselDoggo\" class=\"carousel slide\" data-ride=\"carousel\"> <ol class=\"carousel-indicators\"> ${ dogsData . map (( dog , index ) => `<li data-target=\"#carouselDoggo\" data-slide-to=\" ${ index } \" class=\" ${ index === 0 ? 'active' : '' } \"></li>` ). join ( '' ) } </ol> <div class=\"carousel-inner\"> ${ dogsData . map (( dog , index ) => ` <div class=\"carousel-item ${ index === 0 ? 'active' : '' } \"> <img src=\" ${ dog . imgSrc } \" class=\"d-block w-100\" alt=\"...\" /> <div class=\"carousel-caption d-none d-md-block\"> <h5> ${ dog . title } </h5> <p> ${ dog . caption } </p> </div> </div> ` ). join ( '' ) } </div> <a class=\"carousel-control-prev\" href=\"#carouselDoggo\" data-slide=\"prev\"> <span class=\"carousel-control-prev-icon\"></span> <span class=\"sr-only\">Previous</span> </a> <a class=\"carousel-control-next\" href=\"#carouselDoggo\" data-slide=\"next\"> <span class=\"carousel-control-next-icon\"></span> <span class=\"sr-only\">Next</span> </a> </div> </div> ` Assemble the Components \u00b6 1 2 3 4 5 6 7 { Nav ( \"Royal Homepage\" )} < div class = \"container\" > < div class = \"row\" > < div class = \"col-md-12\" > { Carousel ( dogsData )} < /div> < /div> or with JSX 1 2 3 4 5 6 7 < Nav title = \"Royal Homepage\" ></ Nav > < div class = \"container\" > < div class = \"row\" > < div class = \"col-md-12\" > < Carousel dogsData = {dogsData} ></ Carousel > </ div > </ div > Intro to React \u00b6 Complete Modularised Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 const Nav = () => < nav class = \"navbar sticky-top navbar-dark bg-dark\" > < div class = \"container nav\" > < a class = \"navbar-brand\" href = \"#\" > Royal Homepage < /a> < /div> < /nav> const Carousel = ( dogsData ) => < div class = \"carouselWrapper\" > < div id = \"carouselDoggo\" class = \"carousel slide\" data - ride = \"carousel\" > < ol class = \"carousel-indicators\" > $ { dogsData . map (( dog , index ) => `<li data-target=\"#carouselDoggo\" data-slide-to=\" ${ index } \" class=\" ${ index === 0 ? 'active' : '' } \"></li>` ). join ( '' )} < /ol> < div class = \"carousel-inner\" > $ { dogsData . map (( dog , index ) => ` <div class=\"carousel-item ${ index === 0 ? 'active' : '' } \"> <img src=\" ${ dog . imgSrc } \" class=\"d-block w-100\" alt=\"...\" /> <div class=\"carousel-caption d-none d-md-block\"> <h5> ${ dog . title } </h5> <p> ${ dog . caption } </p> </div> </div> ` ). join ( '' )} < /div> < a class = \"carousel-control-prev\" href = \"#carouselDoggo\" data - slide = \"prev\" > < span class = \"carousel-control-prev-icon\" >< /span> < span class = \"sr-only\" > Previous < /span> < /a> < a class = \"carousel-control-next\" href = \"#carouselDoggo\" data - slide = \"next\" > < span class = \"carousel-control-next-icon\" >< /span> < span class = \"sr-only\" > Next < /span> < /a> < /div> < /div> const Homepage = () =>{ const dogsData = fetch (...) // Get data from API return ( <> < Nav title = \"Royal Homepage\" >< /Nav> < div class = \"container\" > < div class = \"row\" > < div class = \"col-md-12\" > < Carousel dogsData = { dogsData } >< /Carousel> < /div> < /div> < /> ) } Getting Started with React \u00b6 Getting Started with the app To get started with react, use the following commands npx create-react-app my-app where my-app is the name of the folder for where the react app is going to be. cd my-app Notice that it created a couple of folders. In a couple of sentences: src/index.js - injects the user interface in the public/index.html (the front part of the build) public - folder containing the static assets as well as the index.html package.json - dependencies and scripts for the app type yarn start to run the development version of React (it will run react-scripts start within the node_modules \u2026 so running react-scripts start will not exactly be the same). This will serve up React in a port To be left as a live coding exercise. Live coding demonstration: Demo \u00b6 Passing Array props show \u201crafce\u201d useState when adding new item","title":"Introduction to React"},{"location":"2021-2022-summer/introduction-to-react/#introduction-to-react","text":"Sparking the REACTion of User Interface and Experience","title":"Introduction to React"},{"location":"2021-2022-summer/introduction-to-react/#decomposing-the-html-user-interface","text":"Complete code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity = \"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin = \"anonymous\" /> < link rel = \"stylesheet\" href = \"style.css\" /> < title > My Home Page - Frinze Lapuz </ title > </ head > < body > < nav class = \"navbar sticky-top navbar-dark bg-dark\" > < div class = \"container nav\" > < a class = \"navbar-brand\" href = \"#\" > Royal Homepage </ a > </ div > </ nav > < div class = \"container\" > < div class = \"row\" > < div class = \"col\" > Here Some Dog For You. Cool Stuff right? </ div > < div class = \"col\" > <!-- <img class=\"img-fluid img-thumbnail\" src=\"dog.jpg\" alt=\"dog\" /> --> < div class = \"carouselWrapper\" > < div id = \"carouselDoggo\" class = \"carousel slide\" data-ride = \"carousel\" > < ol class = \"carousel-indicators\" > < li data-target = \"#carouselDoggo\" data-slide-to = \"0\" class = \"active\" ></ li > < li data-target = \"#carouselDoggo\" data-slide-to = \"1\" ></ li > < li data-target = \"#carouselDoggo\" data-slide-to = \"2\" ></ li > </ ol > < div class = \"carousel-inner\" > < div class = \"carousel-item active\" > < img src = \"dog.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > First Dog </ h5 > < p > Cutie :) </ p > </ div > </ div > < div class = \"carousel-item\" > < img src = \"dog2.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > Second Dog </ h5 > < p > Good Doggo! </ p > </ div > </ div > < div class = \"carousel-item\" > < img src = \"dog3.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > Third Dog </ h5 > < p > Walkie Barkie Cutie! </ p > </ div > </ div > </ div > < a class = \"carousel-control-prev\" href = \"#carouselDoggo\" data-slide = \"prev\" > < span class = \"carousel-control-prev-icon\" ></ span > < span class = \"sr-only\" > Previous </ span > </ a > < a class = \"carousel-control-next\" href = \"#carouselDoggo\" data-slide = \"next\" > < span class = \"carousel-control-next-icon\" ></ span > < span class = \"sr-only\" > Next </ span > </ a > </ div > </ div > </ div > </ div > </ div > < script src = \"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity = \"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\" integrity = \"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\" integrity = \"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin = \"anonymous\" ></ script > </ body > </ html > Relevant Code for Discussion 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 < nav class = \"navbar sticky-top navbar-dark bg-dark\" > <!--(1)--> < div class = \"container nav\" > < a class = \"navbar-brand\" href = \"#\" > Royal Homepage </ a > </ div > </ nav > < div class = \"container\" > < div class = \"row\" > < div class = \"col\" > Here Some Dog For You. Cool Stuff right? </ div > <!--(2)--> < div class = \"col\" > < div class = \"carouselWrapper\" > <!--(3)--> < div id = \"carouselDoggo\" class = \"carousel slide\" data-ride = \"carousel\" > < ol class = \"carousel-indicators\" > < li data-target = \"#carouselDoggo\" data-slide-to = \"0\" class = \"active\" ></ li > < li data-target = \"#carouselDoggo\" data-slide-to = \"1\" ></ li > < li data-target = \"#carouselDoggo\" data-slide-to = \"2\" ></ li > </ ol > < div class = \"carousel-inner\" > < div class = \"carousel-item active\" > < img src = \"dog.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > First Dog </ h5 > < p > Cutie :) </ p > </ div > </ div > < div class = \"carousel-item\" > < img src = \"dog2.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > Second Dog </ h5 > < p > Good Doggo! </ p > </ div > </ div > < div class = \"carousel-item\" > < img src = \"dog3.jpg\" class = \"d-block w-100\" alt = \"...\" /> < div class = \"carousel-caption d-none d-md-block\" > < h5 > Third Dog </ h5 > < p > Walkie Barkie Cutie! </ p > </ div > </ div > </ div > < a class = \"carousel-control-prev\" href = \"#carouselDoggo\" data-slide = \"prev\" > < span class = \"carousel-control-prev-icon\" ></ span > < span class = \"sr-only\" > Previous </ span > </ a > < a class = \"carousel-control-next\" href = \"#carouselDoggo\" data-slide = \"next\" > < span class = \"carousel-control-next-icon\" ></ span > < span class = \"sr-only\" > Next </ span > </ a > </ div > </ div > </ div > </ div > </ div > Navigation Bar Some Text Carousel","title":"Decomposing the HTML User Interface"},{"location":"2021-2022-summer/introduction-to-react/#intro-to-react","text":"Complete Modularised Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 const Nav = () => < nav class = \"navbar sticky-top navbar-dark bg-dark\" > < div class = \"container nav\" > < a class = \"navbar-brand\" href = \"#\" > Royal Homepage < /a> < /div> < /nav> const Carousel = ( dogsData ) => < div class = \"carouselWrapper\" > < div id = \"carouselDoggo\" class = \"carousel slide\" data - ride = \"carousel\" > < ol class = \"carousel-indicators\" > $ { dogsData . map (( dog , index ) => `<li data-target=\"#carouselDoggo\" data-slide-to=\" ${ index } \" class=\" ${ index === 0 ? 'active' : '' } \"></li>` ). join ( '' )} < /ol> < div class = \"carousel-inner\" > $ { dogsData . map (( dog , index ) => ` <div class=\"carousel-item ${ index === 0 ? 'active' : '' } \"> <img src=\" ${ dog . imgSrc } \" class=\"d-block w-100\" alt=\"...\" /> <div class=\"carousel-caption d-none d-md-block\"> <h5> ${ dog . title } </h5> <p> ${ dog . caption } </p> </div> </div> ` ). join ( '' )} < /div> < a class = \"carousel-control-prev\" href = \"#carouselDoggo\" data - slide = \"prev\" > < span class = \"carousel-control-prev-icon\" >< /span> < span class = \"sr-only\" > Previous < /span> < /a> < a class = \"carousel-control-next\" href = \"#carouselDoggo\" data - slide = \"next\" > < span class = \"carousel-control-next-icon\" >< /span> < span class = \"sr-only\" > Next < /span> < /a> < /div> < /div> const Homepage = () =>{ const dogsData = fetch (...) // Get data from API return ( <> < Nav title = \"Royal Homepage\" >< /Nav> < div class = \"container\" > < div class = \"row\" > < div class = \"col-md-12\" > < Carousel dogsData = { dogsData } >< /Carousel> < /div> < /div> < /> ) }","title":"Intro to React"},{"location":"2021-2022-summer/introduction-to-react/#getting-started-with-react","text":"Getting Started with the app To get started with react, use the following commands npx create-react-app my-app where my-app is the name of the folder for where the react app is going to be. cd my-app Notice that it created a couple of folders. In a couple of sentences: src/index.js - injects the user interface in the public/index.html (the front part of the build) public - folder containing the static assets as well as the index.html package.json - dependencies and scripts for the app type yarn start to run the development version of React (it will run react-scripts start within the node_modules \u2026 so running react-scripts start will not exactly be the same). This will serve up React in a port To be left as a live coding exercise. Live coding demonstration:","title":"Getting Started with React"},{"location":"2021-2022-summer/introduction-to-react/#demo","text":"Passing Array props show \u201crafce\u201d useState when adding new item","title":"Demo"},{"location":"2021-2022-summer/introduction-to-vue/","text":"Introduction to Vue \u00b6 A Vuetiful Introduction to VueJS Due to time constraints, we had to reuse the previous Winter Materials . As always, see the youtube video playlist","title":"Introduction to Vue"},{"location":"2021-2022-summer/introduction-to-vue/#introduction-to-vue","text":"A Vuetiful Introduction to VueJS Due to time constraints, we had to reuse the previous Winter Materials . As always, see the youtube video playlist","title":"Introduction to Vue"},{"location":"2021-2022-summer/introduction-to-web-development/","text":"Introduction to Web Development Space \u00b6 Navigating the Deep Dark Space of Web Development This workshop covers a brief overview of the most common tools and technologies used in web development. Content \u00b6 What and Why Web Development? FAQs about Web Development Basics of Web and Limitation Server-side Applications (Backend) Others Languages of the Web (the usual) Hosting Stuff CSS Frameworks Developer Tools TypeScript Testing Continuous Integration / Continuous Deployment Virtualisation and Containerisation Browsers Firefox Developer Tools Package Managers Version Control Linters and Formatters Teamwork Roadmaps Word of Encouragement What and Why Web Development? \u00b6 What is web development? \u00b6 Websites development Web applications (client-side and server-side) development Why Web Development ? \u00b6 Accessibility and Portability Career and On-demand in job market Huge possibility to combine with other emerging technologies (e.g. IoT, Machine Learning) and industry (e.g. Health, Mining, O&G) Career in Web Development Source: Insights from Stack Overflow\u2019s 2016 survey of 50,000 developers \"Half of Developers are Web Developers\" FAQs about Web Development \u00b6 Why code websites, why not use drag and drops like Wordpress, WIX? \u00b6 Content Management System (CMS) Limitations on theme/template used Difficult to extend Cybersecurity More information CMS are one of the application of web development, but there are plenty more such as - internet of things, custom software for a particular industrial application (eg. using Machine Learning) CMS are usually limited to the template or plugin that you use. If those plugin don't exist, then it limits your productivity very much (difficulty to extend). CMS are usually built to cater for non-technical users. This means that thye become the subject of hackers. Think about a scenario where a hacker was able to find a vulnerability in WordPress, now every other WordPress site will be vulnerable. What is the best way to learn all these? \u00b6 In summary, the best way to learn: Do personal projects (inspiration + motivation) Do team projects (get peer reviews and correct bad practices straight away) Watch Online Courses (to figure out what is available) More Information To be told that you have to learn \"this, this, and that\" before you could do things is tiresome. Often times, we want to learn to be a developer so that we can create cool things like software where thousands of people can use the app. We don't tend to be a developer for the sake of us needing to watch endless videos on different things. Why does CFC not do mobile development as much as web development? \u00b6 App stores has a developer cost Easier to deal/teach web technologies Accessibility (mobile, sensors, tablets, laptops and PCs) Bigger open-source community If I already know a frontend framework, is it better to learn another frontend framework or to learn a backend framework? \u00b6 It is better to learn a backend framework Reasoning You want to build skills that complement one another rather than be an alternative. It is much more valuable for you to learn a backend framework because that helps you build a functional app. Basics of Web and Limitation \u00b6 HTML What is it? Hypertext Markup Language Describes the structure of a web page Limitation Doesn\u2019t handle repeated content well No variables or calculation HTML Syntax 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > Hello World! </ body > </ html > CSS What is it? Cascading Style Sheets Describes the presentation of a web page Limitation Most css is quite similar (Handled by CSS Libraries) Not very dynamic (Handled by CSS Frameworks) CSS Syntax 1 2 3 4 5 6 7 8 9 body { background-color : #f0f0f0 ; font-family : sans-serif ; } . container { width : 80 % ; margin : 0 auto ; } JS What is it? JavaScript Used to program complex features on a web page Limitation Has the capability to modify the user interface, but becomes really tedious to modify interface (more about this in another workshop) JS Syntax 1 2 3 4 5 6 7 const bodySelector = document . querySelector ( 'body' ); const myFunction = () => { bodySelector . innerHTML = 'Hello World 2!' ; // Add a container class to space out bodySelector . classList . add ( 'container' ); } bodySelector . onclick = myFunction ; Modern Frameworks \u00b6 Websites can be much more\u2026 they can be web applications \u201cApp\u201d in a website (client-side rendering) Modern Frameworks React.js More mature and used more in industry Vue.js Growing fast in popularity and use. General Information Both are good to use and learn. Knowledge is transferable between the two frameworks. Comparison between HTML and JSX Highlighted portions are starting chunk of distinct code. HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 < div class = \"row\" > < div class = \"m-0 col-12 col-md-6 col-lg-3\" > < div class = \"text-center border-0 bg-transparent card\" > < div class = \"px-0 card-body\" > < i class = \"material-icons-sharp md-lg\" > devices </ i > < p class = \"mt-4 font-weight-bold text-monospace text-larger\" > Applications </ p > < p class = \"mb-0\" > Build custom web and mobile applications to engage with your audience </ p > </ div > </ div > </ div > < div class = \"m-0 col-12 col-md-6 col-lg-3\" > < div class = \"text-center border-0 bg-transparent card\" > < div class = \"px-0 card-body\" > < i class = \"material-icons-sharp md-lg\" > web </ i > < p class = \"mt-4 font-weight-bold text-monospace text-larger\" > Websites </ p > < p class = \"mb-0\" > Build new websites or optimise existing pages to improve online visibility </ p > </ div > </ div > </ div > < div class = \"m-0 col-12 col-md-6 col-lg-3\" > < div class = \"text-center border-0 bg-transparent card\" > < div class = \"px-0 card-body\" > < i class = \"material-icons-sharp md-lg\" > storage </ i > < p class = \"mt-4 font-weight-bold text-monospace text-larger\" > Data Storage </ p > < p class = \"mb-0\" > Design and create databases for efficient information storage and retrieval </ p > </ div > </ div > </ div > < div class = \"m-0 col-12 col-md-6 col-lg-3\" > < div class = \"text-center border-0 bg-transparent card\" > < div class = \"px-0 card-body\" > < i class = \"material-icons-sharp md-lg\" > how_to_reg </ i > < p class = \"mt-4 font-weight-bold text-monospace text-larger\" > Consulting </ p > < p class = \"mb-0\" > Empower your organisation through technical knowledge and advice </ p > </ div > </ div > </ div > </ div > JSX 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import { memo } from 'react' import { Row , Col , Card , CardBody } from 'reactstrap' import services from 'data/services.json' const Service = ( props : { icon : string title : string description : string }) => ( < Card className = 'text-center border-0 bg-transparent' > < CardBody className = 'px-0' > < i className = 'material-icons-sharp md-lg' > { props . icon } < /i> < p className = 'mt-4 font-weight-bold text-monospace text-larger' > { props . title } < /p> < p className = 'mb-0' > { props . description } < /p> < /CardBody> < /Card> ) const Services = () => ( < Row > { services . map ( service => ( < Col xs = { 12 } md = { 6 } lg = { 12 / services . length } className = 'm-0' key = { service . title } > < Service {... service } /> < /Col> ))} < /Row> ) export default memo ( Services ) Server-side Applications (Backend) \u00b6 How do devices communicate? \u00b6 HTTP Request - Hypertext Transfer Protocol What do server applications do? \u00b6 Serve frontends (server-side rendering) Web API (Application Programming Interface) Serve data (usually from a database) Process Request (Sending emails or SMS, Machine Learning) Databases \u00b6 Place to store the data Mongodb Allows for database design to be modified without complex migration or data loss SQL Typically faster and better for large amounts of data or systems that need data consistency and reliability Others \u00b6 Languages of the Web (the usual) \u00b6 Python (Django, Flask) JavaScript (Node.js, Express) Ruby, Go, Rust, C Hosting Stuff \u00b6 Many ways - Own a server - Use a 3 rd party platform CSS Frameworks \u00b6 Frontend (JS) Vue, React Nuxt.js, Next.js Frontend (CSS) MaterialUI, Vuetify Bootstrap Developer Tools \u00b6 TypeScript \u00b6 Type checking is super useful for complex apps Allows for way better javascript developer tooling Can be annoying if you\u2019re new at it Testing \u00b6 Selenium, Cypress End to end automated testing tools Jest, Mocha, Pytest Unit testing Testing is vital to software projects Continuous Integration / Continuous Deployment \u00b6 Automated Testing Event-driven scripts E.g. Github Action, Bitbucket Pipelines Virtualisation and Containerisation \u00b6 Allows execution of services in a virtual environment eg. Docker (Containerisation), Vagrant (Virtualisation) Browsers \u00b6 Standard browsers Google Chrome, Firefox, Edge, etc. Backwards compatibility Internet Explorer Other Mobile - Responsive Screen readers - Accessibility Firefox Developer Tools \u00b6 Page Inspector Visualise page aspects Grid layout Web Console console.log(\u201cHello World\u201d) Responsive Design Mode View from POV of different screen sizes such as mobile, tablets, etc. Some more tools JavaScript Debugger Network Monitor Performance Tools Rulers Colour Pickers Learn more at: https://developer.mozilla.org/en-US/docs/Tools Package Managers \u00b6 Installs libraries that can be used Also has code shortcuts (e.g. npm run start) (More about package.json and poetry.toml in the projects and Package Manager Workshop) Version Control \u00b6 Essential for developer teams and complex software development Git Linters and Formatters \u00b6 Makes code formatting consistent (following standard) Useful with version controls to avoid pointless change eg.ESLint, Prettier Teamwork \u00b6 Many tools out there Used to stop teams from stepping on each others toes Github Issues + Pull Requests Roadmaps \u00b6 There's an open-source community that maintains a learning roadmap for developers. See https://roadmap.sh/ Frontend Developer Backend Developer Dev-Ops Word of Encouragement \u00b6 Encouragement from the Tech Lead \"I can admit that this journey of learning will be difficult, and can sometimes be overwhelming and demotivating. Please, if at any point of this project, you feel that you don't know enough, or you're feeling lost, please reach out! We are all in this journey together! Nobody is born talented, skills are honed with determination and willingness to learn.\" \"When I was a first year student entering on the CFC winter project, I didn't feel like I was good enough. I couldn't create a good looking interface, I didn't know how to use npm and all sorts of those things. I was just like many of you! if I gave up just because of all those things I didn't know, of all those self-doubts, then I wouldn't be here today. I admit that I was lucky because I was in CFC, I had connections where I can just ask questions instead of feeling lost of not knowing. So please do leverage that opportunity to reach out\" \"You being in this project not only gives you the opportunity to raise your talents, but you also unlock one of the biggest factor of the growth of your career, and that is the connections with your fellow software engineers.\"","title":"Introduction to Web Development"},{"location":"2021-2022-summer/introduction-to-web-development/#introduction-to-web-development-space","text":"Navigating the Deep Dark Space of Web Development This workshop covers a brief overview of the most common tools and technologies used in web development.","title":"Introduction to Web Development Space"},{"location":"2021-2022-summer/introduction-to-web-development/#content","text":"What and Why Web Development? FAQs about Web Development Basics of Web and Limitation Server-side Applications (Backend) Others Languages of the Web (the usual) Hosting Stuff CSS Frameworks Developer Tools TypeScript Testing Continuous Integration / Continuous Deployment Virtualisation and Containerisation Browsers Firefox Developer Tools Package Managers Version Control Linters and Formatters Teamwork Roadmaps Word of Encouragement","title":"Content"},{"location":"2021-2022-summer/introduction-to-web-development/#what-and-why-web-development","text":"","title":"What and Why Web Development?"},{"location":"2021-2022-summer/introduction-to-web-development/#faqs-about-web-development","text":"","title":"FAQs about Web Development"},{"location":"2021-2022-summer/introduction-to-web-development/#basics-of-web-and-limitation","text":"HTML What is it? Hypertext Markup Language Describes the structure of a web page Limitation Doesn\u2019t handle repeated content well No variables or calculation HTML Syntax 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > Hello World! </ body > </ html > CSS What is it? Cascading Style Sheets Describes the presentation of a web page Limitation Most css is quite similar (Handled by CSS Libraries) Not very dynamic (Handled by CSS Frameworks) CSS Syntax 1 2 3 4 5 6 7 8 9 body { background-color : #f0f0f0 ; font-family : sans-serif ; } . container { width : 80 % ; margin : 0 auto ; } JS What is it? JavaScript Used to program complex features on a web page Limitation Has the capability to modify the user interface, but becomes really tedious to modify interface (more about this in another workshop) JS Syntax 1 2 3 4 5 6 7 const bodySelector = document . querySelector ( 'body' ); const myFunction = () => { bodySelector . innerHTML = 'Hello World 2!' ; // Add a container class to space out bodySelector . classList . add ( 'container' ); } bodySelector . onclick = myFunction ;","title":"Basics of Web and Limitation"},{"location":"2021-2022-summer/introduction-to-web-development/#server-side-applications-backend","text":"","title":"Server-side Applications (Backend)"},{"location":"2021-2022-summer/introduction-to-web-development/#others","text":"","title":"Others"},{"location":"2021-2022-summer/introduction-to-web-development/#word-of-encouragement","text":"Encouragement from the Tech Lead \"I can admit that this journey of learning will be difficult, and can sometimes be overwhelming and demotivating. Please, if at any point of this project, you feel that you don't know enough, or you're feeling lost, please reach out! We are all in this journey together! Nobody is born talented, skills are honed with determination and willingness to learn.\" \"When I was a first year student entering on the CFC winter project, I didn't feel like I was good enough. I couldn't create a good looking interface, I didn't know how to use npm and all sorts of those things. I was just like many of you! if I gave up just because of all those things I didn't know, of all those self-doubts, then I wouldn't be here today. I admit that I was lucky because I was in CFC, I had connections where I can just ask questions instead of feeling lost of not knowing. So please do leverage that opportunity to reach out\" \"You being in this project not only gives you the opportunity to raise your talents, but you also unlock one of the biggest factor of the growth of your career, and that is the connections with your fellow software engineers.\"","title":"Word of Encouragement"},{"location":"2021-2022-summer/introduction-web-basics/","text":"Introduction to the Web Basics - HTML, CSS & JavaScript \u00b6 The tools of the web This workshop will introduce you to the basics of HTML, CSS and JavaScript, the fundamental technologies of web development. This is a very introductory workshop, and there is still so much we can learn, but this will be a good place to start. Content \u00b6 Key Web Technologies HTML Elements Attributes Images Anchors/Hyperlinks Forms Document Object Model CSS CSS Format Rules of Selection Document and External Style Sheets Flexboxes JavaScript The Basics of JavaScript Arrays Objects Functions Loops Web App Tutorial Key Web Technologies \u00b6 HTML, CSS and JavaScript each have a different job when it comes to creating web pages. What do they do? \u00b6 HTML : describes the content and structure of the web page CSS : describes the style and appearance of the web page JavaScript : provides funtionality to a web page HTML \u00b6 Hyper Text Markup Language (HTML) is used to structure the webpage. The general structure of a webpage can be seen below. My First HTML Page 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html lang = \"en\" > < head > < title > You see this text on your browser tab!!! </ title > </ head > < body > <!-- this is where the content goes! --> < h1 > My First Heading </ h1 > < p > This is a paragraph </ p > </ body > </ html > Elements \u00b6 A webpage is made of elements, each with their own properties, that contain content to be displayed on the page. Elements are defined by tags, such as h1 , div and body . Most elements have an open and close tab. The container and its content, together, are called an element. 1 < h1 > This is a header element. </ h1 > The most notable, and probably the tag you will use most, is the <div> tag. It defines a division or section within the HTML document, and is used as a container that holds other elements. The Seperator 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <!DOCTYPE html> < html lang = \"en\" > < head > < title > The Web Dev Fairytale </ title > </ head > < body > < div > <!-- This div concerns itself with the main heading/title of the story --> < h1 > The Dev, the Debugger and the Caffiene Addiction </ h1 > </ div > < div > <!-- This div concerns itself with the first chapter it its entirety --> < h1 > Chapter 1 </ h1 > < div > <!-- This div concerns itself with the text of the first chapter --> <!-- section within a section. A subsection! --> < p > Once upon a time, in a castle far, far away... </ p > </ div > </ div > < div > < h2 > Chapter 2 </ h2 > </ div > </ body > </ html > We will go through the important ones during this workshop, but you can find the full of them here . Attributes \u00b6 Most tags have attributes that specify information or change the tag in some way. The most common being class and id . Most Common Attributes \u00b6 class : used to specify one or more class names for a HTML element. Classes are used to group certain elements in order to give them specific features through CSS and to allow many elements to be manipulated using JavaScript. id : used to specify a unique id for an element and must be unique The id attribute is assigned to an element so that element can be exclusively specified in the style declaration and JavaScript manipulation Below is an example of how attributes are assigned in your code. Elements and their Attributes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <!DOCTYPE html> < html lang = \"en\" > < head > < title > You see this text on your browser tab!!! </ title > </ head > < body style = \"background-color: red\" > < div class = \"bigSection\" > < h1 > BIG HEADER! </ h1 > < p id = \"first\" > This is the first paragraph of the webpage </ p > <!-- more cool stuff goes here --> </ div > < div class = \"smallSection\" > < h6 > small header </ h6 > </ div > </ body > </ html > Images \u00b6 Images are added by using the <img> element tag. It can also be used to add gifs! Example 1 < img src = \"https://i.imgur.com/SjZxZza.jpeg\" alt = \"Three Cute Dog Mermaids\" > Cute, right? Image Attributes \u00b6 src : specifies the location of the image to be displayed This can either be a url, as in the example above, or the relative path of an image within the site's directory alt : an optional attribute that contains a text description. Is useful for accessibility or if the image does not load properly Anchors and Hyperlinks \u00b6 We can add links to other websites, or even to sections within the same page, using the <a> element, known as an anchor. Adding a hyperlink to an HTML page 1 < a href = \"https://codersforcauses.org/\" target = \"_blank\" > Coders for Causes </ a > They can be adding added by themself, or within text such as here . Anchor Attributes \u00b6 href : specifies the destination to link to External site: simply include the url you wish to visit Different page within the site: include the path to the new page, usually in the form of \"/.../index.html\" Different section on same page: use #name_of_section where name_of_section is the id of the element you wish to go to target : specifies where to open the link Setting the target attribute to \"_blank\" opens the link in another tab download : specifies that the linked resouces will be downloaded. Only needs to be included in the declaration of the element Optional: if value of download is set, that value will be the name of the file Always be careul when clicking links. You never know when there is something you should not click. Images and Hyperlinks \u00b6 Any image, or any element in general, can be turned into a link by enclosing the element within the anchor tabs. Hyperlinked image 1 2 3 < a href = \"https://codersforcauses.org/\" target = \"_blank\" > < img src = \"https://www.uwastudentguild.com/assets/clubs/logos/logo---coders-for-causes-1567649329.jpg\" > </ a > Forms \u00b6 Forms are used to collect user input. They are defined by the <form> tags and usually contain form elements such as <input> , <textbox> , etc. Inputs can come in many different forms, such as textboxes, radio buttons, checkboxes and drop down menus. Each input field is given a value Once a form is complete and filled out, we need to submit, or POST, it. This can be done through a special input of type submit . The only required attribute of <form> is action . The action attribute speicifies the URL of the application that is to be called when the Submit button is pressed. If no action, then the attribute takes the value of an empty string and the current page is the destination. Example 1 2 3 4 5 6 7 < p > I like: </ p > < form action = \"\" > < input type = \u201dradio\u201d value = \u201dRed\u201d > < input type = \u201dradio\u201d value = \u201dGreen\u201d > < input type = \u201dradio\u201d value = \u201dBlue\u201d > < input type = \u201dsubmit\u201d value = \u201dSubmit\u201d > </ form > Input Validation \u00b6 Input validation is a very important aspect to consider when dealing with forms. Remember the famous acronym GIGO, Garbage-in Garbage-Out. To assist you with input validation, HTML forms have in-built validation for different types of data, such as emails, numbers and dates. This can be achieved by changing the input type of a field to the respective data entry type. Baseline input validation with HTML 1 < input type = \"email\" name = \"email\" value = \"Email\" > Document Object Model \u00b6 All the elements of a HTML page make up a document tree, called the Document Object Model (DOM). The DOM is a platform and language-neutral interface that allows programs to dynamically access and update the content, structure and style of the HTML document. Each element in a HTML document is represented by a node on the tree. We can then use things such as JavaScript to access and update the HTML document using the DOM. We will see more of this in the tutorial at the end. CSS \u00b6 Cascading Style Sheets (CSS) provides style to the web. It is used to specify the layout and style of markup languages. CSS tells the browser how to display the elements that are written in HTML. We can write the CSS style rules into an element using inline CSS, where the style attribute of an element is modified directly in the HTML. Inline style sheets 1 2 3 < body style = \"background-color: red;\" > <!-- rest of body goes here --> </ body > However, this gets hard to manage and maintain, especially when the number of elements in a document grows, and when we want to change many elements that have the same style. We use document-level style sheets or external style sheets to combat this issue. But first, we must understand how to create these style sheets. CSS Format \u00b6 Selector A value, or list of values, that specify the elements for which the following style will be applied to Rules for specification will be discussed a little later on, see here Attribute The attribute/property of an element you wish you change Some example attributes include background-color , font-size and width Effect The effect is the value you set each attribute to be This includes setting background-color to \"red\", or font-size to \"16px\" The following CSS specifies that all img elements are to be centered and have a width of 50 pixels. My First CSS 1 2 3 4 5 6 7 img { /* attribute: effect; */ display : block ; margin-left : auto ; margin-right : auto ; width : 50 px ; } How do I know what attributes exist, and what do I change to get my desired effect? There are two simple answers to this question: 1. Google it. Chances are, someone has already tried to do something similar and your solution already exists. 2. Play around . Learn what attributes exist, and how changing thier effects changes their on screen appearance. Rules of Selection \u00b6 As mentioned earlier, selectors have a set of rules that allow you to apply styles to certain, or even very specific, groups of elements. These can range selecting elements based on the type of element they are, or what class they are in, to selecting all elements of a certain type that are immediately preceded by an element of another type. Element Element selectors simply apply the defined style to all elements of the same type. 1 2 3 body { background-color : red ; } Class Class selectors apply the defined style to all elements belonging to that class. They are similar to element selectors, except that the class name is preceded by a . character. 1 2 3 . narrow { width : 10 % } We can also specify the type of element within a class we wish to apply the style to by including it before the . character. The following code selects all <p> elements that are of the class narrow : 1 2 3 p . narrow { width : 10 % ; } id These selectors apply the style to an element based on its id . The id is preceded by # in the selector definition. 1 2 3 # bigButton { font-size : 16 px ; } Psuedo Classes Psuedo classes are styles that apply only when a certian action occurs or a condition is met, and not all the time. Some common selectors include hover , focus and active . They are included after the element, class or id has been specified, and are preceded with a colon : . 1 2 3 button : hover { color : red ; } The full list of them can be found here . Group To specify a group of elements to apply a style to, simply list the elements, ids or classes delimitted by a comma ( , ). 1 2 3 h1 , h2 , div { color : red ; } Other There exists other selectors that allow you to be more specific as to what elements are to be selected, such as contextual selectors, but we will leave those as self-learning . Contextual Selectors Contextual selectors group elements based on their position and surroundings in the document tree. Further reading into the topic can be found through searching the web for platforms that teach you all about computer science, such as Geeks for Geeks . Document and External Style Sheets \u00b6 Now that we know what we are doing, let's create some style sheets! Document and External style sheets help us better organise and manage the styles of the document. They are located in one location, so you do not have to go far to find them and change parts of your document. Document Style Sheets \u00b6 Document style sheets are located within the <head> of a HTML document, under the <style> tag. They work in the same was as mentioned above . See the below example of how document style sheets are implemented within a HTML page. Document Style Sheets 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 <!DOCTYPE html> < html lang = \"en\" > < head > < title > You see this text on your browser tab!!! </ title > < style > body { background-color : blue ; } p { color : red ; font-size : 16 px ; } </ style > </ head > < body > <!-- this is where the content goes! --> < h1 > My First Heading </ h1 > < p > This is a paragraph </ p > </ body > </ html > External Style Sheets \u00b6 What happens when our site grows, and the number of HTML pages increases, and suddenly styles have to change, and we have to change every document, but they all have to follow the same styling as the others, and we have to manage that?! Thankfully, we can store our styles in a seperate .css file and then simply reference the stylesheet in our HTML document. styles.css 1 2 3 4 5 6 7 body { background-color : blue ; } p { color : red ; font-size : 16 px ; } Once we have our css file completed, we can reference it in the HTML document, again in the <head> , so that it can apply the styles to our document. Applying my CSS files to my HTML document 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE html> < html lang = \"en\" > < head > < title > You see this text on your browser tab!!! </ title > < link rel = \"stylesheet\" href = \"styles.css\" > </ head > < body > <!-- this is where the content goes! --> < h1 > My First Heading </ h1 > < p > This is a paragraph </ p > </ body > </ html > Flexboxes \u00b6 Flexboxes are a great way to position your items within a container. Learning is best done when having fun and getting your hands dirty (metaphorically). Flexbox Froggy is an interactive website that teaches you all about flexboxes, one step at a time. Your aim is to allign all the frogs to their corresponding lilypads. It is a much better learning tool than sitting and reading about some code I wrote. JavaScript \u00b6 JavaScript, also known as JS, gives a web page fucntionality and reactiveness. It allows the user to interact with the web page, and for us to make it to do things that we want it to do. Similar to CSS, all your JS can be implemented into a HTML document by encapsulating it in the <script> tag within the <head> of the document, or even <body> in this case. However, we will be sticking to having our JS stored in external files for ease of managability. See the below example of how to add a script file to your page. To add many files, simply add another <script> element and reference the other file. Adding JavaScript to my HTML document 1 < script src = \"script.js\" ></ script > The Basics of JavaScript \u00b6 We shall discuss the basic syntax of JS, such as variables and functions, just to get you started. Feel free to do some of your own learning, too. There is a lot of cool things you can do and shortcuts you can use when you dive deeper into JavaScript, such as the ternary operator , but we will leave these for now. Variables \u00b6 Variables are named memory locations that store data. To define a variable, we can use three different keywords, each giving the variable special properties. Variable Declaration \u00b6 var allows the variable to be redeclared later on in the program gives the variable a global scope, meaning they can be accessed anywhere within the file let once a variable has been declared using let , it cannot be redeclared. It's value can still change, however. gives the variable block scope , meaning it can only be accessed within the block of code that it has been declared in. For example, if I declare a variable using the let key word, I cannot access it outside of the function. const Once the variable has been declared and assigned, it cannot be redeclared and the value never changes. It stays constant , sort of. It, too, gives the variable block scope. For a full explanation on variable declaration in JS, check out w3schools' page on it. Variables can hold different data types, such as numbers, strings, objects, functions and arrays, but JS will cover the type identification for you. Datatypes \u00b6 There are two groups of data types in JS: primitives and structural. A primitive is data that is not an object and has no methods. There are seven primitive data types: String, Number, BigInt, undefined, null and symbol A structural data type is one where the data is in the form of an object, and that object has its own methods. The main structural data types are: Objects and Functions Math and Logic \u00b6 Math and logic works similar in JS to other programming languages. Math \u00b6 + , - : addition and subtraction * , / : multiplication and division, respectively. % : modulo operator. Returns the remainder left over after division. For example, 8 % 3 returns 2. ** : exponent ( x to the power of y ) base ** power Logic \u00b6 && : AND operation || : OR operation ! : NOT operation > / >= : greater than/greater than or equal to < / <= : less than/less than or equal to == : equal to === : exactly equal to Works in a similar way to == , except it also checks that the datatype is the same Difference between == and === 1 2 console . log ( \"2\" == 2 ); /* true */ console . log ( \"2\" === 2 ); /* false */ Arrays \u00b6 Arrays are an ordered list of values. They can hold values of many datatypes. Their index starts at 0. 1 2 3 let myArray = [ \"a\" , \"b\" , \"c\" , 1 , 2 , 3 , { name : \"Jared\" , age : 19 , canRead : false }] myArray [ 0 ] // returns \"a\" myArray [ 4 ] // returns 2 Objects \u00b6 Objects are variables that can hold more than one value. One can be seen in the previous example in Arrays . The different values of an object are called keys. The keys can hold regular primitive values, such as numbers or strings, or can hold other objects, such as functions. Think of Objects as a list of key/value pairs. To access a key's value within an object, you must first reference the object in question, then insert a . folllowed by the key you wish to get. Objects in JavaScript 1 2 3 4 5 6 let person = { name : \"Jared\" , age : 19 , canRead : false } console . log ( person . age ) // outputs 19 Functions \u00b6 Functions are blocks of code designed to execute a particular task. In JS, the syntax for defining a function is as follows: Functions in JavaScript 1 2 3 function func_name ( parameter1 , parameter2 , ...){ // your code goes here (optional, but highly recommended) } Functions can be called or stored in variables. Calling and Storing Functions 1 2 3 4 5 6 7 8 9 10 11 function hello_world (){ console . log ( \"Hello, world!\" ) } // Calling the function helloWorld () // Storing the function in a variable const func_name = function ( param1 , param2 ){ // do stuff here } Functions can return a value (after calculation, etc) or simply perform work on existing data/variables. Functions that do not return anything are normally called procedures . Arrow Functions \u00b6 Arrow functions are just a compact way of writing normal functions. They work by removing the function key word, and even the return keyword in some cases. Arrows functions lead with their parameters, usually enclosed in normal brackets. An arrow => then follows, preceding the actual block of code to be executed. Arrow Functions: Example 1 1 2 3 4 5 6 7 // Traditional function function addXY ( x , y ){ return x + y ; } // Arrow function let addXY = ( x , y ) => x + y ; In single-lined functions, such as the one above, both the { braces } and the return can be omitted. However, when there are extra lines of processing, both must be included. Arrow Functions: Example 2 1 2 3 4 5 6 7 8 9 10 11 12 13 // Traditional function add10 ( x , y ){ x += 10 y += 10 return x + y ; } // Arrow function let add10 = ( x , y ) => { x += 10 y += 10 return x + y ; } Loops \u00b6 For For loops repeat until a condition is met. That condition is defined in the for loop. For loops have the following structure: For Loops 1 2 3 4 5 6 7 8 9 10 11 /* for(int i = start; condition; increment){ // code here } */ // Loop 10 times for ( int i = 0 ; i < 10 ; i ++ ){ console . log ( i ) } // Output: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 For-in For-in loops iterate over the indexes of data in an iterable object, such as an array. For-in Loops 1 2 3 4 5 let myArray = [ 2 , 4 , 6 ] for ( let j in myArray ){ console . log ( j ) } // Output: 0, 1, 2 For-of For-of loops iterate over the data in the iterable object. For-of Loops 1 2 3 4 5 let myArray = [ 2 , 4 , 6 ] for ( let k of myArray ){ console . log ( j ) } // Output: 2, 4, 6 While While loops iterate while a condition is true. They are called a \"pre-test\" loop, where the condition is tested before the loop can run. The condition is included in the brackets. While Loops 1 2 3 4 5 6 let b = 0 while ( b < 3 ){ console . log ( \"Bon\" ) b ++ } // Output: \"Bon\\n Bon\\n Bon\\n\" Do-while Do-while loops are similar to while loops, except that they let the block of code run once before testing the condition. They are known as \"post-test\" loops, and the loop is guaranteed to execute at least once. Do-while Loops 1 2 3 4 5 6 let b = 0 do { console . log ( \"Bon\" ) b ++ } while ( b > 10 ) // Output: \"Bon\\n\" Loops can be broken or stopped using the break or continue statements. Breakin' out \u00b6 break : execution leaves the loop completely and continues on with the next lines of code continue : disregards the rest of the code in the loop block and moves on to the next item in the loop Creating a Pokemon API Webapp \u00b6 Now that we know a little bit about the tools of the web, let's build a simple web app that uses the skills we have learnt in this workshop, as well as some other skills we will learn along the way, to create an app that can do something cool. For this tutorial, we will pay homage to the recent releases of Pokemon Brilliant Diamond and Shining Pearl, of which I have spent an embarrassing number of hours on since they came out about a week ago, and create a web app that uses the PokeAPI to display images and information about any Pokemon we want. This tutorial will take place at 4:30pm AWST on the 31 st of November, 2021 via the CFC Discord server. The recording of that tutorial will be here once it has finished. Back to Top","title":"Introduction to Web Basics"},{"location":"2021-2022-summer/introduction-web-basics/#introduction-to-the-web-basics-html-css-javascript","text":"The tools of the web This workshop will introduce you to the basics of HTML, CSS and JavaScript, the fundamental technologies of web development. This is a very introductory workshop, and there is still so much we can learn, but this will be a good place to start.","title":"Introduction to the Web Basics - HTML, CSS &amp; JavaScript"},{"location":"2021-2022-summer/introduction-web-basics/#content","text":"Key Web Technologies HTML Elements Attributes Images Anchors/Hyperlinks Forms Document Object Model CSS CSS Format Rules of Selection Document and External Style Sheets Flexboxes JavaScript The Basics of JavaScript Arrays Objects Functions Loops Web App Tutorial","title":"Content"},{"location":"2021-2022-summer/introduction-web-basics/#key-web-technologies","text":"HTML, CSS and JavaScript each have a different job when it comes to creating web pages.","title":"Key Web Technologies"},{"location":"2021-2022-summer/introduction-web-basics/#html","text":"Hyper Text Markup Language (HTML) is used to structure the webpage. The general structure of a webpage can be seen below. My First HTML Page 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html lang = \"en\" > < head > < title > You see this text on your browser tab!!! </ title > </ head > < body > <!-- this is where the content goes! --> < h1 > My First Heading </ h1 > < p > This is a paragraph </ p > </ body > </ html >","title":"HTML"},{"location":"2021-2022-summer/introduction-web-basics/#css","text":"Cascading Style Sheets (CSS) provides style to the web. It is used to specify the layout and style of markup languages. CSS tells the browser how to display the elements that are written in HTML. We can write the CSS style rules into an element using inline CSS, where the style attribute of an element is modified directly in the HTML. Inline style sheets 1 2 3 < body style = \"background-color: red;\" > <!-- rest of body goes here --> </ body > However, this gets hard to manage and maintain, especially when the number of elements in a document grows, and when we want to change many elements that have the same style. We use document-level style sheets or external style sheets to combat this issue. But first, we must understand how to create these style sheets.","title":"CSS"},{"location":"2021-2022-summer/introduction-web-basics/#javascript","text":"JavaScript, also known as JS, gives a web page fucntionality and reactiveness. It allows the user to interact with the web page, and for us to make it to do things that we want it to do. Similar to CSS, all your JS can be implemented into a HTML document by encapsulating it in the <script> tag within the <head> of the document, or even <body> in this case. However, we will be sticking to having our JS stored in external files for ease of managability. See the below example of how to add a script file to your page. To add many files, simply add another <script> element and reference the other file. Adding JavaScript to my HTML document 1 < script src = \"script.js\" ></ script >","title":"JavaScript"},{"location":"2021-2022-summer/introduction-web-basics/#creating-a-pokemon-api-webapp","text":"Now that we know a little bit about the tools of the web, let's build a simple web app that uses the skills we have learnt in this workshop, as well as some other skills we will learn along the way, to create an app that can do something cool. For this tutorial, we will pay homage to the recent releases of Pokemon Brilliant Diamond and Shining Pearl, of which I have spent an embarrassing number of hours on since they came out about a week ago, and create a web app that uses the PokeAPI to display images and information about any Pokemon we want. This tutorial will take place at 4:30pm AWST on the 31 st of November, 2021 via the CFC Discord server. The recording of that tutorial will be here once it has finished. Back to Top","title":"Creating a Pokemon API Webapp"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/","text":"MVC-MVMM Architecture and Communications \u00b6 Separate the concerns with Design Patterns! What is MVC/MVVM Architecture? \u00b6 MVC (Model-View-Controller) Model \u2013 data representation layer (how app communicates to db \u2013 Raw or ORM) View \u2013 interface representation (with HTML, CSS and JS) Controller \u2013 request relays (processes HTTP requests) MVC MVVM (Model-ViewModel-View) ViewModel \u2013 data-binding relays (processes the HTTP requests) MVVM Some inaccuracy I acknowledge that this may not be correct. If you search MVC/MVMM, you will see lots of conflicting details. This portion of the slide is explained to make frontend-backend integration easier to explain. Examples of Technologies with the Architecture \u00b6 MVC - Django MVVM - Django + React MVC - Flask MVVM - Flask + React MVC - Express MVVM - Express + React Why is software architecture important? \u00b6 Architecture shows how an entire software works in a high-level. Important for: maintainability and extensibility seperation of concerns choosing different pieces of the stack Just some architecture diagrams How do frontend communicate with backend? \u00b6 Via HTTP Requests responds with: HTML, CSS, JS JSON/XML Server-side Rendering \u00b6 Via - HTML, CSS, JS Data Flow Client-side Rendering and AJAX \u00b6 Via HTTP Requests responds with: - blank HTML with JS (at first) - JSON/XML Data Flow CRUD to HTTP Verb Matching for JSON standard communications with REST-APIs Matches HTTP verbs with action AJAX \u2013 Asynchronous JavaScript and ~~XML~~ JSON JSON are strings JSON (JavaScript Object Notation) Note: JSONs are String... you have to serialise JSON to become an object Demo - React to integrate with Django \u00b6 This follows up the demo with React to consume a standard REST-API Django Todo App demonstrated in the previous workshop . Other Information \u00b6 Traversy Media MVC React Query Axios (a better Fetch?) Travery Media Async/Await JavaScript","title":"MVC-MVMM Architecture and Communications"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#mvc-mvmm-architecture-and-communications","text":"Separate the concerns with Design Patterns!","title":"MVC-MVMM Architecture and Communications"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#what-is-mvcmvvm-architecture","text":"MVC (Model-View-Controller) Model \u2013 data representation layer (how app communicates to db \u2013 Raw or ORM) View \u2013 interface representation (with HTML, CSS and JS) Controller \u2013 request relays (processes HTTP requests) MVC MVVM (Model-ViewModel-View) ViewModel \u2013 data-binding relays (processes the HTTP requests) MVVM Some inaccuracy I acknowledge that this may not be correct. If you search MVC/MVMM, you will see lots of conflicting details. This portion of the slide is explained to make frontend-backend integration easier to explain.","title":"What is MVC/MVVM Architecture?"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#why-is-software-architecture-important","text":"Architecture shows how an entire software works in a high-level. Important for: maintainability and extensibility seperation of concerns choosing different pieces of the stack Just some architecture diagrams","title":"Why is software architecture important?"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#how-do-frontend-communicate-with-backend","text":"Via HTTP Requests responds with: HTML, CSS, JS JSON/XML","title":"How do frontend communicate with backend?"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#demo-react-to-integrate-with-django","text":"This follows up the demo with React to consume a standard REST-API Django Todo App demonstrated in the previous workshop .","title":"Demo - React to integrate with Django"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#other-information","text":"Traversy Media MVC React Query Axios (a better Fetch?) Travery Media Async/Await JavaScript","title":"Other Information"},{"location":"2021-2022-summer/package-managers/","text":"Package Managers \u00b6 Unlock the power of open source What are package managers? \u00b6 Developer tools that allows access to libraries Examples JavaScript (NPM/Yarn) Python(Pip/Poetry) Diagram of the Package Manager Data Flow Modern Infrastructure Dependency Examples of Actual Libraries and their dependencies \u00b6 See this tool to visualise dependency. MUI Dependency Express Dependency Install Package Managers \u00b6 NPM Download | Node.js (nodejs.org) Yarn Installation | Yarn (yarnpkg.com) Pip Download Python | Python.org Poetry Poetry - Python dependency management and packaging made easy (python-poetry.org) Actual Examples of Real-World Projects and their dependencies \u00b6 Foodbank package.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 { \"name\" : \"foodbank\" , // (1) \"version\" : \"0.1.0\" , \"private\" : true , \"browserslist\" : [ \">0.3%\" , \"not ie 11\" , \"not dead\" , \"not op_mini all\" ], \"repository\" : { \"type\" : \"git\" , \"url\" : \"git+https://github.com/codersforcauses/foodbank.git\" }, \"author\" : \"Coders for Causes\" , \"license\" : \"MIT\" , \"bugs\" : { \"url\" : \"https://github.com/codersforcauses/foodbank/issues\" }, \"homepage\" : \"https://github.com/codersforcauses/foodbank#readme\" , \"scripts\" : { // (2) \"dev\" : \"next dev\" , \"build\" : \"next build\" , \"start\" : \"next start\" , \"lint\" : \"next lint\" , \"prepare\" : \"husky install\" }, \"dependencies\" : { // (3) \"@headlessui/react\" : \"1.4.2\" , \"critters\" : \"0.0.15\" , \"keen-slider\" : \"6.0.5\" , \"next\" : \"12.0.4\" , \"react\" : \"17.0.2\" , \"react-dom\" : \"17.0.2\" , \"react-hook-form\" : \"7.20.5\" }, \"devDependencies\" : { // (4) \"@types/react\" : \"17.0.37\" , \"autoprefixer\" : \"10.4.0\" , \"eslint\" : \"7.29.0\" , \"eslint-config-next\" : \"12.0.4\" , \"eslint-config-prettier\" : \"8.3.0\" , \"eslint-plugin-jsx-a11y\" : \"6.5.1\" , \"eslint-plugin-prettier\" : \"4.0.0\" , \"husky\" : \"7.0.4\" , \"postcss\" : \"8.4.4\" , \"prettier\" : \"2.5.0\" , \"tailwindcss\" : \"2.2.19\" , \"typescript\" : \"4.5.2\" } } Package Headers and Meta Information (line 2-20) Contains some meta information about the project. Eg. used for publication in npmjs.org Scripts Alias of commands to run using the modules in the dependency 1 yarn start // yarn [script-name] or 1 npm run start // npm run [script-name] Dependencies Libraries that are used in the project To add a dependency, run 1 yarn add formik // yarn add [library-name] or 1 npm install formik // npm install [library-name] Dev-Dependencies Libraries that are used in the project on development environments Typically: linters, and testers 1 yarn add -D prettier // yarn add -D [library-name] or 1 npm install -D prettier // npm install -D [library-name] Lockfiles \u00b6 It locks the dependencies and sub dependencies (dependency of dependency) of your application the last time it installed correctly. Files: - package-lock.json - Yarn-lock.json - Poetry.lock E.g. wais/yarn.lock at main \u00b7 codersforcauses/wais (github.com) When to install globally? \u00b6 Whenever installing package, it is recommended to install it for a specific project The only thing you should really install globally are CLI tools. Even then, you have npx 1 yarn global add [dependency] or 1 npm install \u2013g [dependency] Firebase CLI 1 npm install -g firebase-tools Demo - Material UI \u00b6 Create a react-app npx create-react-app mui-demo Move directory cd mui-demo Install react-spring yarn add @mui/material @mui/icons-material Start the app yarn start Show Bottom Navigation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import * as React from 'react' ; import BottomNavigation from '@mui/material/BottomNavigation' ; import BottomNavigationAction from '@mui/material/BottomNavigationAction' ; import FolderIcon from '@mui/icons-material/Folder' ; import RestoreIcon from '@mui/icons-material/Restore' ; import FavoriteIcon from '@mui/icons-material/Favorite' ; import LocationOnIcon from '@mui/icons-material/LocationOn' ; export default function LabelBottomNavigation () { const [ value , setValue ] = React . useState ( 'recents' ); const handleChange = ( event , newValue ) => { setValue ( newValue ); }; return ( < BottomNavigation sx = {{ width : 500 }} value = { value } onChange = { handleChange } > < BottomNavigationAction label = \"Recents\" value = \"recents\" icon = { < RestoreIcon /> } /> < BottomNavigationAction label = \"Favorites\" value = \"favorites\" icon = { < FavoriteIcon /> } /> < BottomNavigationAction label = \"Nearby\" value = \"nearby\" icon = { < LocationOnIcon /> } /> < BottomNavigationAction label = \"Folder\" value = \"folder\" icon = { < FolderIcon /> } /> < /BottomNavigation> ); }","title":"Package Managers"},{"location":"2021-2022-summer/package-managers/#package-managers","text":"Unlock the power of open source","title":"Package Managers"},{"location":"2021-2022-summer/package-managers/#what-are-package-managers","text":"Developer tools that allows access to libraries Examples JavaScript (NPM/Yarn) Python(Pip/Poetry) Diagram of the Package Manager Data Flow Modern Infrastructure Dependency","title":"What are package managers?"},{"location":"2021-2022-summer/package-managers/#install-package-managers","text":"NPM Download | Node.js (nodejs.org) Yarn Installation | Yarn (yarnpkg.com) Pip Download Python | Python.org Poetry Poetry - Python dependency management and packaging made easy (python-poetry.org)","title":"Install Package Managers"},{"location":"2021-2022-summer/package-managers/#lockfiles","text":"It locks the dependencies and sub dependencies (dependency of dependency) of your application the last time it installed correctly. Files: - package-lock.json - Yarn-lock.json - Poetry.lock E.g. wais/yarn.lock at main \u00b7 codersforcauses/wais (github.com)","title":"Lockfiles"},{"location":"2021-2022-summer/package-managers/#when-to-install-globally","text":"Whenever installing package, it is recommended to install it for a specific project The only thing you should really install globally are CLI tools. Even then, you have npx 1 yarn global add [dependency] or 1 npm install \u2013g [dependency] Firebase CLI 1 npm install -g firebase-tools","title":"When to install globally?"},{"location":"2021-2022-summer/package-managers/#demo-material-ui","text":"Create a react-app npx create-react-app mui-demo Move directory cd mui-demo Install react-spring yarn add @mui/material @mui/icons-material Start the app yarn start Show Bottom Navigation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import * as React from 'react' ; import BottomNavigation from '@mui/material/BottomNavigation' ; import BottomNavigationAction from '@mui/material/BottomNavigationAction' ; import FolderIcon from '@mui/icons-material/Folder' ; import RestoreIcon from '@mui/icons-material/Restore' ; import FavoriteIcon from '@mui/icons-material/Favorite' ; import LocationOnIcon from '@mui/icons-material/LocationOn' ; export default function LabelBottomNavigation () { const [ value , setValue ] = React . useState ( 'recents' ); const handleChange = ( event , newValue ) => { setValue ( newValue ); }; return ( < BottomNavigation sx = {{ width : 500 }} value = { value } onChange = { handleChange } > < BottomNavigationAction label = \"Recents\" value = \"recents\" icon = { < RestoreIcon /> } /> < BottomNavigationAction label = \"Favorites\" value = \"favorites\" icon = { < FavoriteIcon /> } /> < BottomNavigationAction label = \"Nearby\" value = \"nearby\" icon = { < LocationOnIcon /> } /> < BottomNavigationAction label = \"Folder\" value = \"folder\" icon = { < FolderIcon /> } /> < /BottomNavigation> ); }","title":"Demo - Material UI"},{"location":"2021-2022-summer/practical-software-engineering-practices/","text":"Practical Software Engineering Practices \u00b6 How software engineer works collaboratively! How do software engineers work? \u00b6 They use issue/ticket management system to track their work. Github Issues and Jira The examples are Github Issues and Jira. Listing of issues can be displayed in kanban boards . Kanban Boards Why do Software Engineers Work like this? \u00b6 Scrums One example of \"agile\" ways of working and it looks like this. What is Git? \u00b6 Git is a version control system tools for coordinating work for different changes Main Parts of Git \u00b6 Main Parts of git: Change Node (commit node) Branch Git Different Versions \u00b6 Software Versions Nodes - Representation of a change (commits + merge) Main/Master: - Branch usually as production or deployed Development Branch - Branch used for development Used for compiling features for a release Feature Branch - Branch used for development for a particular issue GitHub and Code Repositories \u00b6 GitHub - Place to hold code repositories Repositories - Place where codes are stored with different versions INTERACTIVE WORKSHOP TIME !!!! \u00b6 Do the following from codersforcauses/software-engineering-practices-demo : Demonstration of software engineering practices (github.com): Look at the GitHub issues Assign yourself an issue Clone repo with git clone https://github.com/codersforcauses/software-engineering-practices-demo-2021-summer.git Create a branch with the following format s{Issue Number}-{Issue Name}. git checkout -b s{Issue Number}-{Issue Name} Create the change to satisfy or complete the github issue Commit (package) the change git commit -m \"{insert message here}\" and push git push. Create a pull request and request for a reviewer from CFC peeps Other Resources \u00b6 Git and Github","title":"Practical Software Engineering Practices"},{"location":"2021-2022-summer/practical-software-engineering-practices/#practical-software-engineering-practices","text":"How software engineer works collaboratively!","title":"Practical Software Engineering Practices"},{"location":"2021-2022-summer/practical-software-engineering-practices/#how-do-software-engineers-work","text":"They use issue/ticket management system to track their work. Github Issues and Jira The examples are Github Issues and Jira. Listing of issues can be displayed in kanban boards . Kanban Boards","title":"How do software engineers work?"},{"location":"2021-2022-summer/practical-software-engineering-practices/#why-do-software-engineers-work-like-this","text":"Scrums One example of \"agile\" ways of working and it looks like this.","title":"Why do Software Engineers Work like this?"},{"location":"2021-2022-summer/practical-software-engineering-practices/#what-is-git","text":"Git is a version control system tools for coordinating work for different changes","title":"What is Git?"},{"location":"2021-2022-summer/practical-software-engineering-practices/#github-and-code-repositories","text":"GitHub - Place to hold code repositories Repositories - Place where codes are stored with different versions","title":"GitHub and Code Repositories"},{"location":"2021-2022-summer/practical-software-engineering-practices/#interactive-workshop-time","text":"Do the following from codersforcauses/software-engineering-practices-demo : Demonstration of software engineering practices (github.com): Look at the GitHub issues Assign yourself an issue Clone repo with git clone https://github.com/codersforcauses/software-engineering-practices-demo-2021-summer.git Create a branch with the following format s{Issue Number}-{Issue Name}. git checkout -b s{Issue Number}-{Issue Name} Create the change to satisfy or complete the github issue Commit (package) the change git commit -m \"{insert message here}\" and push git push. Create a pull request and request for a reviewer from CFC peeps","title":"INTERACTIVE WORKSHOP TIME !!!!"},{"location":"2021-2022-summer/practical-software-engineering-practices/#other-resources","text":"Git and Github","title":"Other Resources"},{"location":"2021-2022-summer/project-and-workshop-structure/","text":"Project and Workshop Structure \u00b6 A mission to empower the next-generation of software engineers and delivering value to the community! Ways of Working \u00b6 (November 27 to February 24 excluding December 19 to January 4) = ~ 11 weeks for project 2 meetups every week (1 online mid-week, 1 on Saturday) Each Saturday meeting will have ~2-3 hour workshops. Some workshops will take the whole hour, while some workshops will take 15-30 minutes. The other time allocated is for working on project with supervision Most workshops will be introductory Workshop Schedule \u00b6 The following are rough guideline to the workshop schedules. All workshops are optional, you can attend any of them even if you are not on the specific team dedicated to it (be mindful that there may be time conflicts if it is with the other team). Most Workshops are introductory They will usually cover the following idea: why is it useful to learn it what are the different aspects of it that you will need to learn You will still have to put in the effort to learn it thoroughly. Date Workshop Name Recommended Team to attend Duration Saturday, 27 November 2021 Introduction to CFC + Web Development Space All ~1 hour Wednesday, 1 December 2021 Introduction to Web Basics All ~1-1.5 hour Saturday, 4 December 2021 Practical Software Engineering Practices All ~1 hour Saturday, 4 December 2021 Introduction to Frontend Frameworks All ~45 minutes - 1 hour Saturday, 4 December 2021 Introduction to React Foodbank ~45 minutes - 1 hour Saturday, 4 December 2021 Introduction to Vue WAIS ~45 minutes - 1 hour Saturday, 11 December 2021 Introduction to Django WAIS ~1 - 1.5 hours Saturday, 11 December 2021 Introduction to Typescript Foodbank ~30 minutes Saturday, 18 December 2021 MVC Codebase Structure / Frontend-Backend Integration All ~1-1.5 hour Saturday, 18 December 2021 Typical Codebase Structure All ~30 minutes - 1 hour Saturday, 18 December 2021 Package Manager - JavaScript and Python All ~1 hour Saturday, 8 January 2022 Introduction to Docker All ~1 hour Saturday, 8 January 2022 Introduction to Unit Testing and CI/CD All ~1 hour Workshops after January 8, 2022 The workshops right here are still being decided upon. If you have an idea for a workshop that you would like to attend, please let us know either on Discord or at Github . The one that are on consideration are: Deployment on Heroku, and Vercel Introduction to End-to-End Testing with Cypress Gitkraken Workshop Introduction to Prototyping with Figma Introduction to Linux and Command-Line Scripting - Bash Increase your productivity in VsCode How to write good documentation Honing your detective skills with Browser Developer Tools Who are you? \u00b6 Before continuing further, answer the following: What\u2019s your name? What\u2019s your background? Why you\u2019re here? Who are the Coders for Causes The Coders for Causes is an organisation that aims to empower the next-generation of software engineers while delivering value to the wider-community by helping charities and not-for-profit organisations.","title":"Project and Workshop Structure"},{"location":"2021-2022-summer/project-and-workshop-structure/#project-and-workshop-structure","text":"A mission to empower the next-generation of software engineers and delivering value to the community!","title":"Project and Workshop Structure"},{"location":"2021-2022-summer/project-and-workshop-structure/#ways-of-working","text":"(November 27 to February 24 excluding December 19 to January 4) = ~ 11 weeks for project 2 meetups every week (1 online mid-week, 1 on Saturday) Each Saturday meeting will have ~2-3 hour workshops. Some workshops will take the whole hour, while some workshops will take 15-30 minutes. The other time allocated is for working on project with supervision Most workshops will be introductory","title":"Ways of Working"},{"location":"2021-2022-summer/project-and-workshop-structure/#workshop-schedule","text":"The following are rough guideline to the workshop schedules. All workshops are optional, you can attend any of them even if you are not on the specific team dedicated to it (be mindful that there may be time conflicts if it is with the other team). Most Workshops are introductory They will usually cover the following idea: why is it useful to learn it what are the different aspects of it that you will need to learn You will still have to put in the effort to learn it thoroughly. Date Workshop Name Recommended Team to attend Duration Saturday, 27 November 2021 Introduction to CFC + Web Development Space All ~1 hour Wednesday, 1 December 2021 Introduction to Web Basics All ~1-1.5 hour Saturday, 4 December 2021 Practical Software Engineering Practices All ~1 hour Saturday, 4 December 2021 Introduction to Frontend Frameworks All ~45 minutes - 1 hour Saturday, 4 December 2021 Introduction to React Foodbank ~45 minutes - 1 hour Saturday, 4 December 2021 Introduction to Vue WAIS ~45 minutes - 1 hour Saturday, 11 December 2021 Introduction to Django WAIS ~1 - 1.5 hours Saturday, 11 December 2021 Introduction to Typescript Foodbank ~30 minutes Saturday, 18 December 2021 MVC Codebase Structure / Frontend-Backend Integration All ~1-1.5 hour Saturday, 18 December 2021 Typical Codebase Structure All ~30 minutes - 1 hour Saturday, 18 December 2021 Package Manager - JavaScript and Python All ~1 hour Saturday, 8 January 2022 Introduction to Docker All ~1 hour Saturday, 8 January 2022 Introduction to Unit Testing and CI/CD All ~1 hour Workshops after January 8, 2022 The workshops right here are still being decided upon. If you have an idea for a workshop that you would like to attend, please let us know either on Discord or at Github . The one that are on consideration are: Deployment on Heroku, and Vercel Introduction to End-to-End Testing with Cypress Gitkraken Workshop Introduction to Prototyping with Figma Introduction to Linux and Command-Line Scripting - Bash Increase your productivity in VsCode How to write good documentation Honing your detective skills with Browser Developer Tools","title":"Workshop Schedule"},{"location":"2021-2022-summer/project-and-workshop-structure/#who-are-you","text":"Before continuing further, answer the following: What\u2019s your name? What\u2019s your background? Why you\u2019re here? Who are the Coders for Causes The Coders for Causes is an organisation that aims to empower the next-generation of software engineers while delivering value to the wider-community by helping charities and not-for-profit organisations.","title":"Who are you?"},{"location":"2021-2022-summer/setup/","text":"Setup \u00b6 This contains everything you need to know about getting setup. Coders for Causes Project Team \u00b6 The following access you will need to have when working on the project Coders for Causes Official Project Organisation This includes the project repositories and CFC related long-term materials Coders for Causes Learning Organisation This includes the templates for learning as well as the demo workshops Discord Channel for Project and exclusive Workshops Developer Tools \u00b6 These are the following tools that you need: Code Editor: VS Code Version Control: Git Interpreter: Nodejs Custom Package Manager: Yarn Interpreter (for WAIS): Python Containerisation (for WAIS): Docker Optional Tools These are tools that you may like to use, but are not required: GUI for Git: Gitkraken / GitHub Desktop After these installation, seek at the OS-specific tools. Windows \u00b6 These are tools specifically for Windows: Virtual Machine: Vbox You need this if you have some trouble with windows Warning for Windows Users Legit, among all the OS, you will have the most frustrating time as a developer in windows (unless you're doing C#) Wanna have a better developer experience You have a couple of options: Using WSL Dual Booting Virtual Machines The recommended OS to try is Ubuntu-based Linux. My personal favourite is PopOS. Linux \u00b6 These are installation specific to Linux: Docker Post Installation Steps Lots of users forget this documentation This step is necessary if you intend to use the visual studio code docker extension This will also allow you to run docker without the \"sudo\" command Docker Compose Installation Docker compose is not installed by default with Linux installations of Docker Please follow this documentation Node installation using Node Version Manager (NVM) Installation steps can be found here NVM is useful when dealing with multiple environments that require different versions of Node It allows you to switch between different Node versions and environments easily This tool is also available if you are using Windows Subsystem for Linux","title":"Setup"},{"location":"2021-2022-summer/setup/#setup","text":"This contains everything you need to know about getting setup.","title":"Setup"},{"location":"2021-2022-summer/setup/#coders-for-causes-project-team","text":"The following access you will need to have when working on the project Coders for Causes Official Project Organisation This includes the project repositories and CFC related long-term materials Coders for Causes Learning Organisation This includes the templates for learning as well as the demo workshops Discord Channel for Project and exclusive Workshops","title":"Coders for Causes Project Team"},{"location":"2021-2022-summer/setup/#developer-tools","text":"These are the following tools that you need: Code Editor: VS Code Version Control: Git Interpreter: Nodejs Custom Package Manager: Yarn Interpreter (for WAIS): Python Containerisation (for WAIS): Docker Optional Tools These are tools that you may like to use, but are not required: GUI for Git: Gitkraken / GitHub Desktop After these installation, seek at the OS-specific tools.","title":"Developer Tools"},{"location":"2021-2022-summer/typical-codebase-structure/","text":"Typical Codebase Structure \u00b6 Codebase Jigsaw: How it all fits together! Info This presentation is only intended to be a brief overview of the typical codebase structure If you want more information about anything mentioned feel free to reach out to CFC committee and project helpers! Overview and Importance \u00b6 Most codebase will follow almost the same pattern (if they change, it will only change with little quirks) Structure helps every software engineer understand codebase and where to put it certain codes (better code readability = better collaboration = better profit!) Profit Frontend \u00b6 Example: About Us - Coders for Causes Website Different Folders and Purpose \u00b6 Components \u00b6 Components are individual parts/pieces of user interfaces Pages \u00b6 Pages are the direct components that are related specific to a route or URL Public / Assets \u00b6 Assets are usually elements that are referenced E.g. Images, Videos Utilities / Helpers \u00b6 Pieces of code that are used as utilities or helpers to other codes Tests \u00b6 Scripts that tests that code works Usually E2E frontend Comparison with Two Codebases \u00b6 Slight difference, look at software documentation or ask other engineers Backend \u00b6 Context - Role and Subject In these example, when I mean \"role\", I mean the general role of file. \"subject\" means the feature or group functionality Method of Organisation \u00b6 Subject-Oriented Driven Structure \u00b6 As it can be seen here, both different folders will have the same filenames based on its role . App grows, those files can itself become folders as well. Example: erdem/DRF-TDD-example: An example Django REST framework project for test driven development. (github.com) Role-Oriented Driven Structure \u00b6 As it can be seen here, both both different folders will have the same filenames based on its subject Example: our-lab-training/olt-backend: Our Lab Training - Feathers Backend (github.com) Different Folders and Purpose \u00b6 Models / Database Connection \u00b6 Object-Relational Model (ORM). Links the database into your app into objects Routing \u00b6 Determines the rules for the URL pattern Views \u00b6 In REST API, Views are your main \u201cview\u201d of the API Tests \u00b6 Contains unit testing (+ possibly e2e testing) Most common candidate for transitioning from file to a folder containing more files Other Resources \u00b6 Writing your first Django app, part 1 | Django documentation | Django (djangoproject.com) File Structure \u2013 React (reactjs.org) Best practice for Django project working directory structure - Stack Overflow","title":"Typical Codebase Structure"},{"location":"2021-2022-summer/typical-codebase-structure/#typical-codebase-structure","text":"Codebase Jigsaw: How it all fits together! Info This presentation is only intended to be a brief overview of the typical codebase structure If you want more information about anything mentioned feel free to reach out to CFC committee and project helpers!","title":"Typical Codebase Structure"},{"location":"2021-2022-summer/typical-codebase-structure/#overview-and-importance","text":"Most codebase will follow almost the same pattern (if they change, it will only change with little quirks) Structure helps every software engineer understand codebase and where to put it certain codes (better code readability = better collaboration = better profit!) Profit","title":"Overview and Importance"},{"location":"2021-2022-summer/typical-codebase-structure/#frontend","text":"Example: About Us - Coders for Causes Website","title":"Frontend"},{"location":"2021-2022-summer/typical-codebase-structure/#backend","text":"Context - Role and Subject In these example, when I mean \"role\", I mean the general role of file. \"subject\" means the feature or group functionality","title":"Backend"},{"location":"2021-2022-summer/typical-codebase-structure/#other-resources","text":"Writing your first Django app, part 1 | Django documentation | Django (djangoproject.com) File Structure \u2013 React (reactjs.org) Best practice for Django project working directory structure - Stack Overflow","title":"Other Resources"},{"location":"2021-winter/","text":"Coders for Causes 2021 Winter Workshops \u00b6 This project period there are two main projects: Foodbank WAIS If you have not before seen the existing progress, see this video . These two projects have their own corresponding technology stacks being used, hence will dictate the workshops that will be held. Project Technology \u00b6 Foodbank \u00b6 Foodbank is mainly with frontend with React + TailwindCSS with Firebase and Notion CMS. WAIS \u00b6 WAIS is a full-stack application with Vue and Django. It uses Docker containerisation for both development (and production in the future). Where are the materials? \u00b6 This website has only been created prior to 2021/22 Summer workshops. However, you can find the videos in our Youtube channel , and workshops slides in google drive .","title":"Overview"},{"location":"2021-winter/#coders-for-causes-2021-winter-workshops","text":"This project period there are two main projects: Foodbank WAIS If you have not before seen the existing progress, see this video . These two projects have their own corresponding technology stacks being used, hence will dictate the workshops that will be held.","title":"Coders for Causes 2021 Winter Workshops"},{"location":"2021-winter/#project-technology","text":"","title":"Project Technology"},{"location":"2021-winter/#where-are-the-materials","text":"This website has only been created prior to 2021/22 Summer workshops. However, you can find the videos in our Youtube channel , and workshops slides in google drive .","title":"Where are the materials?"},{"location":"2022-2023-summer/","text":"Coders for Causes 2021/22 Summer Workshops \u00b6 This project period continues the two main projects from the winter of 2020 : WADL POOPS If you have not before seen the existing progress, see this video . These two projects have their own corresponding technology stacks being used, hence will dictate the workshops that will be held. Project Technology \u00b6 POOPS \u00b6 POOPS is a web-app built the frontend with React + NextJS + TypeScript + TailwindCSS with Firebase and Notion CMS. WADL \u00b6 WADL is a full-stack application with Vue and Firebase. It uses Docker containerisation for both development (and production in the future). Workshop Recordings \u00b6 The workshop recordings will be held on our youtube channel .","title":"Overview"},{"location":"2022-2023-summer/#coders-for-causes-202122-summer-workshops","text":"This project period continues the two main projects from the winter of 2020 : WADL POOPS If you have not before seen the existing progress, see this video . These two projects have their own corresponding technology stacks being used, hence will dictate the workshops that will be held.","title":"Coders for Causes 2021/22 Summer Workshops"},{"location":"2022-2023-summer/#project-technology","text":"","title":"Project Technology"},{"location":"2022-2023-summer/#workshop-recordings","text":"The workshop recordings will be held on our youtube channel .","title":"Workshop Recordings"},{"location":"2022-2023-summer/introduction-to-web-development/","text":"Introduction to Web Development Space \u00b6 Navigating the Deep Dark Space of Web Development This workshop covers a brief overview of the most common tools and technologies used in web development. Content \u00b6 Introduction to Web Development Space Content What and Why Web Development? What is web development? Why Web Development ? FAQs about Web Development Why code websites, why not use drag and drops like Wordpress, WIX? What is the best way to learn all these? Why does CFC not do mobile development as much as web development? If I already know a frontend framework, is it better to learn another frontend framework or to learn a backend framework? Basics of Web and Limitation Modern Frameworks Server-side Applications (Backend) How do devices communicate? What do server applications do? Databases Others Languages of the Web (the usual) Hosting Stuff CSS Frameworks Developer Tools TypeScript Testing Continuous Integration / Continuous Deployment Virtualisation and Containerisation Browsers Firefox Developer Tools Package Managers Version Control Linters and Formatters Teamwork Roadmaps Word of Encouragement What and Why Web Development? \u00b6 What is web development? \u00b6 Websites development Web applications (client-side and server-side) development Why Web Development ? \u00b6 Accessibility and Portability Career and On-demand in job market Huge possibility to combine with other emerging technologies (e.g. IoT, Machine Learning) and industry (e.g. Health, Mining, O&G) Career in Web Development Source: Insights from Stack Overflow\u2019s 2016 survey of 50,000 developers \"Half of Developers are Web Developers\" FAQs about Web Development \u00b6 Why code websites, why not use drag and drops like Wordpress, WIX? \u00b6 Content Management System (CMS) Limitations on theme/template used Difficult to extend Cybersecurity More information CMS are one of the application of web development, but there are plenty more such as - internet of things, custom software for a particular industrial application (eg. using Machine Learning) CMS are usually limited to the template or plugin that you use. If those plugin don't exist, then it limits your productivity very much (difficulty to extend). CMS are usually built to cater for non-technical users. This means that thye become the subject of hackers. Think about a scenario where a hacker was able to find a vulnerability in WordPress, now every other WordPress site will be vulnerable. What is the best way to learn all these? \u00b6 In summary, the best way to learn: Do personal projects (inspiration + motivation) Do team projects (get peer reviews and correct bad practices straight away) Watch Online Courses (to figure out what is available) More Information To be told that you have to learn \"this, this, and that\" before you could do things is tiresome. Often times, we want to learn to be a developer so that we can create cool things like software where thousands of people can use the app. We don't tend to be a developer for the sake of us needing to watch endless videos on different things. Why does CFC not do mobile development as much as web development? \u00b6 App stores has a developer cost Easier to deal/teach web technologies Accessibility (mobile, sensors, tablets, laptops and PCs) Bigger open-source community If I already know a frontend framework, is it better to learn another frontend framework or to learn a backend framework? \u00b6 It is better to learn a backend framework Reasoning You want to build skills that complement one another rather than be an alternative. It is much more valuable for you to learn a backend framework because that helps you build a functional app. Basics of Web and Limitation \u00b6 HTML What is it? Hypertext Markup Language Describes the structure of a web page Limitation Doesn\u2019t handle repeated content well No variables or calculation HTML Syntax 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > Hello World! </ body > </ html > CSS What is it? Cascading Style Sheets Describes the presentation of a web page Limitation Most css is quite similar (Handled by CSS Libraries) Not very dynamic (Handled by CSS Frameworks) CSS Syntax 1 2 3 4 5 6 7 8 9 body { background-color : #f0f0f0 ; font-family : sans-serif ; } . container { width : 80 % ; margin : 0 auto ; } JS What is it? JavaScript Used to program complex features on a web page Limitation Has the capability to modify the user interface, but becomes really tedious to modify interface (more about this in another workshop) JS Syntax 1 2 3 4 5 6 7 const bodySelector = document . querySelector ( 'body' ); const myFunction = () => { bodySelector . innerHTML = 'Hello World 2!' ; // Add a container class to space out bodySelector . classList . add ( 'container' ); } bodySelector . onclick = myFunction ; Modern Frameworks \u00b6 Websites can be much more\u2026 they can be web applications \u201cApp\u201d in a website (client-side rendering) Modern Frameworks React.js More mature and used more in industry Vue.js Growing fast in popularity and use. General Information Both are good to use and learn. Knowledge is transferable between the two frameworks. Comparison between HTML and JSX Highlighted portions are starting chunk of distinct code. HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 < div class = \"row\" > < div class = \"m-0 col-12 col-md-6 col-lg-3\" > < div class = \"text-center border-0 bg-transparent card\" > < div class = \"px-0 card-body\" > < i class = \"material-icons-sharp md-lg\" > devices </ i > < p class = \"mt-4 font-weight-bold text-monospace text-larger\" > Applications </ p > < p class = \"mb-0\" > Build custom web and mobile applications to engage with your audience </ p > </ div > </ div > </ div > < div class = \"m-0 col-12 col-md-6 col-lg-3\" > < div class = \"text-center border-0 bg-transparent card\" > < div class = \"px-0 card-body\" > < i class = \"material-icons-sharp md-lg\" > web </ i > < p class = \"mt-4 font-weight-bold text-monospace text-larger\" > Websites </ p > < p class = \"mb-0\" > Build new websites or optimise existing pages to improve online visibility </ p > </ div > </ div > </ div > < div class = \"m-0 col-12 col-md-6 col-lg-3\" > < div class = \"text-center border-0 bg-transparent card\" > < div class = \"px-0 card-body\" > < i class = \"material-icons-sharp md-lg\" > storage </ i > < p class = \"mt-4 font-weight-bold text-monospace text-larger\" > Data Storage </ p > < p class = \"mb-0\" > Design and create databases for efficient information storage and retrieval </ p > </ div > </ div > </ div > < div class = \"m-0 col-12 col-md-6 col-lg-3\" > < div class = \"text-center border-0 bg-transparent card\" > < div class = \"px-0 card-body\" > < i class = \"material-icons-sharp md-lg\" > how_to_reg </ i > < p class = \"mt-4 font-weight-bold text-monospace text-larger\" > Consulting </ p > < p class = \"mb-0\" > Empower your organisation through technical knowledge and advice </ p > </ div > </ div > </ div > </ div > JSX 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import { memo } from 'react' import { Row , Col , Card , CardBody } from 'reactstrap' import services from 'data/services.json' const Service = ( props : { icon : string title : string description : string }) => ( < Card className = 'text-center border-0 bg-transparent' > < CardBody className = 'px-0' > < i className = 'material-icons-sharp md-lg' > { props . icon } < /i> < p className = 'mt-4 font-weight-bold text-monospace text-larger' > { props . title } < /p> < p className = 'mb-0' > { props . description } < /p> < /CardBody> < /Card> ) const Services = () => ( < Row > { services . map ( service => ( < Col xs = { 12 } md = { 6 } lg = { 12 / services . length } className = 'm-0' key = { service . title } > < Service {... service } /> < /Col> ))} < /Row> ) export default memo ( Services ) Server-side Applications (Backend) \u00b6 How do devices communicate? \u00b6 HTTP Request - Hypertext Transfer Protocol What do server applications do? \u00b6 Serve frontends (server-side rendering) Web API (Application Programming Interface) Serve data (usually from a database) Process Request (Sending emails or SMS, Machine Learning) Databases \u00b6 Place to store the data Mongodb Allows for database design to be modified without complex migration or data loss SQL Typically faster and better for large amounts of data or systems that need data consistency and reliability Others \u00b6 Languages of the Web (the usual) \u00b6 Python (Django, Flask) JavaScript (Node.js, Express) Ruby, Go, Rust, C Hosting Stuff \u00b6 Many ways - Own a server - Use a 3 rd party platform CSS Frameworks \u00b6 Frontend (JS) Vue, React Nuxt.js, Next.js Frontend (CSS) MaterialUI, Vuetify Bootstrap Developer Tools \u00b6 TypeScript \u00b6 Type checking is super useful for complex apps Allows for way better javascript developer tooling Can be annoying if you\u2019re new at it Testing \u00b6 Selenium, Cypress End to end automated testing tools Jest, Mocha, Pytest Unit testing Testing is vital to software projects Continuous Integration / Continuous Deployment \u00b6 Automated Testing Event-driven scripts E.g. Github Action, Bitbucket Pipelines Virtualisation and Containerisation \u00b6 Allows execution of services in a virtual environment eg. Docker (Containerisation), Vagrant (Virtualisation) Browsers \u00b6 Standard browsers Google Chrome, Firefox, Edge, etc. Backwards compatibility Internet Explorer Other Mobile - Responsive Screen readers - Accessibility Firefox Developer Tools \u00b6 Page Inspector Visualise page aspects Grid layout Web Console console.log(\u201cHello World\u201d) Responsive Design Mode View from POV of different screen sizes such as mobile, tablets, etc. Some more tools JavaScript Debugger Network Monitor Performance Tools Rulers Colour Pickers Learn more at: https://developer.mozilla.org/en-US/docs/Tools Package Managers \u00b6 Installs libraries that can be used Also has code shortcuts (e.g. npm run start) (More about package.json and poetry.toml in the projects and Package Manager Workshop) Version Control \u00b6 Essential for developer teams and complex software development Git Linters and Formatters \u00b6 Makes code formatting consistent (following standard) Useful with version controls to avoid pointless change eg.ESLint, Prettier Teamwork \u00b6 Many tools out there Used to stop teams from stepping on each others toes Github Issues + Pull Requests Roadmaps \u00b6 There's an open-source community that maintains a learning roadmap for developers. See https://roadmap.sh/ Frontend Developer Backend Developer Dev-Ops Word of Encouragement \u00b6 Encouragement from the Tech Lead \"I can admit that this journey of learning will be difficult, and can sometimes be overwhelming and demotivating. Please, if at any point of this project, you feel that you don't know enough, or you're feeling lost, please reach out! We are all in this journey together! Nobody is born talented, skills are honed with determination and willingness to learn.\" \"When I was a first year student entering on the CFC winter project, I didn't feel like I was good enough. I couldn't create a good looking interface, I didn't know how to use npm and all sorts of those things. I was just like many of you! if I gave up just because of all those things I didn't know, of all those self-doubts, then I wouldn't be here today. I admit that I was lucky because I was in CFC, I had connections where I can just ask questions instead of feeling lost of not knowing. So please do leverage that opportunity to reach out\" \"You being in this project not only gives you the opportunity to raise your talents, but you also unlock one of the biggest factor of the growth of your career, and that is the connections with your fellow software engineers.\"","title":"Introduction to Web Development"},{"location":"2022-2023-summer/introduction-to-web-development/#introduction-to-web-development-space","text":"Navigating the Deep Dark Space of Web Development This workshop covers a brief overview of the most common tools and technologies used in web development.","title":"Introduction to Web Development Space"},{"location":"2022-2023-summer/introduction-to-web-development/#content","text":"Introduction to Web Development Space Content What and Why Web Development? What is web development? Why Web Development ? FAQs about Web Development Why code websites, why not use drag and drops like Wordpress, WIX? What is the best way to learn all these? Why does CFC not do mobile development as much as web development? If I already know a frontend framework, is it better to learn another frontend framework or to learn a backend framework? Basics of Web and Limitation Modern Frameworks Server-side Applications (Backend) How do devices communicate? What do server applications do? Databases Others Languages of the Web (the usual) Hosting Stuff CSS Frameworks Developer Tools TypeScript Testing Continuous Integration / Continuous Deployment Virtualisation and Containerisation Browsers Firefox Developer Tools Package Managers Version Control Linters and Formatters Teamwork Roadmaps Word of Encouragement","title":"Content"},{"location":"2022-2023-summer/introduction-to-web-development/#what-and-why-web-development","text":"","title":"What and Why Web Development?"},{"location":"2022-2023-summer/introduction-to-web-development/#faqs-about-web-development","text":"","title":"FAQs about Web Development"},{"location":"2022-2023-summer/introduction-to-web-development/#basics-of-web-and-limitation","text":"HTML What is it? Hypertext Markup Language Describes the structure of a web page Limitation Doesn\u2019t handle repeated content well No variables or calculation HTML Syntax 1 2 3 4 5 6 7 8 9 10 11 12 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > Hello World! </ body > </ html > CSS What is it? Cascading Style Sheets Describes the presentation of a web page Limitation Most css is quite similar (Handled by CSS Libraries) Not very dynamic (Handled by CSS Frameworks) CSS Syntax 1 2 3 4 5 6 7 8 9 body { background-color : #f0f0f0 ; font-family : sans-serif ; } . container { width : 80 % ; margin : 0 auto ; } JS What is it? JavaScript Used to program complex features on a web page Limitation Has the capability to modify the user interface, but becomes really tedious to modify interface (more about this in another workshop) JS Syntax 1 2 3 4 5 6 7 const bodySelector = document . querySelector ( 'body' ); const myFunction = () => { bodySelector . innerHTML = 'Hello World 2!' ; // Add a container class to space out bodySelector . classList . add ( 'container' ); } bodySelector . onclick = myFunction ;","title":"Basics of Web and Limitation"},{"location":"2022-2023-summer/introduction-to-web-development/#server-side-applications-backend","text":"","title":"Server-side Applications (Backend)"},{"location":"2022-2023-summer/introduction-to-web-development/#others","text":"","title":"Others"},{"location":"2022-2023-summer/introduction-to-web-development/#word-of-encouragement","text":"Encouragement from the Tech Lead \"I can admit that this journey of learning will be difficult, and can sometimes be overwhelming and demotivating. Please, if at any point of this project, you feel that you don't know enough, or you're feeling lost, please reach out! We are all in this journey together! Nobody is born talented, skills are honed with determination and willingness to learn.\" \"When I was a first year student entering on the CFC winter project, I didn't feel like I was good enough. I couldn't create a good looking interface, I didn't know how to use npm and all sorts of those things. I was just like many of you! if I gave up just because of all those things I didn't know, of all those self-doubts, then I wouldn't be here today. I admit that I was lucky because I was in CFC, I had connections where I can just ask questions instead of feeling lost of not knowing. So please do leverage that opportunity to reach out\" \"You being in this project not only gives you the opportunity to raise your talents, but you also unlock one of the biggest factor of the growth of your career, and that is the connections with your fellow software engineers.\"","title":"Word of Encouragement"},{"location":"2022-2023-summer/practical-software-engineering-workflow/","text":"How software engineer GSD ! How do software engineers work? \u00b6 They use issue/ticket management system to track their work. Github Issues and Jira The examples are Github Issues and Jira. Listing of issues can be displayed in kanban boards . Kanban Boards Why do Software Engineers Work like this? \u00b6 Scrums One example of \"agile\" ways of working and it looks like this. What is Git? \u00b6 Git is a version control system tools for coordinating work for different changes Main Parts of Git \u00b6 Main Parts of git: Change Node (commit node) Branch Git Different Versions \u00b6 Software Versions Nodes - Representation of a change (commits + merge) Main/Master: - Branch usually as production or deployed Development Branch - Branch used for development Used for compiling features for a release Feature Branch - Branch used for development for a particular issue GitHub and Code Repositories \u00b6 GitHub - Place to hold code repositories Repositories - Place where codes are stored with different versions INTERACTIVE WORKSHOP TIME !!!! \u00b6 Do the following from codersforcauses/software-engineering-practices-demo : Demonstration of software engineering practices (github.com): Look at the GitHub issues Assign yourself an issue Clone repo with git clone https://github.com/codersforcauses/software-engineering-practices-demo-2021-summer.git Create a branch with the following format s{Issue Number}-{Issue Name}. git checkout -b s{Issue Number}-{Issue Name} Create the change to satisfy or complete the github issue Commit (package) the change git commit -m \"{insert message here}\" and push git push. Create a pull request and request for a reviewer from CFC peeps Other Resources \u00b6 Git and Github","title":"Practical Software Engineering Workflow"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#how-do-software-engineers-work","text":"They use issue/ticket management system to track their work. Github Issues and Jira The examples are Github Issues and Jira. Listing of issues can be displayed in kanban boards . Kanban Boards","title":"How do software engineers work?"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#why-do-software-engineers-work-like-this","text":"Scrums One example of \"agile\" ways of working and it looks like this.","title":"Why do Software Engineers Work like this?"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#what-is-git","text":"Git is a version control system tools for coordinating work for different changes","title":"What is Git?"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#github-and-code-repositories","text":"GitHub - Place to hold code repositories Repositories - Place where codes are stored with different versions","title":"GitHub and Code Repositories"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#interactive-workshop-time","text":"Do the following from codersforcauses/software-engineering-practices-demo : Demonstration of software engineering practices (github.com): Look at the GitHub issues Assign yourself an issue Clone repo with git clone https://github.com/codersforcauses/software-engineering-practices-demo-2021-summer.git Create a branch with the following format s{Issue Number}-{Issue Name}. git checkout -b s{Issue Number}-{Issue Name} Create the change to satisfy or complete the github issue Commit (package) the change git commit -m \"{insert message here}\" and push git push. Create a pull request and request for a reviewer from CFC peeps","title":"INTERACTIVE WORKSHOP TIME !!!!"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#other-resources","text":"Git and Github","title":"Other Resources"}]}