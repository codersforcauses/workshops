{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Coders for Causes Workshops","text":"<p>This is where you can see all the materials for workshops that are presented to the volunteers of the project for each year.</p> <p>If you would to know more about us, please visit our website at codersforcauses.org</p>"},{"location":"contributions/","title":"Contributions","text":"<p>Hi! We are happy that you thought of contributing! If you have any suggestions or issues, please raise it here. I would be happy if you could provide pull requests, if you know how to do it here.</p>"},{"location":"contributions/#structure","title":"Structure","text":""},{"location":"contributions/#folder-structure","title":"Folder Structure","text":"<p>The structure of this repo is as follows:</p> <pre><code>\u251c\u2500\u2500 docs                    // Folders for documentation\n\u2502   \u251c\u2500\u2500 CNAME\n\u2502   \u251c\u2500\u2500 contributions.md\n\u2502   \u251c\u2500\u2500 deployment_and_automated_site_deployment.md\n\u2502   \u251c\u2500\u2500 flavoured_markdown.md\n\u2502   \u251c\u2500\u2500 images              // Assets\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2502   \n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 writing_markdown.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 mkdocs.yml              // MkDocs Configuration\n\u251c\u2500\u2500 overrides\n\u2502   \u2514\u2500\u2500 partials\n\u2502       \u2514\u2500\u2500 footer.html\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 requirements.txt\n</code></pre>"},{"location":"contributions/#installation","title":"Installation","text":""},{"location":"contributions/#python","title":"Python","text":"Prerequisite <p>You need to have Python installed to be able to use <code>pip</code>. There are a few ways of installing Python. You can use a package distributor like Anaconda Or you can just install Python.</p> <p>Once you have installed Python, install mkdocs requirements by opening a terminal and typing:</p> <pre><code>pip install -r requirements.txt\n</code></pre> Python Environments (Optional) <p>however, it is good practice to use different environments for different purposes, in which case, for Anaconda, you would open a terminal and type:</p> <p><pre><code>conda create -n mkdocstutorial python\nconda activate mkdocstutorial\n</code></pre> then enter:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"contributions/#docker","title":"Docker","text":"<p>Just run <code>docker-compose up</code>, it should show the web server running at localhost:8000</p>"},{"location":"contributions/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server. Very helpful when you want to take a look at the docs before deploying.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - Deploy in github pages</li> </ul>"},{"location":"contributions/#web-documentation-configuration","title":"Web Documentation Configuration","text":"<p>For full documentation visit:</p> <ul> <li>mkdocs.org for the generic MkDocs</li> <li>PyMdown Extensions for the different extensions that are installed</li> <li>MkDocs Material for the customisation of the web server documentation.</li> </ul>"},{"location":"2021-2022-summer/","title":"Coders for Causes 2021/22 Summer Workshops","text":"<p>This project period continues the two main projects from the winter of 2020 :</p> <ul> <li>Foodbank</li> <li>WAIS</li> </ul> <p>If you have not before seen the existing progress, see this video.</p> <p>These two projects have their own corresponding technology stacks being used, hence will dictate the workshops that will be held.</p>"},{"location":"2021-2022-summer/#project-technology","title":"Project Technology","text":""},{"location":"2021-2022-summer/#foodbank","title":"Foodbank","text":"<p>Foodbank is mainly with frontend with React + NextJS + TypeScript + TailwindCSS with Firebase and Notion CMS.</p>"},{"location":"2021-2022-summer/#wais","title":"WAIS","text":"<p>WAIS is a full-stack application with Vue and Django. It uses Docker containerisation for both development (and production in the future).</p>"},{"location":"2021-2022-summer/#workshop-recordings","title":"Workshop Recordings","text":"<p>The workshop recordings will be held on our youtube channel.</p>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/","title":"Automated Testing and CI Pipelines","text":""},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#what-is-the-problem-with-manual-testing","title":"What is the problem with manual testing?","text":"<ul> <li>tedious</li> <li>some scenarious are hard to repeat<ul> <li>eg. network issues, database randomly crashes</li> </ul> </li> <li>repetitive</li> <li>growning number of scenarios</li> <li>time consuming</li> </ul> Cost Savings Scenarios that are hard to repeat - Network Requests <pre><code>import requests\ndef make_network_request():\ntry:\n    response = requests.get(\"https://www.google.com\")\n    if response.status_code == 200:\n        return response.text\n    else:\n        return None\nexception requests.exceptions.ConnectionError:\n    return None\n</code></pre> <p>This is the way to simulate an exception after a network request. <pre><code>import pytest\ndef test_make_network_request_exception(mocker):\n    mocker.patch(\"requests.get\", side_effect=requests.exceptions.ConnectionError)\n    assert make_network_request() is None\n</code></pre></p>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#importance-of-software","title":"Importance of Software","text":"<p>Before you can truly understand why testing is important, we first have to understand the importance of software.</p> Importance of software in different parts <p>Control Systems</p> <p></p> <p>Healthcare</p> <p></p> <p>Transportations</p> <p></p> <p>Daily life</p> <p></p> <p>Office Work</p> <p></p> <p>Education</p> <p></p>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#software-is-fragile","title":"Software is Fragile","text":"Quote <p>It only takes a character difference to prevent a software from compiling or running.</p> <p></p> <p></p> <p></p>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#consequences-of-fault-softwares","title":"Consequences of Fault Softwares","text":"<p>Huge Compute Charges</p> <p></p> <p>Embarrassment</p> <p></p> <p>Disruptions</p> <p></p> <p>User Frustations</p> <p></p> <p>Client loss</p> <p></p> <p>Death</p> <p></p>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#automated-testing","title":"Automated Testing","text":""},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#what-is-involved-manual-testing-usually","title":"What is involved manual testing usually?","text":"<p>To be able to automate testing, we need to understand what is involved in manual testing.</p> <ul> <li>Open your own environment and tools</li> <li>Git checkout/pull/fetch</li> <li>Install dependency</li> <li>Setup the environment<ul> <li>Do you need to clear the database?</li> <li>Do you need to enter a couple of data?</li> <li>Do you need to disconnect the internet while server is running?</li> </ul> </li> <li>Perform the steps to test</li> <li>Assert the test correction?</li> <li>Did you make a mistake? (repeat the entire thing)</li> <li>Now do a different scenario!</li> <li>Hang on a sec? Your coworker forgot to push? Now do all scenarios again</li> </ul>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#how-does-automated-testing-work","title":"How does automated testing work?","text":"<ul> <li>Write scripts to evaluate code</li> <li>Write script to run scripts when certain events happen (more so later)</li> <li>Update Scripts whenever change happens</li> </ul> Example from the workshop with github actions - Software Engineering Practices <pre><code>name: Python package\n\non:\npull_request:\nworkflow_dispatch:\n    inputs:\n    logLevel:\n        description: \"Log level\"\n        required: false\n        default: \"warning\"\n\njobs:\nflake8_py3:\n    name: \"Linting with Flake8\"\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n\n    - name: \"Set up Python\"\n        uses: actions/setup-python@v2\n        with:\n        python-version: 3.x\n\n    - name: \"Install flake8\"\n        run: pip install flake8\n\n    - name: \"Run flake8\"\n        uses: liskin/gh-problem-matcher-wrap@v1\n        with:\n        linters: flake8\n        run: flake8 --max-line-length 150 .\n\ntest:\n    runs-on: ubuntu-latest\n    strategy:\n    matrix:\n        python-version: [3.8] # you can add more python version to test it in\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python ${{ matrix.python-version }}\n    uses: actions/setup-python@v2\n    with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies\n    run: |\n        python -m pip install --upgrade pip\n        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n    - name: Test with pytest\n    run: |\n        pytest --cov-report html --cov=.\n    - uses: actions/upload-artifact@v1\n    if: always()\n    with:\n        name: coverage-report\n        path: htmlcov\n</code></pre>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#test-driven-development","title":"Test-Driven Development","text":"<p>Define test/specification first, then write functionality. Works best if you know way ahead of time what you want.</p> <p>Note: This does not always work (eg. Frontend)</p> Simple Example <pre><code>def test_add_two_numbers():\nassert add_two_numbers(1, 2) == 3\n</code></pre> <pre><code>def add_two_numbers(a, b):\n    return a + b\n</code></pre> More complex example, but demonstrates how it can save time <p>Let say you have to develop a function that sends email depending on the number of users in the database <pre><code>from django.core.mail import send_mail\n# Not guaranteed to work code\ndef send_email_to_admin():\n    number_of_users = User.objects.count()\n    send_mail(\"Number of users\", f\"There are {number_of_users} users in the database\", \"no-reply@system.com\",[\"admin@system.com\"])\n</code></pre></p> <pre><code>from django.core import mail\nfrom module import send_email_to_admin\nclass EmailTest(TestCase):\n    def setup():\n        # Create users\n        User.objects.create(username=\"admin\" ...)\n\n    def test_send_email_to_admin(self):\n        send_email_to_admin()\n\n        # Test that one message has been sent.\n        self.assertEqual(len(mail.outbox), 1)\n\n        self.assertEqual(mail.outbox[0].subject, \"Number of users\")\n        self.assertTrue(\"1 users in the database\" in mail.outbox[0].body)\n        ...\n</code></pre> <p>Usual workflow:</p> <ol> <li>Prepare your tools - mail client and smtp server</li> <li>Prepare your database</li> <li>Do manual testing + Write code (repeat)</li> <li>Write Automated testing</li> </ol> <p>Test Driven development workflow (also known as red-green-refactor):</p> <ol> <li>Write the Automated Testing - when this is run it will fail</li> <li>Write code until test pass</li> <li>Refactor + improve code</li> </ol>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#given-when-then","title":"GIVEN-WHEN-THEN","text":"<p>Acceptance of features can be divided into: - GIVEN \u2013 what are the assumptions - WHEN \u2013 occurence - THEN - effect or observation</p>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#what-is-cicd","title":"What is CI/CD?","text":"<p>Scripts that runs for certain events (such as pull request, a commit) to run test or deploy</p> Providers <ul> <li>Github Actions</li> <li>Circle CI</li> <li>Bitbucket Pipelines</li> <li>Travis CI</li> </ul>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#whats-usually-in-ci","title":"What's usually in CI?","text":"<ul> <li>Linting (code consistency + undefined variables)</li> <li>Tests</li> <li>Builds + Deploy</li> </ul> <p>Others: - bot to auto tag issue - Security checks - Code Autosuggestion (kinda like linting, but it suggests stuff)</p>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#testing-artifacts","title":"Testing Artifacts","text":"<p>Files given when testing</p> Coverage Report <p></p> Cypress Screenshots + Videos <p></p> Long term test reports <p></p>"},{"location":"2021-2022-summer/automated-testing-and-ci-pipelines/#demo-cypress-integration-test-e2e-test","title":"Demo - Cypress Integration Test / E2E Test","text":"<p>Cypress is a tool that simulates user interaction by programatically performing action against a browser.</p> <p>Get started at Cypress.</p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/","title":"Welcome to the Djangol!","text":"<p>We've got puns 'n' data, We\u2019ve got everything you request</p> <p></p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#how-does-an-application-communicate-with-backend-systems","title":"How does an application communicate with backend systems?","text":"<p>JavaScript Object Notation</p> JSON <p>Link <pre><code>[\n{\n    \"id\": 1,\n    \"name\": \"Leanne Graham\",\n    \"username\": \"Bret\",\n    \"email\": \"Sincere@april.biz\",\n    \"address\": {\n    \"street\": \"Kulas Light\",\n    \"suite\": \"Apt. 556\",\n    \"city\": \"Gwenborough\",\n    \"zipcode\": \"92998-3874\",\n    \"geo\": {\n        \"lat\": \"-37.3159\",\n        \"lng\": \"81.1496\"\n    }\n    },\n    \"phone\": \"1-770-736-8031 x56442\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n    \"name\": \"Romaguera-Crona\",\n    \"catchPhrase\": \"Multi-layered client-server neural-net\",\n    \"bs\": \"harness real-time e-markets\"\n    }\n},\n...\n{\n    \"id\": 10,\n    \"name\": \"Clementina DuBuque\",\n    \"username\": \"Moriah.Stanton\",\n    \"email\": \"Rey.Padberg@karina.biz\",\n    \"address\": {\n    \"street\": \"Kattie Turnpike\",\n    \"suite\": \"Suite 198\",\n    \"city\": \"Lebsackbury\",\n    \"zipcode\": \"31428-2261\",\n    \"geo\": {\n        \"lat\": \"-38.2386\",\n        \"lng\": \"57.2232\"\n    }\n    },\n    \"phone\": \"024-648-3804\",\n    \"website\": \"ambrose.net\",\n    \"company\": {\n    \"name\": \"Hoeger LLC\",\n    \"catchPhrase\": \"Centralized empowering task-force\",\n    \"bs\": \"target end-to-end models\"\n    }\n}\n]\n</code></pre></p> Query this endpoint using JavaScript <pre><code>fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response =&gt; response.json())\n    .then(data =&gt; console.log(data))\n</code></pre> Other ways <p>JSON is not the only way. There are things like SOAP, RPC, but nevermind them for now as you will most likely have to deal with JSON for the most parts.</p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#what-are-apis-and-rest-apis","title":"What are APIs and REST-APIs?","text":"<p>Application Programming Interface</p> Analogy <p>Who interacts with the user interface? - the user Who interacts with the application programming interface ? - the application program (eg. the browser) </p> <p>Representational State Transfer Application Programming Interface</p> <ul> <li> <p>backend architectural pattern that follows the GET/POST/PUT/PATCH/DELETE</p> </li> <li> <p>Can be represented in Swagger/ Open API specification</p> </li> </ul> Swagger/ Open API specification <p></p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#what-is-django","title":"What is Django?","text":"<p>Django</p> <ul> <li>Python web framework for creating server-side application</li> </ul> <p>Follows MVC:</p> <ul> <li>Model - database</li> <li>View \u2013 Interface (API or User Interface)</li> <li>Controller \u2013 URLs + routes</li> </ul> <p>See Documentation</p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#what-is-django-rest-framework-drf","title":"What is Django REST Framework (DRF)?","text":"<ul> <li>library for creating REST-API</li> <li>just makes it easier develop REST-API</li> </ul> <p>In:</p> <ul> <li>Authentication + Permission</li> <li>Generic API Views</li> <li>Serialisers (payload validation and format)</li> </ul> <p>See Documentation</p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#features-of-django-and-drf","title":"Features of Django and DRF","text":""},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#serializers","title":"Serializers","text":"<ul> <li>converter to and from Python Data types to JSON/XML</li> <li>can be used to do validation</li> </ul> <p>More info here</p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#models","title":"Models","text":"<p>Models</p> <ul> <li>representation of database connection or schema Example: Todo Django + React</li> </ul>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#models-with-serializers","title":"Models with Serializers","text":"<ul> <li>Model already defined the structure of the data</li> </ul>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#configuration-file-settingspy","title":"Configuration file <code>settings.py</code>","text":"<p>One of the most important file - determines the app configurations and default</p> Example of Items you can configure <ul> <li>timezones</li> <li>start of URL</li> <li>installed Django Apps</li> <li>middlewares</li> <li>usually becomes the \"default\" configs after environment variables</li> <li>database configuration</li> </ul>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#route-with-urls","title":"Route with URLs","text":"<p>Determines the URL route of the API</p> <ul> <li>starts with the <code>urls.py</code> in the config (settings.py)</li> </ul>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#packaging-a-django-app","title":"Packaging a \"Django App\"","text":"<p>\"Django Apps\" are plugin system of Django. Django codebase prefers packaging each endpoint feature to a \"Django App\"</p> Authenticate with Microsoft <p>For example: django-saml2-auth-lw (used for Microsoft SAML SSO)</p> <p>More documentation can be seen here</p> <p>You can start creating your own Django app by following the steps:</p> <ol> <li><code>python manage.py startapp &lt;app_name&gt;</code>. This will bootstrap commonly used files for any \"app\".</li> <li>Add the app in the <code>INSTALLED_APPS</code> in\u00a0 the settings.py</li> <li><code>python manage.py makemigrations</code> to create the migration scripts</li> <li><code>python manage.py migrate</code> to run the migration script</li> </ol>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#views","title":"Views","text":"<p>The interface at which any application program interacts with to get something done in the backend.</p> Use DRF instead of Base Django <p>This is where it gets a little tricky. Django accomodates both frontend and backend, but where it shines is with DRF. So always refer to documentation regarding write it from the documentation.</p> <p>If you plan to use Django as an entire full-stack option, then you may not need DRF at all. Just use the generic views.</p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#function-based-views-and-class-based-views","title":"Function-based Views and Class-based Views","text":"Codes <p>Summary: In DRF, there's a lot more advantage to use class-based views. However, if you want the flexibility and writing things on your own, then you might want to use function-based view.</p> Function-Based View <p>Link: <pre><code>from django.shortcuts import render\nfrom django.http import JsonResponse\n\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom .serializers import TaskSerializer\n\nfrom .models import Task\n\n@api_view(['GET'])\ndef apiOverview(request):\n    api_urls = {\n        'List':'/task-list/',\n        'Detail View':'/task-detail/&lt;str:pk&gt;/',\n        'Create':'/task-create/',\n        'Update':'/task-update/&lt;str:pk&gt;/',\n        'Delete':'/task-delete/&lt;str:pk&gt;/',\n        }\n\n    return Response(api_urls)\n\n@api_view(['GET'])\ndef taskList(request):\n    tasks = Task.objects.all().order_by('-id')\n    serializer = TaskSerializer(tasks, many=True)\n    return Response(serializer.data)\n\n@api_view(['GET'])\ndef taskDetail(request, pk):\n    tasks = Task.objects.get(id=pk)\n    serializer = TaskSerializer(tasks, many=False)\n    return Response(serializer.data)\n\n\n@api_view(['POST'])\ndef taskCreate(request):\n    serializer = TaskSerializer(data=request.data)\n\n    if serializer.is_valid():\n        serializer.save()\n\n    return Response(serializer.data)\n\n@api_view(['POST'])\ndef taskUpdate(request, pk):\n    task = Task.objects.get(id=pk)\n    serializer = TaskSerializer(instance=task, data=request.data)\n\n    if serializer.is_valid():\n        serializer.save()\n\n    return Response(serializer.data)\n\n\n@api_view(['DELETE'])\ndef taskDelete(request, pk):\n    task = Task.objects.get(id=pk)\n    task.delete()\n\n    return Response('Item succsesfully delete!')\n</code></pre></p> Class-Based View <p>To be seen in in the live demos</p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#django-admin","title":"Django Admin","text":"<p>Django comes with a built-in user-interface for managing \"Django Apps\" with models.py By default it in the path <code>/admin</code></p> Django Admin <p></p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#other-tools","title":"Other Tools","text":""},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#drf-frontend-for-consuming-api","title":"DRF Frontend for Consuming API","text":"<p>When you use DRF for developing API, and use the generic API views and serializers, it will automatically create this for you.</p> DRF Frontend <p></p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#postman","title":"Postman","text":"<p>Development tool for interacting with APIs:</p> <ul> <li>environment variables</li> <li>collection of possible endpoints</li> <li>send different JSON body</li> </ul> Postman <p></p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#python-debugger-pdb","title":"Python Debugger (pdb)","text":"<p>When you run the django <code>python manage.py runserver</code>, you can add <code>breakpoint()</code> to anywhere piece of your code. This will stop the terminal line to the breakpoint if it hits it. From here you can do debugging.</p>"},{"location":"2021-2022-summer/introduction-to-backend-development-with-django/#demo-live-coding","title":"Demo - Live Coding","text":"<p>Demonstrate how to create a backend for a Todo app.</p> <ol> <li>Setup Python environment <code>python -m venv venv</code> then activate with <code>source venv/bin/activate</code></li> <li>Install Django <code>pip install Django</code></li> <li>Setup django codebase <code>django-admin startproject todo</code></li> <li> <p>Install DRF <pre><code># As per https://www.django-rest-framework.org/#installation\npip install djangorestframework\npip install markdown       # Markdown support for the browsable API.\npip install django-filter  # Filtering support\npip install pytz           # Timezone support\n</code></pre></p> </li> <li> <p>Freeze requirements <code>pip freeze &gt; requirements.txt</code></p> </li> <li>Do a python sqlite migration <code>python manage.py migrate</code> to initialise the Django database for the apps</li> <li>Create a super user <code>python manage.py createsuperuser</code></li> <li>Run the django app with <code>python manage.py runserver</code></li> <li>Login with the super user and show Django Admin</li> <li>Setup django app <code>python manage.py startapp api</code></li> <li> <p>Create a model <code>models.py</code> <pre><code>from django.db import models\n\n# Todo Model\nclass Todo(models.Model):\n    title = models.CharField(max_length=100)\n    description = models.TextField()\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n</code></pre></p> </li> <li> <p>Do a python sqlite migration <code>python manage.py makemigrations</code> and <code>python manage.py migrate</code></p> </li> <li>Show sqlite</li> <li> <p>Create serialiser <code>serializers.py</code> <pre><code>from api.models import Todo\nfrom rest_framework import serializers\n\nclass TodoSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for Todo model\n    \"\"\"\n    class Meta:\n        model = Todo\n        # All fields\n        fields = '__all__'\n</code></pre></p> </li> <li> <p>Create Class-based view <code>views.py</code> and link back to the <code>urls.py</code> <pre><code># api/views.py\nfrom django.shortcuts import render\nfrom rest_framework import viewsets, permissions\nfrom api.serializers import TodoSerializer\nfrom api.models import Todo\n\n# Class Model Viewset\nclass TodoModelViewSet(viewsets.ModelViewSet):\n    # Define the serializer class\n    serializer_class = TodoSerializer\n    # Define the queryset\n    queryset = Todo.objects.all()\n\n    # Permissions (left to your own exercise)\n    # permission_classes = [permissions.IsAuthenticated]\n\n    # Define the list of allowed HTTP methods (by default if you didn't define it, it will just enable all)\n    http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']\n</code></pre> <pre><code># api/urls.py\nfrom django.urls import path, include\nfrom rest_framework import routers\nfrom api.views import TodoModelViewSet\n\nrouter = routers.DefaultRouter(trailing_slash=False)\nrouter.register(r'todos', TodoModelViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n]\n</code></pre> <pre><code># urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api-auth/', include('rest_framework.urls')),\n    path('api/', include('api.urls')),\n]\n</code></pre></p> </li> <li> <p>Manually test with DRF Frontend or postman</p> </li> </ol> <p>Final code can be seen here.</p> Read through the Viewset Documentation <p>Viewsets are one of the most powerful feature ever. In just a couple of lines of code, you can create a CRUD API for your models.</p> <p>As one of my favourite developer once said,</p> Quote <p>Frinze, Viewset is the future! - J. Morales</p>"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/","title":"Introduction to Frontend Frameworks","text":"<p>An intuitive explanation of why frontend frameworks are used</p>"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#frontend-engineering","title":"Frontend Engineering","text":"<ul> <li>Frontend Engineering, one of the most important aspect of web dev</li> <li>Feared by lots of developers (ehem ehem CSS)</li> </ul> Memes"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#job-market-and-trends","title":"Job Market and Trends","text":"StackOverflow 2020 <p>Can be seen that there is a huge portion that will needs frontend.</p> <p>Note: Developers can identify as many types</p> <p></p> Startups <p> </p>"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#github-copilot-and-drag-and-drops","title":"Github Copilot and Drag and Drops","text":"<ul> <li>Getting replaced by AIs, Drag and drops?</li> <li>Far from reality?</li> </ul> Github Copilot and Squarespace"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#problems","title":"Problems","text":""},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#cross-browser-support","title":"Cross-Browser Support","text":"<ul> <li>Need to support multiple browsers</li> </ul>"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#html-is-wet","title":"HTML is WET!","text":"<p>Not DRY = WET</p> <p>D \u2013 Don't</p> <p>R \u2013 Repeat</p> <p>Y - Yourself</p> Github Tags System <p></p>"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#inefficiencies-of-reloading","title":"Inefficiencies of Reloading","text":"<ul> <li>Most parts of website don't change</li> </ul> Youtube <ul> <li>What about with notifications and realtime updates?</li> </ul> notifications"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#state-management-and-rerendering","title":"State Management and Rerendering","text":"<ul> <li>How do you handle changes in the state of the application?</li> </ul>"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#example-spotimania","title":"Example \"Spotimania\"","text":"<p>Realtime Multiplayer Song Guessing Game https://spotimania.herokuapp.com/</p> <p></p> <p>Information</p> <ul> <li>Song picture</li> <li>Notifications when someone joined or scored</li> <li>Song title + artist</li> </ul> <p>How do we handle when we \"Submit Guess\"?</p> HTML Format Submit Approach <ol> <li>Reloads = loses current state</li> <li>How do you coordinate with players?</li> </ol> AJAX Calls <ol> <li>From frontend, use JS to do AJAX Calls</li> <li>After receiving AJAX call, modify everything that needs the data (Find element by DOM, do some janky HTML inject)</li> </ol> <pre><code>const newData = await fetch(\u2026)\nconst image = document.querySelector('img .music')\nimage.outerText = `&lt;img src={newData.image} / &gt;`\n</code></pre> Cross-site Scripting <p>Now, you have to implement your own strategy to do this. <pre><code>newData = {\u2026 , image: \"&lt;script&gt;hack()&lt;/script&gt;\", ...}\n</code></pre> </p>   When you try to do render by that approach: <ul> <li>slower (rerendering things that should not render)</li> <li>tedious (find element and update)</li> <li>security</li> <li>code complexity</li> <li>hard to keep track of states (especially if different portion of the UI relies on a certain data)</li> </ul>"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#how-do-we-fix-it","title":"How do we fix it?","text":""},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#cross-browser-support_1","title":"Cross-Browser Support","text":"<p>Babel: Transpiles / Translates New JavaScript to old JavaScript that is supported</p> <p></p> <p>Webpack: Bundles / Packs Bundles the JavaScript modules into a single minified file</p> <p></p> SCSS Compilation <p>Translates concise and programatic version of CSS to something that can be understood by the browser</p> <p></p> Minification <p>Makes files smaller by removing unnecessary characters</p> <p></p>"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#what-if-html-is-not-wet-what-if-html-is-a-programming-language","title":"What if HTML is NOT WET? What if HTML is a programming language?","text":"Memes about HTML as a programming language <p>What if HTML has variables?</p> <ul> <li>perform computations to be displayed in the interface (solves State Management and Rerendering)</li> </ul> <p>What if HTML has loops?</p> <ul> <li>Eliminate repetitive code (solves wet HTML)</li> </ul> <p>What if HTML has functions?</p> <ul> <li>Divide interface into modular components (solves wet HTML)<ul> <li>load only components that are not loaded (solves Inefficiencies of Reloading)</li> </ul> </li> <li>interface determined by parameters</li> <li>Maybe we can write a function that will automatically update HTML when data changes? (solves State Management and Rerendering)</li> </ul> <p>What if HTML has condition?</p> <ul> <li>Conditional rendering (solves Reloading to show different view)</li> </ul>"},{"location":"2021-2022-summer/introduction-to-frontend-frameworks/#whats-next","title":"What's next?","text":"<p>The next two workshop content are:</p> <ul> <li>React</li> <li>Vue</li> </ul>"},{"location":"2021-2022-summer/introduction-to-react/","title":"Introduction to React","text":"<p>Sparking the REACTion of User Interface and Experience</p> <p></p>"},{"location":"2021-2022-summer/introduction-to-react/#decomposing-the-html-user-interface","title":"Decomposing the HTML User Interface","text":"Complete code <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\" /&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n    &lt;title&gt;My Home Page - Frinze Lapuz&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;nav class=\"navbar sticky-top navbar-dark bg-dark\"&gt;\n        &lt;div class=\"container nav\"&gt;\n            &lt;a class=\"navbar-brand\" href=\"#\"&gt;Royal Homepage&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/nav&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;div class=\"col\"&gt;Here Some Dog For You. Cool Stuff right?&lt;/div&gt;\n            &lt;div class=\"col\"&gt;\n                &lt;!-- &lt;img class=\"img-fluid img-thumbnail\" src=\"dog.jpg\" alt=\"dog\" /&gt; --&gt;\n                &lt;div class=\"carouselWrapper\"&gt;\n                    &lt;div id=\"carouselDoggo\" class=\"carousel slide\" data-ride=\"carousel\"&gt;\n                        &lt;ol class=\"carousel-indicators\"&gt;\n                            &lt;li data-target=\"#carouselDoggo\" data-slide-to=\"0\" class=\"active\"&gt;&lt;/li&gt;\n                            &lt;li data-target=\"#carouselDoggo\" data-slide-to=\"1\"&gt;&lt;/li&gt;\n                            &lt;li data-target=\"#carouselDoggo\" data-slide-to=\"2\"&gt;&lt;/li&gt;\n                        &lt;/ol&gt;\n                        &lt;div class=\"carousel-inner\"&gt;\n                            &lt;div class=\"carousel-item active\"&gt;\n                                &lt;img src=\"dog.jpg\" class=\"d-block w-100\" alt=\"...\" /&gt;\n                                &lt;div class=\"carousel-caption d-none d-md-block\"&gt;\n                                    &lt;h5&gt;First Dog&lt;/h5&gt;\n                                    &lt;p&gt;Cutie :)&lt;/p&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"carousel-item\"&gt;\n                                &lt;img src=\"dog2.jpg\" class=\"d-block w-100\" alt=\"...\" /&gt;\n                                &lt;div class=\"carousel-caption d-none d-md-block\"&gt;\n                                    &lt;h5&gt;Second Dog&lt;/h5&gt;\n                                    &lt;p&gt;Good Doggo!&lt;/p&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                            &lt;div class=\"carousel-item\"&gt;\n                                &lt;img src=\"dog3.jpg\" class=\"d-block w-100\" alt=\"...\" /&gt;\n                                &lt;div class=\"carousel-caption d-none d-md-block\"&gt;\n                                    &lt;h5&gt;Third Dog&lt;/h5&gt;\n                                    &lt;p&gt;Walkie Barkie Cutie!&lt;/p&gt;\n                                &lt;/div&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;a class=\"carousel-control-prev\" href=\"#carouselDoggo\" data-slide=\"prev\"&gt;\n                            &lt;span class=\"carousel-control-prev-icon\"&gt;&lt;/span&gt;\n                            &lt;span class=\"sr-only\"&gt;Previous&lt;/span&gt;\n                        &lt;/a&gt;\n                        &lt;a class=\"carousel-control-next\" href=\"#carouselDoggo\" data-slide=\"next\"&gt;\n                            &lt;span class=\"carousel-control-next-icon\"&gt;&lt;/span&gt;\n                            &lt;span class=\"sr-only\"&gt;Next&lt;/span&gt;\n                        &lt;/a&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n        integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n        crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n        crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n        crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> Relevant Code for Discussion <pre><code>&lt;nav class=\"navbar sticky-top navbar-dark bg-dark\"&gt; &lt;!--(1)--&gt;\n    &lt;div class=\"container nav\"&gt;\n        &lt;a class=\"navbar-brand\" href=\"#\"&gt;Royal Homepage&lt;/a&gt;  \n    &lt;/div&gt;\n&lt;/nav&gt;\n&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col\"&gt;Here Some Dog For You. Cool Stuff right?&lt;/div&gt; &lt;!--(2)--&gt;\n        &lt;div class=\"col\"&gt;\n            &lt;div class=\"carouselWrapper\"&gt; &lt;!--(3)--&gt;\n                &lt;div id=\"carouselDoggo\" class=\"carousel slide\" data-ride=\"carousel\"&gt;\n                    &lt;ol class=\"carousel-indicators\"&gt;\n                        &lt;li data-target=\"#carouselDoggo\" data-slide-to=\"0\" class=\"active\"&gt;&lt;/li&gt;\n                        &lt;li data-target=\"#carouselDoggo\" data-slide-to=\"1\"&gt;&lt;/li&gt;\n                        &lt;li data-target=\"#carouselDoggo\" data-slide-to=\"2\"&gt;&lt;/li&gt;\n                    &lt;/ol&gt;\n                    &lt;div class=\"carousel-inner\"&gt;\n                        &lt;div class=\"carousel-item active\"&gt;\n                            &lt;img src=\"dog.jpg\" class=\"d-block w-100\" alt=\"...\" /&gt;\n                            &lt;div class=\"carousel-caption d-none d-md-block\"&gt;\n                                &lt;h5&gt;First Dog&lt;/h5&gt;\n                                &lt;p&gt;Cutie :)&lt;/p&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"carousel-item\"&gt;\n                            &lt;img src=\"dog2.jpg\" class=\"d-block w-100\" alt=\"...\" /&gt;\n                            &lt;div class=\"carousel-caption d-none d-md-block\"&gt;\n                                &lt;h5&gt;Second Dog&lt;/h5&gt;\n                                &lt;p&gt;Good Doggo!&lt;/p&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"carousel-item\"&gt;\n                            &lt;img src=\"dog3.jpg\" class=\"d-block w-100\" alt=\"...\" /&gt;\n                            &lt;div class=\"carousel-caption d-none d-md-block\"&gt;\n                                &lt;h5&gt;Third Dog&lt;/h5&gt;\n                                &lt;p&gt;Walkie Barkie Cutie!&lt;/p&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    &lt;a class=\"carousel-control-prev\" href=\"#carouselDoggo\" data-slide=\"prev\"&gt;\n                        &lt;span class=\"carousel-control-prev-icon\"&gt;&lt;/span&gt;\n                        &lt;span class=\"sr-only\"&gt;Previous&lt;/span&gt;\n                    &lt;/a&gt;\n                    &lt;a class=\"carousel-control-next\" href=\"#carouselDoggo\" data-slide=\"next\"&gt;\n                        &lt;span class=\"carousel-control-next-icon\"&gt;&lt;/span&gt;\n                        &lt;span class=\"sr-only\"&gt;Next&lt;/span&gt;\n                    &lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <ol> <li>Navigation Bar</li> <li>Some Text</li> <li>Carousel</li> </ol>"},{"location":"2021-2022-summer/introduction-to-react/#html-stored-in-variables","title":"HTML Stored in Variables","text":"<pre><code>const Nav = \n    `&lt;nav class=\"navbar sticky-top navbar-dark bg-dark\"&gt; \n        &lt;div class=\"container nav\"&gt;\n            &lt;a class=\"navbar-brand\" href=\"#\"&gt;Royal Homepage&lt;/a&gt;  \n        &lt;/div&gt;\n    &lt;/nav&gt;\n    `\n</code></pre>"},{"location":"2021-2022-summer/introduction-to-react/#html-stored-in-functions","title":"HTML Stored in Functions","text":"<pre><code>const Nav = (title) =&gt; \n    `\n    &lt;nav class=\"navbar sticky-top navbar-dark bg-dark\"&gt; \n        &lt;div class=\"container nav\"&gt;\n            &lt;a class=\"navbar-brand\" href=\"#\"&gt;${title}&lt;/a&gt;  \n        &lt;/div&gt;\n    &lt;/nav&gt;\n    `\n</code></pre> Carousel Decomposition <p>The highlighted ones are the key-distinct data driven elements. <pre><code>&lt;div class=\"carouselWrapper\"&gt;\n    &lt;div id=\"carouselDoggo\" class=\"carousel slide\" data-ride=\"carousel\"&gt;\n        &lt;ol class=\"carousel-indicators\"&gt;  &lt;!--(1)--&gt;\n            &lt;li data-target=\"#carouselDoggo\" data-slide-to=\"0\" class=\"active\"&gt;&lt;/li&gt;\n            &lt;li data-target=\"#carouselDoggo\" data-slide-to=\"1\"&gt;&lt;/li&gt;\n            &lt;li data-target=\"#carouselDoggo\" data-slide-to=\"2\"&gt;&lt;/li&gt;\n        &lt;/ol&gt;\n        &lt;div class=\"carousel-inner\"&gt;\n            &lt;div class=\"carousel-item active\"&gt; &lt;!--(2)--&gt;\n                &lt;img src=\"dog.jpg\" class=\"d-block w-100\" alt=\"...\" /&gt;\n                &lt;div class=\"carousel-caption d-none d-md-block\"&gt;\n                    &lt;h5&gt;First Dog&lt;/h5&gt;\n                    &lt;p&gt;Cutie :)&lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"carousel-item\"&gt;\n                &lt;img src=\"dog2.jpg\" class=\"d-block w-100\" alt=\"...\" /&gt;\n                &lt;div class=\"carousel-caption d-none d-md-block\"&gt;\n                    &lt;h5&gt;Second Dog&lt;/h5&gt;\n                    &lt;p&gt;Good Doggo!&lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"carousel-item\"&gt;\n                &lt;img src=\"dog3.jpg\" class=\"d-block w-100\" alt=\"...\" /&gt;\n                &lt;div class=\"carousel-caption d-none d-md-block\"&gt;\n                    &lt;h5&gt;Third Dog&lt;/h5&gt;\n                    &lt;p&gt;Walkie Barkie Cutie!&lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;a class=\"carousel-control-prev\" href=\"#carouselDoggo\" data-slide=\"prev\"&gt;\n            &lt;span class=\"carousel-control-prev-icon\"&gt;&lt;/span&gt;\n            &lt;span class=\"sr-only\"&gt;Previous&lt;/span&gt;\n        &lt;/a&gt;\n        &lt;a class=\"carousel-control-next\" href=\"#carouselDoggo\" data-slide=\"next\"&gt;\n            &lt;span class=\"carousel-control-next-icon\"&gt;&lt;/span&gt;\n            &lt;span class=\"sr-only\"&gt;Next&lt;/span&gt;\n        &lt;/a&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p> <ol> <li>Carousel Indicators</li> <li>Carousel Items</li> </ol> <p>Now, what if we have a variable called <code>dogsData</code> an array of objects (may come from <code>fetch</code>). <pre><code>dogsData = [\n    ...\n    {\n        imgSrc: \"dog.jpg\",\n        title: \"First Dog\",\n        caption: \"Cutie :)\"\n    }\n    ...\n]\n</code></pre></p> <pre><code>const Carousel = (dogsData) =&gt;\n    `\n    &lt;div class=\"carouselWrapper\"&gt; &lt;!--(1)--&gt;\n        &lt;div id=\"carouselDoggo\" class=\"carousel slide\" data-ride=\"carousel\"&gt;\n            &lt;ol class=\"carousel-indicators\"&gt;\n                ${dogsData.map((dog, index) =&gt; `&lt;li data-target=\"#carouselDoggo\" data-slide-to=\"${index}\" class=\"${index === 0 ? 'active' : ''}\"&gt;&lt;/li&gt;`).join('')}\n            &lt;/ol&gt;\n            &lt;div class=\"carousel-inner\"&gt;\n                ${dogsData.map((dog, index) =&gt; `\n                    &lt;div class=\"carousel-item ${index === 0 ? 'active' : ''}\"&gt;\n                        &lt;img src=\"${dog.imgSrc}\" class=\"d-block w-100\" alt=\"...\" /&gt;\n                        &lt;div class=\"carousel-caption d-none d-md-block\"&gt;\n                            &lt;h5&gt;${dog.title}&lt;/h5&gt;\n                            &lt;p&gt;${dog.caption}&lt;/p&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                `).join('')}\n            &lt;/div&gt;\n            &lt;a class=\"carousel-control-prev\" href=\"#carouselDoggo\" data-slide=\"prev\"&gt;\n                &lt;span class=\"carousel-control-prev-icon\"&gt;&lt;/span&gt;\n                &lt;span class=\"sr-only\"&gt;Previous&lt;/span&gt;\n            &lt;/a&gt;\n            &lt;a class=\"carousel-control-next\" href=\"#carouselDoggo\" data-slide=\"next\"&gt;\n                &lt;span class=\"carousel-control-next-icon\"&gt;&lt;/span&gt;\n                &lt;span class=\"sr-only\"&gt;Next&lt;/span&gt;\n            &lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    `\n</code></pre>"},{"location":"2021-2022-summer/introduction-to-react/#assemble-the-components","title":"Assemble the Components","text":"<p><pre><code>{Nav(\"Royal Homepage\")}\n&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md-12\"&gt;\n            {Carousel(dogsData)}\n        &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre> or with JSX</p> <pre><code>&lt;Nav title=\"Royal Homepage\"&gt;&lt;/Nav&gt;\n&lt;div class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-md-12\"&gt;\n            &lt;Carousel dogsData={dogsData}&gt;&lt;/Carousel&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"2021-2022-summer/introduction-to-react/#intro-to-react","title":"Intro to React","text":"Complete Modularised Code <pre><code>const Nav = () =&gt; &lt;nav class=\"navbar sticky-top navbar-dark bg-dark\"&gt; \n    &lt;div class=\"container nav\"&gt;\n        &lt;a class=\"navbar-brand\" href=\"#\"&gt;Royal Homepage&lt;/a&gt;  \n    &lt;/div&gt;\n&lt;/nav&gt;\n\nconst Carousel = (dogsData) =&gt;\n    &lt;div class=\"carouselWrapper\"&gt;\n        &lt;div id=\"carouselDoggo\" class=\"carousel slide\" data-ride=\"carousel\"&gt;\n            &lt;ol class=\"carousel-indicators\"&gt;\n                ${dogsData.map((dog, index) =&gt; `&lt;li data-target=\"#carouselDoggo\" data-slide-to=\"${index}\" class=\"${index === 0 ? 'active' : ''}\"&gt;&lt;/li&gt;`).join('')}\n            &lt;/ol&gt;\n            &lt;div class=\"carousel-inner\"&gt;\n                ${dogsData.map((dog, index) =&gt; `\n                    &lt;div class=\"carousel-item ${index === 0 ? 'active' : ''}\"&gt;\n                        &lt;img src=\"${dog.imgSrc}\" class=\"d-block w-100\" alt=\"...\" /&gt;\n                        &lt;div class=\"carousel-caption d-none d-md-block\"&gt;\n                            &lt;h5&gt;${dog.title}&lt;/h5&gt;\n                            &lt;p&gt;${dog.caption}&lt;/p&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                `).join('')}\n            &lt;/div&gt;\n            &lt;a class=\"carousel-control-prev\" href=\"#carouselDoggo\" data-slide=\"prev\"&gt;\n                &lt;span class=\"carousel-control-prev-icon\"&gt;&lt;/span&gt;\n                &lt;span class=\"sr-only\"&gt;Previous&lt;/span&gt;\n            &lt;/a&gt;\n            &lt;a class=\"carousel-control-next\" href=\"#carouselDoggo\" data-slide=\"next\"&gt;\n                &lt;span class=\"carousel-control-next-icon\"&gt;&lt;/span&gt;\n                &lt;span class=\"sr-only\"&gt;Next&lt;/span&gt;\n            &lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\nconst Homepage = () =&gt;{\n    const dogsData = fetch(...) // Get data from API\n    return (\n        &lt;&gt;\n            &lt;Nav title=\"Royal Homepage\"&gt;&lt;/Nav&gt;\n            &lt;div class=\"container\"&gt;\n                &lt;div class=\"row\"&gt;\n                    &lt;div class=\"col-md-12\"&gt;\n                        &lt;Carousel dogsData={dogsData}&gt;&lt;/Carousel&gt;\n                    &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"2021-2022-summer/introduction-to-react/#getting-started-with-react","title":"Getting Started with React","text":"<p>Getting Started with the app</p> <p>To get started with react, use the following commands</p> <p><code>npx create-react-app my-app</code> where my-app is the name of the folder for where the react app is going to be.</p> <p><code>cd my-app</code></p> <p>Notice that it created a couple of folders. In a couple of sentences:</p> <p><code>src/index.js</code> - injects the user interface in the public/index.html (the front part of the build)</p> <p><code>public</code> - folder containing the static assets as well as the index.html</p> <p><code>package.json</code> - dependencies and scripts for the app</p> <p>type <code>yarn start</code> to run the development version of React (it will run <code>react-scripts</code> start within the node_modules \u2026 so running <code>react-scripts</code> start will not exactly be the same). This will serve up React in a port</p> <p>To be left as a live coding exercise. Live coding demonstration:</p>"},{"location":"2021-2022-summer/introduction-to-react/#demo","title":"Demo","text":"<ul> <li>Passing Array props</li> <li>show \u201crafce\u201d</li> <li>useState when adding new item</li> </ul>"},{"location":"2021-2022-summer/introduction-to-vue/","title":"Introduction to Vue","text":"<p>A Vuetiful Introduction to VueJS</p> <p>Due to time constraints, we had to reuse the previous Winter Materials.</p> <p>As always, see the youtube video playlist</p>"},{"location":"2021-2022-summer/introduction-to-web-development/","title":"Introduction to Web Development Space","text":"<p>Navigating the Deep Dark Space of Web Development</p> <p>This workshop covers a brief overview of the most common tools and technologies used in web development.</p>"},{"location":"2021-2022-summer/introduction-to-web-development/#content","title":"Content","text":"<ul> <li>What and Why Web Development?</li> <li>FAQs about Web Development</li> <li>Basics of Web and Limitation</li> <li>Server-side Applications (Backend)</li> <li>Others<ul> <li>Languages of the Web (the usual)</li> <li>Hosting Stuff</li> <li>CSS Frameworks</li> <li>Developer Tools</li> <li>TypeScript</li> <li>Testing</li> <li>Continuous Integration / Continuous Deployment</li> <li>Virtualisation and Containerisation</li> <li>Browsers</li> <li>Firefox Developer Tools</li> <li>Package Managers</li> <li>Version Control</li> <li>Linters and Formatters</li> <li>Teamwork</li> <li>Roadmaps</li> </ul> </li> <li>Word of Encouragement</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#what-and-why-web-development","title":"What and Why Web Development?","text":""},{"location":"2021-2022-summer/introduction-to-web-development/#what-is-web-development","title":"What is web development?","text":"<ul> <li>Websites development</li> <li>Web applications (client-side and server-side) development</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#why-web-development","title":"Why Web Development ?","text":"<ul> <li>Accessibility and Portability</li> <li>Career and On-demand in job market</li> <li>Huge possibility to combine with other emerging technologies (e.g. IoT, Machine Learning) and industry (e.g. Health, Mining, O&amp;G)</li> </ul> Career in Web Development <p>Source: Insights from Stack Overflow\u2019s 2016 survey of 50,000 developers</p> <p>\"Half of Developers are Web Developers\" </p>"},{"location":"2021-2022-summer/introduction-to-web-development/#faqs-about-web-development","title":"FAQs about Web Development","text":""},{"location":"2021-2022-summer/introduction-to-web-development/#why-code-websites-why-not-use-drag-and-drops-like-wordpress-wix","title":"Why code websites, why not use drag and drops like Wordpress, WIX?","text":"<ul> <li>Content Management System (CMS)</li> <li>Limitations on theme/template used</li> <li>Difficult to extend</li> <li>Cybersecurity</li> </ul> More information <p>CMS are one of the application of web development, but there are plenty more such as - internet of things, custom software for a particular industrial application (eg. using Machine Learning)</p> <p>CMS are usually limited to the template or plugin that you use. If those plugin don't exist, then it limits your productivity very much (difficulty to extend).</p> <p>CMS are usually built to cater for non-technical users. This means that thye become the subject of hackers. Think about a scenario where a hacker was able to find a vulnerability in WordPress, now every other WordPress site will be vulnerable.</p>"},{"location":"2021-2022-summer/introduction-to-web-development/#what-is-the-best-way-to-learn-all-these","title":"What is the best way to learn all these?","text":"<p>In summary, the best way to learn:</p> <ul> <li>Do personal projects (inspiration + motivation)</li> <li>Do team projects (get peer reviews and correct bad practices straight away)</li> <li>Watch Online Courses (to figure out what is available)</li> </ul> More Information <p>To be told that you have to learn \"this, this, and that\" before you could do things is tiresome.</p> <p>Often times, we want to learn to be a developer so that we can create cool things like software where thousands of people can use the app. We don't tend to be a developer for the sake of us needing to watch endless videos on different things.</p>"},{"location":"2021-2022-summer/introduction-to-web-development/#why-does-cfc-not-do-mobile-development-as-much-as-web-development","title":"Why does CFC not do mobile development as much as web development?","text":"<ul> <li>App stores has a developer cost</li> <li>Easier to deal/teach web technologies</li> <li>Accessibility (mobile, sensors, tablets, laptops and PCs)</li> <li>Bigger open-source community</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#if-i-already-know-a-frontend-framework-is-it-better-to-learn-another-frontend-framework-or-to-learn-a-backend-framework","title":"If I already know a frontend framework, is it better to learn another frontend framework or to learn a backend framework?","text":"<ul> <li>It is better to learn a backend framework</li> </ul> Reasoning <p>You want to build skills that complement one another rather than be an alternative.</p> <p>It is much more valuable for you to learn a backend framework because that helps you build a functional app.</p>"},{"location":"2021-2022-summer/introduction-to-web-development/#basics-of-web-and-limitation","title":"Basics of Web and Limitation","text":"HTML <p>What is it?</p> <ul> <li>Hypertext Markup Language</li> <li>Describes the structure of a web page</li> </ul> <p>Limitation</p> <ul> <li>Doesn\u2019t handle repeated content well</li> <li>No variables or calculation</li> </ul> HTML Syntax <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    Hello World!\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> CSS <p>What is it?</p> <ul> <li>Cascading Style Sheets</li> <li>Describes the presentation of a web page</li> </ul> <p>Limitation</p> <ul> <li>Most css is quite similar (Handled by CSS Libraries)</li> <li>Not very dynamic (Handled by CSS Frameworks)</li> </ul> CSS Syntax <pre><code>body {\n    background-color: #f0f0f0;\n    font-family: sans-serif;\n}\n\n.container{\n    width: 80%;\n    margin: 0 auto;\n}\n</code></pre> JS <p>What is it?</p> <ul> <li>JavaScript</li> <li>Used to program complex features on a web page</li> </ul> <p>Limitation</p> <ul> <li>Has the capability to modify the user interface, but becomes really tedious to modify interface (more about this in another workshop)</li> </ul> JS Syntax <pre><code>const bodySelector = document.querySelector('body');\nconst myFunction = () =&gt; {\n    bodySelector.innerHTML = 'Hello World 2!';\n    // Add a container class to space out\n    bodySelector.classList.add('container');\n}\nbodySelector.onclick = myFunction;\n</code></pre>"},{"location":"2021-2022-summer/introduction-to-web-development/#modern-frameworks","title":"Modern Frameworks","text":"<ul> <li>Websites can be much more\u2026 they can be web applications</li> <li>\u201cApp\u201d in a website (client-side rendering)</li> </ul> Modern Frameworks React.js <ul> <li>More mature and used more in industry</li> </ul> Vue.js <ul> <li>Growing fast in popularity and use.</li> </ul> <p>General Information</p> <ul> <li>Both are good to use and learn. </li> <li>Knowledge is transferable between the two frameworks.</li> </ul> Comparison between HTML and JSX <p></p> <p>Highlighted portions are starting chunk of distinct code.</p> HTML <pre><code>&lt;div class=\"row\"&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;devices&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Applications\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Build custom web and mobile applications to engage with your audience\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;web&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;Websites&lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Build new websites or optimise existing pages to improve online\n            visibility\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;storage&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Data Storage\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Design and create databases for efficient information storage and\n            retrieval\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;how_to_reg&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Consulting\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Empower your organisation through technical knowledge and advice\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> JSX <pre><code>import { memo } from 'react'\nimport { Row, Col, Card, CardBody } from 'reactstrap'\nimport services from 'data/services.json'\n\nconst Service = (props: {\nicon: string\ntitle: string\ndescription: string\n}) =&gt; (\n&lt;Card className='text-center border-0 bg-transparent'&gt;\n    &lt;CardBody className='px-0'&gt;\n    &lt;i className='material-icons-sharp md-lg'&gt;{props.icon}&lt;/i&gt;\n    &lt;p className='mt-4 font-weight-bold text-monospace text-larger'&gt;\n        {props.title}\n    &lt;/p&gt;\n    &lt;p className='mb-0'&gt;{props.description}&lt;/p&gt;\n    &lt;/CardBody&gt;\n&lt;/Card&gt;\n)\n\nconst Services = () =&gt; (\n&lt;Row&gt;\n    {services.map(service =&gt; (\n    &lt;Col\n        xs={12}\n        md={6}\n        lg={12 / services.length}\n        className='m-0'\n        key={service.title}\n    &gt;\n        &lt;Service {...service} /&gt;\n    &lt;/Col&gt;\n    ))}\n&lt;/Row&gt;\n)\n\nexport default memo(Services)\n</code></pre>"},{"location":"2021-2022-summer/introduction-to-web-development/#server-side-applications-backend","title":"Server-side Applications (Backend)","text":""},{"location":"2021-2022-summer/introduction-to-web-development/#how-do-devices-communicate","title":"How do devices communicate?","text":"<ul> <li>HTTP Request - Hypertext Transfer Protocol</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#what-do-server-applications-do","title":"What do server applications do?","text":"<ul> <li>Serve frontends (server-side rendering)</li> <li>Web API (Application Programming Interface)<ul> <li>Serve data (usually from a database)</li> <li>Process Request (Sending emails or SMS, Machine Learning)</li> </ul> </li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#databases","title":"Databases","text":"<p>Place to store the data</p> <p>Mongodb</p> <p>Allows for database design to be modified without complex migration or data loss</p> <p>SQL</p> <p>Typically faster and better for large amounts of data or systems that need data consistency and reliability</p>"},{"location":"2021-2022-summer/introduction-to-web-development/#others","title":"Others","text":""},{"location":"2021-2022-summer/introduction-to-web-development/#languages-of-the-web-the-usual","title":"Languages of the Web (the usual)","text":"<ul> <li>Python (Django, Flask)</li> <li>JavaScript (Node.js, Express)</li> <li>Ruby, Go, Rust, C</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#hosting-stuff","title":"Hosting Stuff","text":"<p>Many ways - Own a server - Use a 3<sup>rd</sup> party platform</p>"},{"location":"2021-2022-summer/introduction-to-web-development/#css-frameworks","title":"CSS Frameworks","text":"<p>Frontend (JS)</p> <ul> <li>Vue, React</li> <li>Nuxt.js, Next.js</li> </ul> <p>Frontend (CSS)</p> <ul> <li>MaterialUI, Vuetify</li> <li>Bootstrap</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#developer-tools","title":"Developer Tools","text":""},{"location":"2021-2022-summer/introduction-to-web-development/#typescript","title":"TypeScript","text":"<ul> <li>Type checking is super useful for complex apps</li> <li>Allows for way better javascript developer tooling</li> <li>Can be annoying if you\u2019re new at it</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#testing","title":"Testing","text":"<ul> <li>Selenium, Cypress<ul> <li>End to end automated testing tools</li> </ul> </li> <li>Jest, Mocha, Pytest<ul> <li>Unit testing</li> </ul> </li> <li>Testing is vital to software projects</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#continuous-integration-continuous-deployment","title":"Continuous Integration / Continuous Deployment","text":"<ul> <li>Automated Testing</li> <li>Event-driven scripts</li> <li>E.g. Github Action, Bitbucket Pipelines</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#virtualisation-and-containerisation","title":"Virtualisation and Containerisation","text":"<ul> <li>Allows execution of services in a virtual environment</li> <li>eg. Docker (Containerisation), Vagrant (Virtualisation)</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#browsers","title":"Browsers","text":"<ul> <li>Standard browsers<ul> <li>Google Chrome, Firefox, Edge, etc.</li> </ul> </li> <li>Backwards compatibility<ul> <li>Internet Explorer</li> </ul> </li> <li>Other<ul> <li>Mobile - Responsive</li> <li>Screen readers - Accessibility</li> </ul> </li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#firefox-developer-tools","title":"Firefox Developer Tools","text":"<ul> <li>Page Inspector<ul> <li>Visualise page aspects</li> <li>Grid layout</li> </ul> </li> <li>Web Console<ul> <li><code>console.log(\u201cHello World\u201d)</code></li> </ul> </li> <li>Responsive Design Mode<ul> <li>View from POV of different screen sizes such as mobile, tablets, etc.</li> </ul> </li> </ul> Some more tools <ul> <li>JavaScript Debugger</li> <li>Network Monitor</li> <li>Performance Tools</li> <li>Rulers</li> <li>Colour Pickers Learn more at: https://developer.mozilla.org/en-US/docs/Tools</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#package-managers","title":"Package Managers","text":"<ul> <li>Installs libraries that can be used</li> <li>Also has code shortcuts (e.g. npm run start)</li> </ul> <p>(More about <code>package.json</code> and <code>poetry.toml</code> in the projects and Package Manager Workshop)</p>"},{"location":"2021-2022-summer/introduction-to-web-development/#version-control","title":"Version Control","text":"<ul> <li>Essential for developer teams and complex software development</li> <li>Git</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#linters-and-formatters","title":"Linters and Formatters","text":"<ul> <li>Makes code formatting consistent (following standard)</li> <li>Useful with version controls to avoid pointless change</li> </ul> <p>eg.ESLint, Prettier</p>"},{"location":"2021-2022-summer/introduction-to-web-development/#teamwork","title":"Teamwork","text":"<ul> <li>Many tools out there</li> <li>Used to stop teams from stepping on each others toes</li> <li>Github Issues + Pull Requests</li> </ul>"},{"location":"2021-2022-summer/introduction-to-web-development/#roadmaps","title":"Roadmaps","text":"<p>There's an open-source community that maintains a learning roadmap for developers. See https://roadmap.sh/</p> Frontend Developer <p></p> Backend Developer <p></p> Dev-Ops <p></p>"},{"location":"2021-2022-summer/introduction-to-web-development/#word-of-encouragement","title":"Word of Encouragement","text":"Encouragement from the Tech Lead <p>\"I can admit that this journey of learning will be difficult, and can sometimes be overwhelming and demotivating. Please, if at any point of this project, you feel that you don't know enough, or you're feeling lost, please reach out! We are all in this journey together! Nobody is born talented, skills are honed with determination and willingness to learn.\" </p> <p>\"When I was a first year student entering on the CFC winter project, I didn't feel like I was good enough. I couldn't create a good looking interface, I didn't know how to use npm and all sorts of those things. I was just like many of you! if I gave up just because of all those things I didn't know, of all those self-doubts, then I wouldn't be here today. I admit that I was lucky because I was in CFC, I had connections where I can just ask questions instead of feeling lost of not knowing. So please do leverage that opportunity to reach out\" </p> <p>\"You being in this project not only gives you the opportunity to raise your talents, but you also unlock one of the biggest factor of the growth of your career, and that is the connections with your fellow software engineers.\"</p>"},{"location":"2021-2022-summer/introduction-web-basics/","title":"Introduction to the Web Basics - HTML, CSS &amp; JavaScript","text":"<p>The tools of the web</p> <p>This workshop will introduce you to the basics of HTML, CSS and JavaScript, the fundamental technologies of web development. This is a very introductory workshop, and there is still so much we can learn, but this will be a good place to start.</p>"},{"location":"2021-2022-summer/introduction-web-basics/#content","title":"Content","text":"<ul> <li>Key Web Technologies</li> <li>HTML<ul> <li>Elements</li> <li>Attributes</li> <li>Images</li> <li>Anchors/Hyperlinks</li> <li>Forms</li> <li>Document Object Model</li> </ul> </li> <li>CSS<ul> <li>CSS Format</li> <li>Rules of Selection</li> <li>Document and External Style Sheets</li> <li>Flexboxes</li> </ul> </li> <li>JavaScript<ul> <li>The Basics of JavaScript</li> <li>Arrays</li> <li>Objects</li> <li>Functions</li> <li>Loops</li> </ul> </li> <li>Web App Tutorial</li> </ul>"},{"location":"2021-2022-summer/introduction-web-basics/#key-web-technologies","title":"Key Web Technologies","text":"<p>HTML, CSS and JavaScript each have a different job when it comes to creating web pages.</p>"},{"location":"2021-2022-summer/introduction-web-basics/#what-do-they-do","title":"What do they do?","text":"<ul> <li>HTML: describes the content and structure of the web page</li> <li>CSS: describes the style and appearance of the web page</li> <li>JavaScript: provides funtionality to a web page</li> </ul>"},{"location":"2021-2022-summer/introduction-web-basics/#html","title":"HTML","text":"<p>Hyper Text Markup Language (HTML) is used to structure the webpage. The general structure of a webpage can be seen below.</p> My First HTML Page <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;You see this text on your browser tab!!!&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;!-- this is where the content goes! --&gt;\n        &lt;h1&gt;My First Heading&lt;/h1&gt;\n        &lt;p&gt;This is a paragraph&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"2021-2022-summer/introduction-web-basics/#elements","title":"Elements","text":"<p>A webpage is made of elements, each with their own properties, that contain content to be displayed on the page. Elements are defined by tags, such as <code>h1</code>, <code>div</code> and <code>body</code>. Most elements have an open and close tab. The container and its content, together, are called an element. <pre><code>&lt;h1&gt;This is a header element.&lt;/h1&gt;\n</code></pre></p> <p>The most notable, and probably the tag you will use most, is the <code>&lt;div&gt;</code> tag. It defines a division or section within the HTML document, and is used as a container that holds other elements.</p> The Seperator <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;The Web Dev Fairytale&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;\n            &lt;!-- This div concerns itself with the main heading/title of the story --&gt;\n            &lt;h1&gt;The Dev, the Debugger and the Caffiene Addiction&lt;/h1&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;!-- This div concerns itself with the first chapter it its entirety --&gt;\n            &lt;h1&gt;Chapter 1&lt;/h1&gt;\n            &lt;div&gt;\n                &lt;!-- This div concerns itself with the text of the first chapter --&gt;\n                &lt;!-- section within a section. A subsection! --&gt;\n                &lt;p&gt;Once upon a time, in a castle far, far away...&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;h2&gt;Chapter 2&lt;/h2&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>We will go through the important ones during this workshop, but you can find the full of them here.  </p>"},{"location":"2021-2022-summer/introduction-web-basics/#attributes","title":"Attributes","text":"<p>Most tags have attributes that specify information or change the tag in some way. The most common being <code>class</code> and <code>id</code>.  </p>"},{"location":"2021-2022-summer/introduction-web-basics/#most-common-attributes","title":"Most Common Attributes","text":"<ul> <li><code>class</code>: used to specify one or more class names for a HTML element.<ul> <li>Classes are used to group certain elements in order to give them specific features through CSS and to allow many elements to be manipulated using JavaScript. </li> </ul> </li> <li><code>id</code>: used to specify a unique id for an element and must be unique<ul> <li>The <code>id</code> attribute is assigned to an element so that element can be exclusively specified in the style declaration and JavaScript manipulation</li> </ul> </li> </ul> <p>Below is an example of how attributes are assigned in your code.</p> Elements and their Attributes <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;You see this text on your browser tab!!!&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body style=\"background-color: red\"&gt;\n        &lt;div class=\"bigSection\"&gt;\n            &lt;h1&gt;BIG HEADER!&lt;/h1&gt;\n            &lt;p id=\"first\"&gt;This is the first paragraph of the webpage&lt;/p&gt;\n            &lt;!-- more cool stuff goes here --&gt;\n        &lt;/div&gt;\n        &lt;div class=\"smallSection\"&gt;\n            &lt;h6&gt;small header&lt;/h6&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"2021-2022-summer/introduction-web-basics/#images","title":"Images","text":"<p>Images are added by using the <code>&lt;img&gt;</code> element tag. It can also be used to add gifs!</p> Example <pre><code>&lt;img src=\"https://i.imgur.com/SjZxZza.jpeg\" alt=\"Three Cute Dog Mermaids\"&gt;\n</code></pre> <p> Cute, right?</p>"},{"location":"2021-2022-summer/introduction-web-basics/#image-attributes","title":"Image Attributes","text":"<ul> <li><code>src</code>: specifies the location of the image to be displayed<ul> <li>This can either be a url, as in the example above, or the relative path of an image within the site's directory</li> </ul> </li> <li><code>alt</code>: an optional attribute that contains a text description.<ul> <li>Is useful for accessibility or if the image does not load properly </li> </ul> </li> </ul>"},{"location":"2021-2022-summer/introduction-web-basics/#anchors-and-hyperlinks","title":"Anchors and Hyperlinks","text":"<p>We can add links to other websites, or even to sections within the same page, using the <code>&lt;a&gt;</code> element, known as an anchor.</p> Adding a hyperlink to an HTML page <pre><code>&lt;a href=\"https://codersforcauses.org/\" target=\"_blank\"&gt;Coders for Causes&lt;/a&gt;\n</code></pre> <p>They can be adding added by themself, or within text such as here.</p>"},{"location":"2021-2022-summer/introduction-web-basics/#anchor-attributes","title":"Anchor Attributes","text":"<ul> <li><code>href</code>: specifies the destination to link to<ul> <li>External site: simply include the url you wish to visit</li> <li>Different page within the site: include the path to the new page, usually in the form of <code>\"/.../index.html\"</code></li> <li>Different section on same page: use <code>#name_of_section</code> where <code>name_of_section</code> is the <code>id</code> of the element you wish to go to</li> </ul> </li> <li><code>target</code>: specifies where to open the link<ul> <li>Setting the target attribute to <code>\"_blank\"</code> opens the link in another tab</li> </ul> </li> <li><code>download</code>: specifies that the linked resouces will be downloaded.<ul> <li>Only needs to be included in the declaration of the element</li> <li>Optional: if value of download is set, that value will be the name of the file</li> </ul> </li> </ul> <p>Always be careul when clicking links. You never know when there is something you should not click.</p>"},{"location":"2021-2022-summer/introduction-web-basics/#images-and-hyperlinks","title":"Images and Hyperlinks","text":"<p>Any image, or any element in general, can be turned into a link by enclosing the element within the anchor tabs.</p> Hyperlinked image <pre><code>&lt;a href=\"https://codersforcauses.org/\" target=\"_blank\"&gt;\n    &lt;img src=\"https://www.uwastudentguild.com/assets/clubs/logos/logo---coders-for-causes-1567649329.jpg\"&gt;\n&lt;/a&gt;\n</code></pre> <p> </p>"},{"location":"2021-2022-summer/introduction-web-basics/#forms","title":"Forms","text":"<p>Forms are used to collect user input. They are defined by the <code>&lt;form&gt;</code> tags and usually contain form elements such as <code>&lt;input&gt;</code>, <code>&lt;textbox&gt;</code>, etc.  </p> <p>Inputs can come in many different forms, such as textboxes, radio buttons, checkboxes and drop down menus. Each input field is given a <code>value</code> Once a form is complete and filled out, we need to submit, or POST, it. This can be done through a special input of type <code>submit</code>.  </p> <p>The only required attribute of <code>&lt;form&gt;</code> is <code>action</code>. The <code>action</code> attribute speicifies the URL of the application that is to be called when the Submit button is pressed. If no action, then the attribute takes the value of an empty string and the current page is the destination.</p> Example <pre><code>&lt;p&gt;I like:&lt;/p&gt;\n&lt;form action=\"\"&gt;\n    &lt;input type=\u201dradio\u201d value=\u201dRed\u201d&gt;\n    &lt;input type=\u201dradio\u201d value=\u201dGreen\u201d&gt;\n    &lt;input type=\u201dradio\u201d value=\u201dBlue\u201d&gt;\n    &lt;input type=\u201dsubmit\u201d value=\u201dSubmit\u201d&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"2021-2022-summer/introduction-web-basics/#input-validation","title":"Input Validation","text":"<p>Input validation is a very important aspect to consider when dealing with forms. Remember the famous acronym GIGO, Garbage-in Garbage-Out. To assist you with input validation, HTML forms have in-built validation for different types of data, such as emails, numbers and dates. This can be achieved by changing the input type of a field to the respective data entry type.</p> Baseline input validation with HTML <pre><code>&lt;input type=\"email\" name=\"email\" value=\"Email\"&gt;\n</code></pre>"},{"location":"2021-2022-summer/introduction-web-basics/#document-object-model","title":"Document Object Model","text":"<p>All the elements of a HTML page make up a document tree, called the Document Object Model (DOM).  The DOM is a platform and language-neutral interface that allows programs to dynamically access and update the content, structure and style of the HTML document. Each element in a HTML document is represented by a node on the tree. We can then use things such as JavaScript to access and update the HTML document using the DOM. We will see more of this in the tutorial at the end.</p>"},{"location":"2021-2022-summer/introduction-web-basics/#css","title":"CSS","text":"<p>Cascading Style Sheets (CSS) provides style to the web. It is used to specify the layout and style of markup languages. CSS tells the browser how to display the elements that are written in HTML.</p> <p>We can write the CSS style rules into an element using inline CSS, where the <code>style</code> attribute of an element is modified directly in the HTML.</p> Inline style sheets <pre><code>&lt;body style=\"background-color: red;\"&gt;\n    &lt;!-- rest of body goes here --&gt;\n&lt;/body&gt;\n</code></pre> <p>However, this gets hard to manage and maintain, especially when the number of elements in a document grows, and when we want to change many elements that have the same style. We use document-level style sheets or external style sheets to combat this issue.</p> <p>But first, we must understand how to create these style sheets.</p>"},{"location":"2021-2022-summer/introduction-web-basics/#css-format","title":"CSS Format","text":"<ul> <li>Selector<ul> <li>A value, or list of values, that specify the elements for which the following style will be applied to</li> <li>Rules for specification will be discussed a little later on, see here</li> </ul> </li> <li>Attribute<ul> <li>The attribute/property of an element you wish you change</li> <li>Some example attributes include <code>background-color</code>, <code>font-size</code> and <code>width</code></li> </ul> </li> <li>Effect<ul> <li>The effect is the value you set each attribute to be</li> <li>This includes setting <code>background-color</code> to \"red\", or <code>font-size</code> to \"16px\"</li> </ul> </li> </ul> <p>The following CSS specifies that all <code>img</code> elements are to be centered and have a width of 50 pixels.</p> My First CSS <pre><code>img{\n    /* attribute: effect; */\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    width: 50px;\n}\n</code></pre> How do I know what attributes exist, and what do I change to get my desired effect? <p>There are two simple answers to this question: 1. Google it. Chances are, someone has already tried to do something similar and your solution already exists. 2. Play around. Learn what attributes exist, and how changing thier effects changes their on screen appearance. </p>"},{"location":"2021-2022-summer/introduction-web-basics/#rules-of-selection","title":"Rules of Selection","text":"<p>As mentioned earlier, selectors have a set of rules that allow you to apply styles to certain, or even very specific, groups of elements. These can range selecting elements based on the type of element they are, or what class they are in, to selecting all elements of a certain type that are immediately preceded by an element of another type.</p> Element <p>Element selectors simply apply the defined style to all elements of the same type. <pre><code>body{\n    background-color: red;\n}\n</code></pre></p> Class <p>Class selectors apply the defined style to all elements belonging to that class. They are similar to element selectors, except that the class name is preceded by a <code>.</code> character. <pre><code>.narrow{\n    width: 10%\n}\n</code></pre></p> <p>We can also specify the type of element within a class we wish to apply the style to by including it before the <code>.</code> character. The following code selects all <code>&lt;p&gt;</code> elements that are of the class <code>narrow</code>: <pre><code>p.narrow{\n    width:10%;\n}\n</code></pre></p> id <p>These selectors apply the style to an element based on its <code>id</code>. The <code>id</code> is preceded by <code>#</code> in the selector definition. <pre><code>#bigButton{\n    font-size: 16px;\n}\n</code></pre></p> Psuedo Classes <p>Psuedo classes are styles that apply only when a certian action occurs or a condition is met, and not all the time. Some common selectors include <code>hover</code>, <code>focus</code> and <code>active</code>. They are included after the element, class or id has been specified, and are preceded with a colon <code>:</code>. <pre><code>button:hover{\n    color: red;\n}\n</code></pre></p> <p>The full list of them can be found here.</p> Group <p>To specify a group of elements to apply a style to, simply list the elements, ids or classes delimitted by a comma (<code>,</code>). <pre><code>h1, h2, div{\n    color: red;\n}\n</code></pre></p> Other <p>There exists other selectors that allow you to be more specific as to what elements are to be selected, such as contextual selectors, but we will leave those as self-learning.</p> Contextual Selectors <p>Contextual selectors group elements based on their position and surroundings in the document tree.       Further reading into the topic can be found through searching the web for platforms that teach you all about computer science, such as Geeks for Geeks. </p>"},{"location":"2021-2022-summer/introduction-web-basics/#document-and-external-style-sheets","title":"Document and External Style Sheets","text":"<p>Now that we know what we are doing, let's create some style sheets! Document and External style sheets help us better organise and manage the styles of the document. They are located in one location, so you do not have to go far to find them and change parts of your document. </p>"},{"location":"2021-2022-summer/introduction-web-basics/#document-style-sheets","title":"Document Style Sheets","text":"<p>Document style sheets are located within the <code>&lt;head&gt;</code> of a HTML document, under the <code>&lt;style&gt;</code> tag. They work in the same was as mentioned above. See the below example of how document style sheets are implemented within a HTML page.  </p> Document Style Sheets <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;You see this text on your browser tab!!!&lt;/title&gt;\n        &lt;style&gt;\n            body{\n                background-color: blue;\n            }\n            p{\n                color: red;\n                font-size: 16px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;!-- this is where the content goes! --&gt;\n        &lt;h1&gt;My First Heading&lt;/h1&gt;\n        &lt;p&gt;This is a paragraph&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"2021-2022-summer/introduction-web-basics/#external-style-sheets","title":"External Style Sheets","text":"<p>What happens when our site grows, and the number of HTML pages increases, and suddenly styles have to change, and we have to change every document, but they all have to follow the same styling as the others, and we have to manage that?! Thankfully, we can store our styles in a seperate <code>.css</code> file and then simply reference the stylesheet in our HTML document.</p> styles.css <pre><code>body{\n    background-color: blue;\n}\np{\n    color: red;\n    font-size: 16px;\n}\n</code></pre> <p>Once we have our css file completed, we can reference it in the HTML document, again in the <code>&lt;head&gt;</code>, so that it can apply the styles to our document.</p> Applying my CSS files to my HTML document <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;You see this text on your browser tab!!!&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;!-- this is where the content goes! --&gt;\n        &lt;h1&gt;My First Heading&lt;/h1&gt;\n        &lt;p&gt;This is a paragraph&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"2021-2022-summer/introduction-web-basics/#flexboxes","title":"Flexboxes","text":"<p>Flexboxes are a great way to position your items within a container.  </p> <p>Learning is best done when having fun and getting your hands dirty (metaphorically). Flexbox Froggy is an interactive website that teaches you all about flexboxes, one step at a time. Your aim is to allign all the frogs to their corresponding lilypads. It is a much better learning tool than sitting and reading about some code I wrote.  </p>"},{"location":"2021-2022-summer/introduction-web-basics/#javascript","title":"JavaScript","text":"<p>JavaScript, also known as JS, gives a web page fucntionality and reactiveness. It allows the user to interact with the web page, and for us to make it to do things that we want it to do. Similar to CSS, all your JS can be implemented into a HTML document by encapsulating it in the <code>&lt;script&gt;</code> tag within the <code>&lt;head&gt;</code> of the document, or even <code>&lt;body&gt;</code> in this case. However, we will be sticking to having our JS stored in external files for ease of managability. See the below example of how to add a script file to your page. To add many files, simply add another <code>&lt;script&gt;</code> element and reference the other file.</p> Adding JavaScript to my HTML document <pre><code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"2021-2022-summer/introduction-web-basics/#the-basics-of-javascript","title":"The Basics of JavaScript","text":"<p>We shall discuss the basic syntax of JS, such as variables and functions, just to get you started. Feel free to do some of your own learning, too. There is a lot of cool things you can do and shortcuts you can use when you dive deeper into JavaScript, such as the ternary operator, but we will leave these for now.</p>"},{"location":"2021-2022-summer/introduction-web-basics/#variables","title":"Variables","text":"<p>Variables are named memory locations that store data. To define a variable, we can use three different keywords, each giving the variable special properties.</p>"},{"location":"2021-2022-summer/introduction-web-basics/#variable-declaration","title":"Variable Declaration","text":"<ul> <li><code>var</code><ul> <li>allows the variable to be redeclared later on in the program</li> <li>gives the variable a global scope, meaning they can be accessed anywhere within the file</li> </ul> </li> <li><code>let</code><ul> <li>once a variable has been declared using <code>let</code>, it cannot be redeclared. It's value can still change, however.</li> <li>gives the variable block scope, meaning it can only be accessed within the block of code that it has been declared in. For example, if I declare a variable using the <code>let</code> key word, I cannot access it outside of the function.</li> </ul> </li> <li><code>const</code><ul> <li>Once the variable has been declared and assigned, it cannot be redeclared and the value never changes. It stays constant, sort of.</li> <li>It, too, gives the variable block scope.</li> </ul> </li> </ul> <p>For a full explanation on variable declaration in JS, check out w3schools' page on it. </p> <p>Variables can hold different data types, such as numbers, strings, objects, functions and arrays, but JS will cover the type identification for you.</p>"},{"location":"2021-2022-summer/introduction-web-basics/#datatypes","title":"Datatypes","text":"<ul> <li>There are two groups of data types in JS: primitives and structural.</li> <li>A primitive is data that is not an object and has no methods. There are seven primitive data types:  <ul> <li>String, Number, BigInt, undefined, null and symbol   </li> </ul> </li> <li>A structural data type is one where the data is in the form of an object, and that object has its own methods. The main structural data types are:  <ul> <li>Objects and Functions </li> </ul> </li> </ul>"},{"location":"2021-2022-summer/introduction-web-basics/#math-and-logic","title":"Math and Logic","text":"<p>Math and logic works similar in JS to other programming languages.  </p>"},{"location":"2021-2022-summer/introduction-web-basics/#math","title":"Math","text":"<ul> <li><code>+</code>, <code>-</code>: addition and subtraction</li> <li><code>*</code>, <code>/</code>: multiplication and division, respectively.</li> <li><code>%</code>: modulo operator. Returns the remainder left over after division.<ul> <li>For example, <code>8 % 3</code> returns 2.</li> </ul> </li> <li><code>**</code>: exponent (x to the power of y)<ul> <li><code>base ** power</code></li> </ul> </li> </ul>"},{"location":"2021-2022-summer/introduction-web-basics/#logic","title":"Logic","text":"<ul> <li><code>&amp;&amp;</code>: AND operation</li> <li><code>||</code>: OR operation</li> <li><code>!</code>: NOT operation</li> <li><code>&gt;</code>/<code>&gt;=</code>: greater than/greater than or equal to</li> <li><code>&lt;</code>/<code>&lt;=</code>: less than/less than or equal to</li> <li><code>==</code>: equal to</li> <li><code>===</code>: exactly equal to<ul> <li>Works in a similar way to <code>==</code>, except it also checks that the datatype is the same</li> </ul> </li> </ul> Difference between == and === <pre><code>console.log(\"2\" == 2);  /* true */\nconsole.log(\"2\" === 2); /* false */\n</code></pre>"},{"location":"2021-2022-summer/introduction-web-basics/#arrays","title":"Arrays","text":"<p>Arrays are an ordered list of values. They can hold values of many datatypes. Their index starts at 0. <pre><code>let myArray = [\"a\", \"b\", \"c\", 1, 2 ,3, {name: \"Jared\", age: 19, canRead: false}]\nmyArray[0] // returns \"a\"\nmyArray[4] // returns 2\n</code></pre></p>"},{"location":"2021-2022-summer/introduction-web-basics/#objects","title":"Objects","text":"<p>Objects are variables that can hold more than one value. One can be seen in the previous example in Arrays. The different values of an object are called keys. The keys can hold regular primitive values, such as numbers or strings, or can hold other objects, such as functions. Think of Objects as a list of key/value pairs.  </p> <p>To access a key's value within an object, you must first reference the object in question, then insert a <code>.</code> folllowed by the key you wish to get.</p> Objects in JavaScript <pre><code>let person = {\n    name: \"Jared\",\n    age: 19,\n    canRead: false\n}\nconsole.log(person.age) // outputs 19\n</code></pre>"},{"location":"2021-2022-summer/introduction-web-basics/#functions","title":"Functions","text":"<p>Functions are blocks of code designed to execute a particular task. In JS, the syntax for defining a function is as follows:</p> Functions in JavaScript <pre><code>function func_name(parameter1, parameter2, ...){\n    // your code goes here (optional, but highly recommended)\n}\n</code></pre> <p>Functions can be called or stored in variables.</p> Calling and Storing Functions <pre><code>function hello_world(){\n    console.log(\"Hello, world!\")\n}\n\n// Calling the function\nhelloWorld()\n\n// Storing the function in a variable\nconst func_name = function (param1, param2){\n    // do stuff here\n}\n</code></pre> <p>Functions can return a value (after calculation, etc) or simply perform work on existing data/variables. Functions that do not return anything are normally called procedures.</p>"},{"location":"2021-2022-summer/introduction-web-basics/#arrow-functions","title":"Arrow Functions","text":"<p>Arrow functions are just a compact way of writing normal functions. They work by removing the <code>function</code> key word, and even the <code>return</code> keyword in some cases. Arrows functions lead with their parameters, usually enclosed in normal brackets. An arrow <code>=&gt;</code> then follows, preceding the actual block of code to be executed.</p> Arrow Functions: Example 1 <pre><code>// Traditional function\nfunction addXY (x, y){\n    return x + y;\n}\n\n// Arrow function\nlet addXY = (x, y) =&gt; x + y;\n</code></pre> <p>In single-lined functions, such as the one above, both the { braces } and the <code>return</code> can be omitted. However, when there are extra lines of processing, both must be included.  </p> Arrow Functions: Example 2 <pre><code>// Traditional\nfunction add10(x, y){\n    x += 10\n    y += 10\n    return x + y;\n}\n\n// Arrow function\nlet add10 = (x, y) =&gt; {\n    x += 10\n    y += 10\n    return x + y;\n}\n</code></pre>"},{"location":"2021-2022-summer/introduction-web-basics/#loops","title":"Loops","text":"For <p>For loops repeat until a condition is met. That condition is defined in the for loop. For loops have the following structure:</p> For Loops <pre><code>/*\nfor(int i = start; condition; increment){\n    // code here\n}\n*/\n\n// Loop 10 times\nfor(int i = 0; i &lt; 10; i++){\n    console.log(i)\n}\n// Output: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n</code></pre> For-in <p>For-in loops iterate over the indexes of data in an iterable object, such as an array.  </p> For-in Loops <pre><code>let myArray = [2, 4, 6]\nfor(let j in myArray){\n    console.log(j)\n}\n// Output: 0, 1, 2\n</code></pre> For-of <p>For-of loops iterate over the data in the iterable object.  </p> For-of Loops <pre><code>let myArray = [2, 4, 6]\nfor(let k of myArray){\n    console.log(j)\n}\n// Output: 2, 4, 6\n</code></pre> While <p>While loops iterate while a condition is true. They are called a \"pre-test\" loop, where the condition is tested before the loop can run. The condition is included in the brackets.</p> While Loops <pre><code>let b = 0\nwhile(b &lt; 3){\n    console.log(\"Bon\")\n    b++\n}\n// Output: \"Bon\\n Bon\\n Bon\\n\"\n</code></pre> Do-while <p>Do-while loops are similar to while loops, except that they let the block of code run once before testing the condition. They are known as \"post-test\" loops, and the loop is guaranteed to execute at least once.  </p> Do-while Loops <pre><code>let b = 0\ndo {\n    console.log(\"Bon\")\n    b++\n} while(b &gt; 10)\n// Output: \"Bon\\n\"\n</code></pre> <p>Loops can be broken or stopped using the <code>break</code> or <code>continue</code> statements.</p>"},{"location":"2021-2022-summer/introduction-web-basics/#breakin-out","title":"Breakin' out","text":"<ul> <li><code>break</code>: execution leaves the loop completely and continues on with the next lines of code</li> <li><code>continue</code>: disregards the rest of the code in the loop block and moves on to the next item in the loop</li> </ul>"},{"location":"2021-2022-summer/introduction-web-basics/#creating-a-pokemon-api-webapp","title":"Creating a Pokemon API Webapp","text":"<p>Now that we know a little bit about the tools of the web, let's build a simple web app that uses the skills we have learnt in this workshop, as well as some other skills we will learn along the way, to create an app that can do something cool. </p> <p>For this tutorial, we will pay homage to the recent releases of Pokemon Brilliant Diamond and Shining Pearl, of which I have spent an embarrassing number of hours on since they came out about a week ago, and create a web app that uses the PokeAPI to display images and information about any Pokemon we want.  </p> <p>Watch the tutorial on our YouTube channel by clicking the link, here, or the image below!</p> <p></p> <p>Back to Top</p>"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/","title":"MVC-MVMM Architecture and Communications","text":"<p>Separate the concerns with Design Patterns!</p>"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#what-is-mvcmvvm-architecture","title":"What is MVC/MVVM Architecture?","text":"<p>MVC (Model-View-Controller)</p> <ul> <li>Model \u2013 data representation layer (how app communicates to db \u2013 Raw or ORM)</li> <li>View \u2013 interface representation (with HTML, CSS and JS)</li> <li>Controller \u2013 request relays (processes HTTP requests)</li> </ul> MVC <p></p> <p>MVVM (Model-ViewModel-View)</p> <p>ViewModel \u2013 data-binding relays (processes the HTTP requests)</p> MVVM <p></p> Some inaccuracy <p>I acknowledge that this may not be correct. If you search MVC/MVMM, you will see lots of conflicting details. This portion of the slide is explained to make frontend-backend integration easier to explain.</p>"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#examples-of-technologies-with-the-architecture","title":"Examples of Technologies with the Architecture","text":"MVC - Django MVVM - Django + React MVC - Flask MVVM - Flask + React MVC - Express MVVM - Express + React"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#why-is-software-architecture-important","title":"Why is software architecture important?","text":"<p>Architecture shows how an entire software works in a high-level.</p> <p>Important for:</p> <ul> <li>maintainability and extensibility</li> <li>seperation of concerns</li> <li>choosing different pieces of the stack</li> </ul> Just some architecture diagrams <p> </p>"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#how-do-frontend-communicate-with-backend","title":"How do frontend communicate with backend?","text":"<p>Via HTTP Requests responds with:</p> <ul> <li>HTML, CSS, JS</li> <li>JSON/XML</li> </ul>"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#server-side-rendering","title":"Server-side Rendering","text":"<p>Via - HTML, CSS, JS</p> Data Flow <p></p>"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#client-side-rendering-and-ajax","title":"Client-side Rendering and AJAX","text":"<p>Via HTTP Requests responds with: - blank HTML with JS (at first) - JSON/XML</p> Data Flow <p></p> CRUD to HTTP Verb Matching for JSON standard communications with REST-APIs <p>Matches HTTP verbs with action</p> <p></p> <p>AJAX \u2013 Asynchronous JavaScript and ~~XML~~ JSON</p> JSON are strings <p>JSON (JavaScript Object Notation) Note: JSONs are String... you have to serialise JSON to become an object</p> <p></p>"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#demo-react-to-integrate-with-django","title":"Demo - React to integrate with Django","text":"<p>This follows up the demo with React to consume a standard REST-API Django Todo App demonstrated in the previous workshop.</p>"},{"location":"2021-2022-summer/mvc-mvmm-architecture-and-communications/#other-information","title":"Other Information","text":"<ul> <li>Traversy Media MVC </li> <li>React Query </li> <li>Axios (a better Fetch?) Travery Media</li> <li>Async/Await JavaScript </li> </ul>"},{"location":"2021-2022-summer/package-managers/","title":"Package Managers","text":"<p>Unlock the power of open source</p>"},{"location":"2021-2022-summer/package-managers/#what-are-package-managers","title":"What are package managers?","text":"<ul> <li>Developer tools that allows access to libraries</li> </ul> Examples <ul> <li>JavaScript (NPM/Yarn)</li> <li>Python(Pip/Poetry)</li> </ul> Diagram of the Package Manager Data Flow Modern Infrastructure Dependency"},{"location":"2021-2022-summer/package-managers/#examples-of-actual-libraries-and-their-dependencies","title":"Examples of Actual Libraries and their dependencies","text":"<p>See this tool to visualise dependency.</p> MUI Dependency <p></p> Express Dependency <p></p>"},{"location":"2021-2022-summer/package-managers/#install-package-managers","title":"Install Package Managers","text":"<ul> <li>NPM Download | Node.js (nodejs.org)</li> <li> <p>Yarn Installation | Yarn (yarnpkg.com)</p> </li> <li> <p>Pip Download Python | Python.org</p> </li> <li>Poetry Poetry - Python dependency management and packaging made easy (python-poetry.org) </li> </ul>"},{"location":"2021-2022-summer/package-managers/#actual-examples-of-real-world-projects-and-their-dependencies","title":"Actual Examples of Real-World Projects and their dependencies","text":"Foodbank <code>package.json</code> <pre><code>{\n    \"name\": \"foodbank\", // (1)\n    \"version\": \"0.1.0\",\n    \"private\": true,\n    \"browserslist\": [\n        \"&gt;0.3%\",\n        \"not ie 11\",\n        \"not dead\",\n        \"not op_mini all\"\n    ],\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/codersforcauses/foodbank.git\"\n    },\n    \"author\": \"Coders for Causes\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/codersforcauses/foodbank/issues\"\n    },\n    \"homepage\": \"https://github.com/codersforcauses/foodbank#readme\",\n    \"scripts\": { // (2)\n        \"dev\": \"next dev\",\n        \"build\": \"next build\",\n        \"start\": \"next start\",\n        \"lint\": \"next lint\",\n        \"prepare\": \"husky install\"\n    },\n    \"dependencies\": { // (3)\n        \"@headlessui/react\": \"1.4.2\",\n        \"critters\": \"0.0.15\",\n        \"keen-slider\": \"6.0.5\",\n        \"next\": \"12.0.4\",\n        \"react\": \"17.0.2\",\n        \"react-dom\": \"17.0.2\",\n        \"react-hook-form\": \"7.20.5\"\n    },\n    \"devDependencies\": { // (4)\n        \"@types/react\": \"17.0.37\",\n        \"autoprefixer\": \"10.4.0\",\n        \"eslint\": \"7.29.0\",\n        \"eslint-config-next\": \"12.0.4\",\n        \"eslint-config-prettier\": \"8.3.0\",\n        \"eslint-plugin-jsx-a11y\": \"6.5.1\",\n        \"eslint-plugin-prettier\": \"4.0.0\",\n        \"husky\": \"7.0.4\",\n        \"postcss\": \"8.4.4\",\n        \"prettier\": \"2.5.0\",\n        \"tailwindcss\": \"2.2.19\",\n        \"typescript\": \"4.5.2\"\n    }\n}\n</code></pre> <ol> <li> <p>Package Headers and Meta Information (line 2-20)</p> <p>Contains some meta information about the project. Eg. used for publication in npmjs.org</p> </li> <li> <p>Scripts</p> <p>Alias of commands to run using the modules in the dependency <pre><code>yarn start // yarn [script-name]\n</code></pre></p> <p>or</p> <pre><code>npm run start // npm run [script-name]\n</code></pre> </li> <li> <p>Dependencies</p> <p>Libraries that are used in the project</p> <p>To add a dependency, run <pre><code>yarn add formik // yarn add [library-name]\n</code></pre></p> <p>or </p> <pre><code>npm install formik // npm install [library-name]\n</code></pre> </li> <li> <p>Dev-Dependencies</p> <p>Libraries that are used in the project on development environments Typically: linters, and testers</p> <pre><code>yarn add -D prettier // yarn add -D [library-name]\n</code></pre> <p>or</p> <pre><code>npm install -D prettier // npm install -D [library-name]\n</code></pre> </li> </ol>"},{"location":"2021-2022-summer/package-managers/#lockfiles","title":"Lockfiles","text":"<p>It locks the dependencies and sub dependencies (dependency of dependency) of your application the last time it installed correctly.</p> <p>Files: - <code>package-lock.json</code> - <code>Yarn-lock.json</code> - <code>Poetry.lock</code></p> <p>E.g. wais/yarn.lock at main \u00b7 codersforcauses/wais (github.com)</p>"},{"location":"2021-2022-summer/package-managers/#when-to-install-globally","title":"When to install globally?","text":"<p>Whenever installing package, it is recommended to install it for a specific project The only thing you should really install globally are CLI tools. Even then, you have npx</p> <p><pre><code>yarn global add [dependency]\n</code></pre> or <pre><code>npm install \u2013g [dependency]\n</code></pre></p> Firebase CLI <p></p> <pre><code>npm install -g firebase-tools\n</code></pre>"},{"location":"2021-2022-summer/package-managers/#demo-material-ui","title":"Demo - Material UI","text":"<ol> <li>Create a react-app <code>npx create-react-app mui-demo</code></li> <li>Move directory <code>cd mui-demo</code></li> <li>Install react-spring <code>yarn add @mui/material @mui/icons-material</code></li> <li>Start the app <code>yarn start</code></li> <li>Show Bottom Navigation <pre><code>import * as React from 'react';\nimport BottomNavigation from '@mui/material/BottomNavigation';\nimport BottomNavigationAction from '@mui/material/BottomNavigationAction';\nimport FolderIcon from '@mui/icons-material/Folder';\nimport RestoreIcon from '@mui/icons-material/Restore';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\n\nexport default function LabelBottomNavigation() {\n  const [value, setValue] = React.useState('recents');\n\n  const handleChange = (event, newValue) =&gt; {\n    setValue(newValue);\n  };\n\n  return (\n    &lt;BottomNavigation sx={{ width: 500 }} value={value} onChange={handleChange}&gt;\n      &lt;BottomNavigationAction\n        label=\"Recents\"\n        value=\"recents\"\n        icon={&lt;RestoreIcon /&gt;}\n      /&gt;\n      &lt;BottomNavigationAction\n        label=\"Favorites\"\n        value=\"favorites\"\n        icon={&lt;FavoriteIcon /&gt;}\n      /&gt;\n      &lt;BottomNavigationAction\n        label=\"Nearby\"\n        value=\"nearby\"\n        icon={&lt;LocationOnIcon /&gt;}\n      /&gt;\n      &lt;BottomNavigationAction label=\"Folder\" value=\"folder\" icon={&lt;FolderIcon /&gt;} /&gt;\n    &lt;/BottomNavigation&gt;\n  );\n}\n</code></pre></li> </ol>"},{"location":"2021-2022-summer/practical-software-engineering-practices/","title":"Practical Software Engineering Practices","text":"<p>How software engineer works collaboratively!</p>"},{"location":"2021-2022-summer/practical-software-engineering-practices/#how-do-software-engineers-work","title":"How do software engineers work?","text":"<p>They use issue/ticket management system to track their work.</p> Github Issues and Jira <p>The examples are Github Issues and Jira.</p> <p> </p> <p>Listing of issues can be displayed in kanban boards.</p> Kanban Boards <p> </p>"},{"location":"2021-2022-summer/practical-software-engineering-practices/#why-do-software-engineers-work-like-this","title":"Why do Software Engineers Work like this?","text":"Scrums <p>One example of \"agile\" ways of working and it looks like this. </p>"},{"location":"2021-2022-summer/practical-software-engineering-practices/#what-is-git","title":"What is Git?","text":"<p>Git is a</p> <ul> <li>version control system</li> <li>tools for coordinating work for different changes</li> </ul>"},{"location":"2021-2022-summer/practical-software-engineering-practices/#main-parts-of-git","title":"Main Parts of Git","text":"<p>Main Parts of git:</p> <ul> <li>Change Node (commit node)</li> <li>Branch</li> </ul> <p></p>"},{"location":"2021-2022-summer/practical-software-engineering-practices/#git-different-versions","title":"Git Different Versions","text":"Software Versions <p>Nodes - Representation of a change (commits + merge)</p> <p>Main/Master: - Branch usually as production or deployed</p> <p>Development Branch - Branch used for development Used for compiling features for a release</p> <p>Feature Branch - Branch used for development for a particular issue</p>"},{"location":"2021-2022-summer/practical-software-engineering-practices/#github-and-code-repositories","title":"GitHub and Code Repositories","text":"<p>GitHub - Place to hold code repositories</p> <p>Repositories - Place where codes are stored with different versions</p>"},{"location":"2021-2022-summer/practical-software-engineering-practices/#interactive-workshop-time","title":"INTERACTIVE WORKSHOP TIME !!!!","text":"<ol> <li>Do the following from codersforcauses/software-engineering-practices-demo: Demonstration of software engineering practices (github.com):</li> <li>Look at the GitHub issues</li> <li>Assign yourself an issue</li> <li>Clone repo with <code>git clone https://github.com/codersforcauses/software-engineering-practices-demo-2021-summer.git</code></li> <li>Create a branch with the following format s{Issue Number}-{Issue Name}. <code>git checkout -b s{Issue Number}-{Issue Name}</code></li> <li>Create the change to satisfy or complete the github issue</li> <li>Commit (package) the change <code>git commit -m \"{insert message here}\"</code> and push git push.</li> <li>Create a pull request and request for a reviewer from CFC peeps</li> </ol>"},{"location":"2021-2022-summer/practical-software-engineering-practices/#other-resources","title":"Other Resources","text":"<ul> <li>Git and Github</li> </ul>"},{"location":"2021-2022-summer/project-and-workshop-structure/","title":"Project and Workshop Structure","text":"<p>A mission to empower the next-generation of software engineers and delivering value to the community!</p>"},{"location":"2021-2022-summer/project-and-workshop-structure/#ways-of-working","title":"Ways of Working","text":"<ul> <li>(November 27 to February 24 excluding December 19 to January 4) = ~ 11 weeks for project</li> <li> <p>2 meetups every week (1 online mid-week, 1 on Saturday)</p> </li> <li> <p>Each Saturday meeting will have ~2-3 hour workshops. Some workshops will take the whole hour, while some workshops will take 15-30 minutes.</p> </li> <li>The other time allocated is for working on project with supervision</li> <li>Most workshops will be introductory</li> </ul>"},{"location":"2021-2022-summer/project-and-workshop-structure/#workshop-schedule","title":"Workshop Schedule","text":"<p>The following are rough guideline to the workshop schedules. All workshops are optional, you can attend any of them even if you are not on the specific team dedicated to it (be mindful that there may be time conflicts if it is with the other team).</p> Most Workshops are introductory <p>They will usually cover the following idea:</p> <ul> <li>why is it useful to learn it</li> <li>what are the different aspects of it that you will need to learn</li> </ul> <p>You will still have to put in the effort to learn it thoroughly.</p> Date Workshop Name Recommended Team to attend Duration Saturday, 27 November 2021 Introduction to CFC + Web Development Space All ~1 hour Wednesday, 1 December 2021 Introduction to Web Basics All ~1-1.5 hour Saturday, 4 December 2021 Practical Software Engineering Practices All ~1 hour Saturday, 4 December 2021 Introduction to Frontend Frameworks All ~45 minutes - 1 hour Saturday, 4 December 2021 Introduction to React Foodbank ~45 minutes - 1 hour Saturday, 4 December 2021 Introduction to Vue WAIS ~45 minutes - 1 hour Saturday, 11 December 2021 Introduction to Django WAIS ~1 - 1.5 hours Saturday, 11 December 2021 Introduction to Typescript Foodbank ~30 minutes Saturday, 18 December 2021 MVC Codebase Structure / Frontend-Backend Integration All ~1-1.5 hour Saturday, 18 December 2021 Typical Codebase Structure All ~30 minutes - 1 hour Saturday, 18 December 2021 Package Manager - JavaScript and Python All ~1 hour Saturday, 8 January 2022 Introduction to Docker All ~1 hour Saturday, 8 January 2022 Introduction to Unit Testing and CI/CD All ~1 hour Workshops after January 8, 2022 <p>The workshops right here are still being decided upon. If you have an idea for a workshop that you would like to attend, please let us know either on Discord or at Github.</p> <p>The one that are on consideration are:</p> <ul> <li>Deployment on Heroku, and Vercel</li> <li>Introduction to End-to-End Testing with Cypress</li> <li>Gitkraken Workshop</li> <li>Introduction to Prototyping with Figma</li> <li>Introduction to Linux and Command-Line Scripting - Bash</li> <li>Increase your productivity in VsCode</li> <li>How to write good documentation</li> <li>Honing your detective skills with Browser Developer Tools</li> </ul>"},{"location":"2021-2022-summer/project-and-workshop-structure/#who-are-you","title":"Who are you?","text":"<p>Before continuing further, answer the following:</p> <ul> <li>What\u2019s your name?</li> <li>What\u2019s your background?</li> <li>Why you\u2019re here?</li> </ul> Who are the Coders for Causes <p>The Coders for Causes is an organisation that aims to empower the next-generation of software engineers while delivering value to the wider-community by helping charities and not-for-profit organisations.</p>"},{"location":"2021-2022-summer/setup/","title":"Setup","text":"<p>This contains everything you need to know about getting setup.</p>"},{"location":"2021-2022-summer/setup/#coders-for-causes-project-team","title":"Coders for Causes Project Team","text":"<p>The following access you will need to have when working on the project</p> <ul> <li>Coders for Causes Official Project Organisation<ul> <li>This includes the project repositories and CFC related long-term materials</li> </ul> </li> <li>Coders for Causes Learning Organisation<ul> <li>This includes the templates for learning as well as the demo workshops</li> </ul> </li> <li>Discord Channel for Project and exclusive Workshops</li> </ul>"},{"location":"2021-2022-summer/setup/#developer-tools","title":"Developer Tools","text":"<p>These are the following tools that you need:</p> <ul> <li>Code Editor: VS Code</li> <li>Version Control: Git</li> <li>Interpreter: Nodejs</li> <li>Custom Package Manager: Yarn</li> <li>Interpreter (for WAIS): Python</li> <li>Containerisation (for WAIS): Docker</li> </ul> Optional Tools <p>These are tools that you may like to use, but are not required:</p> <ul> <li>GUI for Git: Gitkraken / GitHub Desktop</li> </ul> <p>After these installation, seek at the OS-specific tools.</p>"},{"location":"2021-2022-summer/setup/#windows","title":"Windows","text":"<p>These are tools specifically for Windows:</p> <ul> <li>Virtual Machine: Vbox<ul> <li>You need this if you have some trouble with windows</li> </ul> </li> </ul> Warning for Windows Users <p>Legit, among all the OS, you will have the most frustrating time as a developer in windows (unless you're doing C#) </p> Wanna have a better developer experience <p>You have a couple of options:</p> <ul> <li>Using WSL</li> <li>Dual Booting</li> <li>Virtual Machines</li> </ul> <p>The recommended OS to try is Ubuntu-based Linux. My personal favourite is PopOS.</p>"},{"location":"2021-2022-summer/setup/#linux","title":"Linux","text":"<p>These are installation specific to Linux:</p> <ul> <li> <p>Docker Post Installation Steps</p> <ul> <li>Lots of users forget this documentation</li> <li>This step is necessary if you intend to use the visual studio code docker extension</li> <li>This will also allow you to run docker without the \"sudo\" command</li> </ul> </li> <li> <p>Docker Compose Installation</p> <ul> <li>Docker compose is not installed by default with Linux installations of Docker</li> <li>Please follow this documentation</li> </ul> </li> <li> <p>Node installation using Node Version Manager (NVM)</p> <ul> <li>Installation steps can be found here</li> <li>NVM is useful when dealing with multiple environments that require different versions of Node</li> <li>It allows you to switch between different Node versions and environments easily</li> <li>This tool is also available if you are using Windows Subsystem for Linux</li> </ul> </li> </ul>"},{"location":"2021-2022-summer/typical-codebase-structure/","title":"Typical Codebase Structure","text":"<p>Codebase Jigsaw: How it all fits together!</p> Info <p>This presentation is only intended to be a brief overview of the typical codebase structure</p> <p>If you want more information about anything mentioned feel free to reach out to CFC committee and project helpers!</p>"},{"location":"2021-2022-summer/typical-codebase-structure/#overview-and-importance","title":"Overview and Importance","text":"<ul> <li>Most codebase will follow almost the same pattern (if they change, it will only change with little quirks)</li> <li>Structure helps every software engineer understand codebase and where to put it certain codes  (better code readability = better collaboration = better profit!)</li> </ul> Profit"},{"location":"2021-2022-summer/typical-codebase-structure/#frontend","title":"Frontend","text":"<p>Example: About Us - Coders for Causes Website</p> <p></p>"},{"location":"2021-2022-summer/typical-codebase-structure/#different-folders-and-purpose","title":"Different Folders and Purpose","text":""},{"location":"2021-2022-summer/typical-codebase-structure/#components","title":"Components","text":"<p>Components are individual parts/pieces of user interfaces</p> <p></p>"},{"location":"2021-2022-summer/typical-codebase-structure/#pages","title":"Pages","text":"<p>Pages are the direct components that are related specific to a route or URL</p> <p></p>"},{"location":"2021-2022-summer/typical-codebase-structure/#public-assets","title":"Public / Assets","text":"<p>Assets are usually elements that are referenced E.g. Images, Videos</p> <p></p>"},{"location":"2021-2022-summer/typical-codebase-structure/#utilities-helpers","title":"Utilities / Helpers","text":"<p>Pieces of code that are used as utilities or helpers to other codes</p> <p></p>"},{"location":"2021-2022-summer/typical-codebase-structure/#tests","title":"Tests","text":"<ul> <li>Scripts that tests that code works</li> <li>Usually E2E frontend</li> </ul>"},{"location":"2021-2022-summer/typical-codebase-structure/#comparison-with-two-codebases","title":"Comparison with Two Codebases","text":"<p>Slight difference, look at software documentation or ask other engineers</p> <p></p>"},{"location":"2021-2022-summer/typical-codebase-structure/#backend","title":"Backend","text":"Context - Role and Subject <p>In these example, when I mean \"role\", I mean the general role of file. \"subject\" means the feature or group functionality</p>"},{"location":"2021-2022-summer/typical-codebase-structure/#method-of-organisation","title":"Method of Organisation","text":""},{"location":"2021-2022-summer/typical-codebase-structure/#subject-oriented-driven-structure","title":"Subject-Oriented Driven Structure","text":"<p>As it can be seen here, both different folders will have the same filenames based on its role. App grows, those files can itself become folders as well.</p> <p>Example: erdem/DRF-TDD-example: An example Django REST framework project for test driven development. (github.com)</p> <p></p>"},{"location":"2021-2022-summer/typical-codebase-structure/#role-oriented-driven-structure","title":"Role-Oriented Driven Structure","text":"<p>As it can be seen here, both both different folders will have the same filenames based on its subject</p> <p>Example: our-lab-training/olt-backend: Our Lab Training - Feathers Backend (github.com)</p> <p></p>"},{"location":"2021-2022-summer/typical-codebase-structure/#different-folders-and-purpose_1","title":"Different Folders and Purpose","text":""},{"location":"2021-2022-summer/typical-codebase-structure/#models-database-connection","title":"Models / Database Connection","text":"<p>Object-Relational Model (ORM). Links the database into your app into objects</p> <p></p>"},{"location":"2021-2022-summer/typical-codebase-structure/#routing","title":"Routing","text":"<p>Determines the rules for the URL pattern </p> <p></p>"},{"location":"2021-2022-summer/typical-codebase-structure/#views","title":"Views","text":"<ul> <li>In REST API, Views are your main \u201cview\u201d of the API</li> </ul>"},{"location":"2021-2022-summer/typical-codebase-structure/#tests_1","title":"Tests","text":"<ul> <li>Contains unit testing (+ possibly e2e testing)</li> <li>Most common candidate for transitioning from file to a folder containing more files</li> </ul>"},{"location":"2021-2022-summer/typical-codebase-structure/#other-resources","title":"Other Resources","text":"<ul> <li>Writing your first Django app, part 1 | Django documentation | Django (djangoproject.com)</li> <li>File Structure \u2013 React (reactjs.org)</li> <li>Best practice for Django project working directory structure - Stack Overflow</li> </ul>"},{"location":"2021-winter/","title":"Coders for Causes 2021 Winter Workshops","text":"<p>This project period there are two main projects:</p> <ul> <li>Foodbank</li> <li>WAIS</li> </ul> <p>If you have not before seen the existing progress, see this video.</p> <p>These two projects have their own corresponding technology stacks being used, hence will dictate the workshops that will be held.</p>"},{"location":"2021-winter/#project-technology","title":"Project Technology","text":""},{"location":"2021-winter/#foodbank","title":"Foodbank","text":"<p>Foodbank is mainly with frontend with React + TailwindCSS with Firebase and Notion CMS.</p>"},{"location":"2021-winter/#wais","title":"WAIS","text":"<p>WAIS is a full-stack application with Vue and Django. It uses Docker containerisation for both development (and production in the future).</p>"},{"location":"2021-winter/#where-are-the-materials","title":"Where are the materials?","text":"<p>This website has only been created prior to 2021/22 Summer workshops. However, you can find the videos in our Youtube channel, and workshops slides in google drive.</p>"},{"location":"2022-2023-summer/","title":"Coders for Causes 2021/22 Summer Workshops","text":"<p>This project period continues the two main projects from the winter of 2020 :</p> <ul> <li>WADL</li> <li>POOPS</li> </ul> <p>If you have not before seen the existing progress, see this video.</p> <p>These two projects have their own corresponding technology stacks being used, hence will dictate the workshops that will be held.</p>"},{"location":"2022-2023-summer/#project-technology","title":"Project Technology","text":""},{"location":"2022-2023-summer/#poops","title":"POOPS","text":"<p>POOPS is a web-app built the frontend with React + NextJS + TypeScript + TailwindCSS with Firebase and Notion CMS.</p>"},{"location":"2022-2023-summer/#wadl","title":"WADL","text":"<p>WADL is a full-stack application with Vue and Firebase. It uses Docker containerisation for both development (and production in the future).</p>"},{"location":"2022-2023-summer/#workshop-recordings","title":"Workshop Recordings","text":"<p>The workshop recordings will be held on our youtube channel.</p>"},{"location":"2022-2023-summer/introduction-to-web-development/","title":"Introduction to Web Development Space","text":"<p>Navigating the Deep Dark Space of Web Development</p> <p>This workshop covers a brief overview of the most common tools and technologies used in web development.</p>"},{"location":"2022-2023-summer/introduction-to-web-development/#content","title":"Content","text":"<ul> <li>Introduction to Web Development Space</li> <li>Content</li> <li>What and Why Web Development?<ul> <li>What is web development?</li> <li>Why Web Development ?</li> </ul> </li> <li>FAQs about Web Development<ul> <li>Why code websites, why not use drag and drops like Wordpress, WIX?</li> <li>What is the best way to learn all these?</li> <li>Why does CFC not do mobile development as much as web development?</li> <li>If I already know a frontend framework, is it better to learn another frontend framework or to learn a backend framework?</li> </ul> </li> <li>Basics of Web and Limitation<ul> <li>Modern Frameworks</li> </ul> </li> <li>Server-side Applications (Backend)<ul> <li>How do devices communicate?</li> <li>What do server applications do?</li> <li>Databases</li> </ul> </li> <li>Others<ul> <li>Languages of the Web (the usual)</li> <li>Hosting Stuff</li> <li>CSS Frameworks</li> <li>Developer Tools</li> <li>TypeScript</li> <li>Testing</li> <li>Continuous Integration / Continuous Deployment</li> <li>Virtualisation and Containerisation</li> <li>Browsers</li> <li>Firefox Developer Tools</li> <li>Package Managers</li> <li>Version Control</li> <li>Linters and Formatters</li> <li>Teamwork</li> <li>Roadmaps</li> </ul> </li> <li>Word of Encouragement</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#what-and-why-web-development","title":"What and Why Web Development?","text":""},{"location":"2022-2023-summer/introduction-to-web-development/#what-is-web-development","title":"What is web development?","text":"<ul> <li>Websites development</li> <li>Web applications (client-side and server-side) development</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#why-web-development","title":"Why Web Development ?","text":"<ul> <li>Accessibility and Portability</li> <li>Career and On-demand in job market</li> <li>Huge possibility to combine with other emerging technologies (e.g. IoT, Machine Learning) and industry (e.g. Health, Mining, O&amp;G)</li> </ul> Career in Web Development <p>Source: Insights from Stack Overflow\u2019s 2016 survey of 50,000 developers</p> <p>\"Half of Developers are Web Developers\" </p>"},{"location":"2022-2023-summer/introduction-to-web-development/#faqs-about-web-development","title":"FAQs about Web Development","text":""},{"location":"2022-2023-summer/introduction-to-web-development/#why-code-websites-why-not-use-drag-and-drops-like-wordpress-wix","title":"Why code websites, why not use drag and drops like Wordpress, WIX?","text":"<ul> <li>Content Management System (CMS)</li> <li>Limitations on theme/template used</li> <li>Difficult to extend</li> <li>Cybersecurity</li> </ul> More information <p>CMS are one of the application of web development, but there are plenty more such as - internet of things, custom software for a particular industrial application (eg. using Machine Learning)</p> <p>CMS are usually limited to the template or plugin that you use. If those plugin don't exist, then it limits your productivity very much (difficulty to extend).</p> <p>CMS are usually built to cater for non-technical users. This means that thye become the subject of hackers. Think about a scenario where a hacker was able to find a vulnerability in WordPress, now every other WordPress site will be vulnerable.</p>"},{"location":"2022-2023-summer/introduction-to-web-development/#what-is-the-best-way-to-learn-all-these","title":"What is the best way to learn all these?","text":"<p>In summary, the best way to learn:</p> <ul> <li>Do personal projects (inspiration + motivation)</li> <li>Do team projects (get peer reviews and correct bad practices straight away)</li> <li>Watch Online Courses (to figure out what is available)</li> </ul> More Information <p>To be told that you have to learn \"this, this, and that\" before you could do things is tiresome.</p> <p>Often times, we want to learn to be a developer so that we can create cool things like software where thousands of people can use the app. We don't tend to be a developer for the sake of us needing to watch endless videos on different things.</p>"},{"location":"2022-2023-summer/introduction-to-web-development/#why-does-cfc-not-do-mobile-development-as-much-as-web-development","title":"Why does CFC not do mobile development as much as web development?","text":"<ul> <li>App stores has a developer cost</li> <li>Easier to deal/teach web technologies</li> <li>Accessibility (mobile, sensors, tablets, laptops and PCs)</li> <li>Bigger open-source community</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#if-i-already-know-a-frontend-framework-is-it-better-to-learn-another-frontend-framework-or-to-learn-a-backend-framework","title":"If I already know a frontend framework, is it better to learn another frontend framework or to learn a backend framework?","text":"<ul> <li>It is better to learn a backend framework</li> </ul> Reasoning <p>You want to build skills that complement one another rather than be an alternative.</p> <p>It is much more valuable for you to learn a backend framework because that helps you build a functional app.</p>"},{"location":"2022-2023-summer/introduction-to-web-development/#basics-of-web-and-limitation","title":"Basics of Web and Limitation","text":"HTML <p>What is it?</p> <ul> <li>Hypertext Markup Language</li> <li>Describes the structure of a web page</li> </ul> <p>Limitation</p> <ul> <li>Doesn\u2019t handle repeated content well</li> <li>No variables or calculation</li> </ul> HTML Syntax <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    Hello World!\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> CSS <p>What is it?</p> <ul> <li>Cascading Style Sheets</li> <li>Describes the presentation of a web page</li> </ul> <p>Limitation</p> <ul> <li>Most css is quite similar (Handled by CSS Libraries)</li> <li>Not very dynamic (Handled by CSS Frameworks)</li> </ul> CSS Syntax <pre><code>body {\n    background-color: #f0f0f0;\n    font-family: sans-serif;\n}\n\n.container{\n    width: 80%;\n    margin: 0 auto;\n}\n</code></pre> JS <p>What is it?</p> <ul> <li>JavaScript</li> <li>Used to program complex features on a web page</li> </ul> <p>Limitation</p> <ul> <li>Has the capability to modify the user interface, but becomes really tedious to modify interface (more about this in another workshop)</li> </ul> JS Syntax <pre><code>const bodySelector = document.querySelector('body');\nconst myFunction = () =&gt; {\n    bodySelector.innerHTML = 'Hello World 2!';\n    // Add a container class to space out\n    bodySelector.classList.add('container');\n}\nbodySelector.onclick = myFunction;\n</code></pre>"},{"location":"2022-2023-summer/introduction-to-web-development/#modern-frameworks","title":"Modern Frameworks","text":"<ul> <li>Websites can be much more\u2026 they can be web applications</li> <li>\u201cApp\u201d in a website (client-side rendering)</li> </ul> Modern Frameworks React.js <ul> <li>More mature and used more in industry</li> </ul> Vue.js <ul> <li>Growing fast in popularity and use.</li> </ul> <p>General Information</p> <ul> <li>Both are good to use and learn. </li> <li>Knowledge is transferable between the two frameworks.</li> </ul> Comparison between HTML and JSX <p></p> <p>Highlighted portions are starting chunk of distinct code.</p> HTML <pre><code>&lt;div class=\"row\"&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;devices&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Applications\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Build custom web and mobile applications to engage with your audience\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;web&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;Websites&lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Build new websites or optimise existing pages to improve online\n            visibility\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;storage&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Data Storage\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Design and create databases for efficient information storage and\n            retrieval\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;how_to_reg&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Consulting\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Empower your organisation through technical knowledge and advice\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> JSX <pre><code>import { memo } from 'react'\nimport { Row, Col, Card, CardBody } from 'reactstrap'\nimport services from 'data/services.json'\n\nconst Service = (props: {\nicon: string\ntitle: string\ndescription: string\n}) =&gt; (\n&lt;Card className='text-center border-0 bg-transparent'&gt;\n    &lt;CardBody className='px-0'&gt;\n    &lt;i className='material-icons-sharp md-lg'&gt;{props.icon}&lt;/i&gt;\n    &lt;p className='mt-4 font-weight-bold text-monospace text-larger'&gt;\n        {props.title}\n    &lt;/p&gt;\n    &lt;p className='mb-0'&gt;{props.description}&lt;/p&gt;\n    &lt;/CardBody&gt;\n&lt;/Card&gt;\n)\n\nconst Services = () =&gt; (\n&lt;Row&gt;\n    {services.map(service =&gt; (\n    &lt;Col\n        xs={12}\n        md={6}\n        lg={12 / services.length}\n        className='m-0'\n        key={service.title}\n    &gt;\n        &lt;Service {...service} /&gt;\n    &lt;/Col&gt;\n    ))}\n&lt;/Row&gt;\n)\n\nexport default memo(Services)\n</code></pre>"},{"location":"2022-2023-summer/introduction-to-web-development/#server-side-applications-backend","title":"Server-side Applications (Backend)","text":""},{"location":"2022-2023-summer/introduction-to-web-development/#how-do-devices-communicate","title":"How do devices communicate?","text":"<ul> <li>HTTP Request - Hypertext Transfer Protocol</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#what-do-server-applications-do","title":"What do server applications do?","text":"<ul> <li>Serve frontends (server-side rendering)</li> <li>Web API (Application Programming Interface)<ul> <li>Serve data (usually from a database)</li> <li>Process Request (Sending emails or SMS, Machine Learning)</li> </ul> </li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#databases","title":"Databases","text":"<p>Place to store the data</p> <p>Mongodb</p> <p>Allows for database design to be modified without complex migration or data loss</p> <p>SQL</p> <p>Typically faster and better for large amounts of data or systems that need data consistency and reliability</p>"},{"location":"2022-2023-summer/introduction-to-web-development/#others","title":"Others","text":""},{"location":"2022-2023-summer/introduction-to-web-development/#languages-of-the-web-the-usual","title":"Languages of the Web (the usual)","text":"<ul> <li>Python (Django, Flask)</li> <li>JavaScript (Node.js, Express)</li> <li>Ruby, Go, Rust, C</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#hosting-stuff","title":"Hosting Stuff","text":"<p>Many ways - Own a server - Use a 3<sup>rd</sup> party platform</p>"},{"location":"2022-2023-summer/introduction-to-web-development/#css-frameworks","title":"CSS Frameworks","text":"<p>Frontend (JS)</p> <ul> <li>Vue, React</li> <li>Nuxt.js, Next.js</li> </ul> <p>Frontend (CSS)</p> <ul> <li>MaterialUI, Vuetify</li> <li>Bootstrap</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#developer-tools","title":"Developer Tools","text":""},{"location":"2022-2023-summer/introduction-to-web-development/#typescript","title":"TypeScript","text":"<ul> <li>Type checking is super useful for complex apps</li> <li>Allows for way better javascript developer tooling</li> <li>Can be annoying if you\u2019re new at it</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#testing","title":"Testing","text":"<ul> <li>Selenium, Cypress<ul> <li>End to end automated testing tools</li> </ul> </li> <li>Jest, Mocha, Pytest<ul> <li>Unit testing</li> </ul> </li> <li>Testing is vital to software projects</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#continuous-integration-continuous-deployment","title":"Continuous Integration / Continuous Deployment","text":"<ul> <li>Automated Testing</li> <li>Event-driven scripts</li> <li>E.g. Github Action, Bitbucket Pipelines</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#virtualisation-and-containerisation","title":"Virtualisation and Containerisation","text":"<ul> <li>Allows execution of services in a virtual environment</li> <li>eg. Docker (Containerisation), Vagrant (Virtualisation)</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#browsers","title":"Browsers","text":"<ul> <li>Standard browsers<ul> <li>Google Chrome, Firefox, Edge, etc.</li> </ul> </li> <li>Backwards compatibility<ul> <li>Internet Explorer</li> </ul> </li> <li>Other<ul> <li>Mobile - Responsive</li> <li>Screen readers - Accessibility</li> </ul> </li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#firefox-developer-tools","title":"Firefox Developer Tools","text":"<ul> <li>Page Inspector<ul> <li>Visualise page aspects</li> <li>Grid layout</li> </ul> </li> <li>Web Console<ul> <li><code>console.log(\u201cHello World\u201d)</code></li> </ul> </li> <li>Responsive Design Mode<ul> <li>View from POV of different screen sizes such as mobile, tablets, etc.</li> </ul> </li> </ul> Some more tools <ul> <li>JavaScript Debugger</li> <li>Network Monitor</li> <li>Performance Tools</li> <li>Rulers</li> <li>Colour Pickers Learn more at: https://developer.mozilla.org/en-US/docs/Tools</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#package-managers","title":"Package Managers","text":"<ul> <li>Installs libraries that can be used</li> <li>Also has code shortcuts (e.g. npm run start)</li> </ul> <p>(More about <code>package.json</code> and <code>poetry.toml</code> in the projects and Package Manager Workshop)</p>"},{"location":"2022-2023-summer/introduction-to-web-development/#version-control","title":"Version Control","text":"<ul> <li>Essential for developer teams and complex software development</li> <li>Git</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#linters-and-formatters","title":"Linters and Formatters","text":"<ul> <li>Makes code formatting consistent (following standard)</li> <li>Useful with version controls to avoid pointless change</li> </ul> <p>eg.ESLint, Prettier</p>"},{"location":"2022-2023-summer/introduction-to-web-development/#teamwork","title":"Teamwork","text":"<ul> <li>Many tools out there</li> <li>Used to stop teams from stepping on each others toes</li> <li>Github Issues + Pull Requests</li> </ul>"},{"location":"2022-2023-summer/introduction-to-web-development/#roadmaps","title":"Roadmaps","text":"<p>There's an open-source community that maintains a learning roadmap for developers. See https://roadmap.sh/</p> Frontend Developer <p></p> Backend Developer <p></p> Dev-Ops <p></p>"},{"location":"2022-2023-summer/introduction-to-web-development/#word-of-encouragement","title":"Word of Encouragement","text":"Encouragement from the Tech Lead <p>\"I can admit that this journey of learning will be difficult, and can sometimes be overwhelming and demotivating. Please, if at any point of this project, you feel that you don't know enough, or you're feeling lost, please reach out! We are all in this journey together! Nobody is born talented, skills are honed with determination and willingness to learn.\" </p> <p>\"When I was a first year student entering on the CFC winter project, I didn't feel like I was good enough. I couldn't create a good looking interface, I didn't know how to use npm and all sorts of those things. I was just like many of you! if I gave up just because of all those things I didn't know, of all those self-doubts, then I wouldn't be here today. I admit that I was lucky because I was in CFC, I had connections where I can just ask questions instead of feeling lost of not knowing. So please do leverage that opportunity to reach out\" </p> <p>\"You being in this project not only gives you the opportunity to raise your talents, but you also unlock one of the biggest factor of the growth of your career, and that is the connections with your fellow software engineers.\"</p>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/","title":"MVC and MVVM: Software Architectural Patterns and Communication","text":"<p>Don't pull all your eggs in one basket!</p>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#content","title":"Content","text":"<ul> <li>Software Architecture<ul> <li>Model-View-Controller (MVC)</li> <li>Model-View-ViewModel (MVVM)</li> <li>MVC or MVVM?<ul> <li>Pros and Cons of MVC</li> <li>Pros and Cons of MVVM</li> </ul> </li> </ul> </li> <li>Communication<ul> <li>Application Programming Interfaces (API)</li> <li>REST: Representation State Transfer<ul> <li>Why REST APIs?</li> </ul> </li> </ul> </li> <li>Demo</li> <li>Resources</li> </ul>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#software-architecture","title":"Software Architecture","text":"<p>The main idea behind implementing software architectural patterns is to address the principle of the Separation of Concerns.   </p> <p>The goal of Separation of Concerns is to establish a well-organised system, where each section has its own specific, designated role, allowing a project to be well managed and easier to grow.</p> <p>Software architecture is the high-level structure of a software system, comprising the overall design of the system, the relationships between its components, and the principles that govern its design and evolution. Architecture is important because it provides a blueprint for the design and implementation of a software system, and defines the ways in which the system can be modified and extended over time.</p> <p>The architecture of a system is critical to the success of the software as it sets the foundations of the project, providing the basis to ensure quality and maintainability of the system. A well-designed architecture can make it easier to develop and test the system, and can help to ensure that it is flexible, scalable, and reliable. </p> <p>By separating concerns, we can use different technologies for each section which will allow us to decide what stack to use during development. These choices can optimise the performance, development, and testing of the system.</p> Beware! Poorly designed system inside! <p> </p>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#model-view-controller-mvc","title":"Model-View-Controller (MVC)","text":"<p>MVC, or Model-View-Controller, is a software architecture pattern that divides an application into three main components: the model, the view, and the controller.</p> <p>The model represents the data and the business logic of the application. It is responsible for managing the data and ensuring that it is up-to-date and accurate.</p> <p>The view is the user interface of the application. It is responsible for displaying the data to the user and providing a way for the user to interact with the application.</p> <p>The controller is the component that mediates between the model and the view. It is responsible for handling user input and updating the model and the view accordingly.</p> <p>In an MVC architecture, the model, view, and controller are all independent components that communicate with each other through well-defined interfaces. This allows for a clean separation of concerns, making it easier to develop and maintain the application.</p> MVC <p></p> Note <p>The example above follows the linear implementation of the MVC pattern. You may see examples of the triangular implementation of MVC which is still a completely valid implementation. The only difference, in principle, is how each section communicates with one another. </p> Each framework is different!!! <p>While the idea is still the same, each framework implements each section of the MVC pattern slightly differently. Get to know your framework!</p>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#model-view-viewmodel-mvvm","title":"Model-View-ViewModel (MVVM)","text":"<p>MVVM, or Model-View-ViewModel, is a software architecture pattern that is similar to MVC, but with some important differences. It is an architectural pattern used for building user interfaces in modern application development frameworks</p> <p>In an MVVM architecture, the View and the Controller from the MVC pattern are combined into a single component called the ViewModel. The ViewModel exposes data to the View, and translates user actions, such as button clicks, into commands that are sent to the Model to perform the appropriate business logic.</p> <p>The ViewModel and View are binding together in a process called data binding. Data binding is the process of establishing a connection between the user interface (the View) and its underlying data model (the ViewModel). This allows for direct communication between the two, meaning the UI updates as the data changes and actions are processed by the ViewModel as soon as they happen on the View.</p> MVVM <p></p>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#mvc-or-mvvm","title":"MVC or MVVM?","text":"<p>The right architecture has to be used for the right job, and with the right frameworks. And while MVC and MVVM work in similar ways, they each have their on advantages and disadvantages.</p>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#pros-and-cons-of-mvc","title":"Pros and Cons of MVC","text":"Pros Cons Clear separation of concerns between the application's data model, user interface, and control logic Difficult to implement in some programming languages and frameworks, especially those that do not have built-in support for the pattern Easier to develop and maintain large, complex applications, and allows different aspects of the application to be developed and tested independently Harder to develop modern user interfaces"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#pros-and-cons-of-mvvm","title":"Pros and Cons of MVVM","text":"Pros Cons Provides a more flexible and powerful architecture for building GUI applications Can be more difficult to implement than MVC in some cases, and it may require a more complex and sophisticated development environment in order to take full advantage of its capabilities Data binding Data binding Data binding automatically synchronises the application's user interface and data model, which can make it easier to implement complex features and interactions Use of data binding can make it harder to debug and troubleshoot applications, since changes to the data model may not always be immediately visible in the user interface"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#summary","title":"Summary","text":"<p>There are plenty of architectural design patterns for all your software needs. Many are far too complicated and extensive to use in our case. MVC and MVVM are simple in design and easy to implement, making them among the most popular design patterns and perfect for developing web applications.</p>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#communication","title":"Communication","text":"<p>Now that we're experts in designing systems, let's talk about how each part of the system actually communicates with each other.</p> Disclaimer <p>There are many more ways that systems communicate with each. However, we will only cover the basics required in web development.</p> <p>If you feel like learning more about the different software communication channels that exist, a good place to start is with sockets or buses!  </p>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#application-programming-interfaces-api","title":"Application Programming Interfaces (API)","text":"<p>An API is a mechanism that allows two software components to communicate with other using a set of definitions and protocols. It is a sort of middleman that enables different software programs to communicate and share data in a consistent and predictable manner.</p> <p>APIs can act as the \"Controller\" in MVC systems. The API will handle incoming requests from the frontend (the View), perform some logic which may include fetching data from the Model, then return responses to the client. They can also be used in MVVM architecture to allow communication between the ViewModels and the Models, as well as between any other services used.  </p> <p></p>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#rest-representation-state-transfer","title":"REST: Representation State Transfer","text":"<p>RESTful APIs are application programming interfaces that follow the constraints of REST architectural style and allows for interaction with RESTful web services. You can read more about the details of REST, here.   </p> <p>In terms of using RESTful APIs, there are some naming and implementing conventions used to accurately label the endpoint with what it does.</p> CRUD to HTTP Verb Matching for JSON standard communications with REST-APIs <p>CRUD stands for Create, Read, Update, and Delete. RESTful APIs use HTTP verbs to specify the CRUD operation an endpoint is performing.</p> HTTP Verb CRUD Operation POST Create/Update GET Read PUT Update/Replace PATCH Update/Modify DELETE Delete <p></p>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#why-rest-apis","title":"Why REST APIs?","text":"<p>There are many advantages to using RESTful APIs compared to other frameworks. These include:</p> <ul> <li>Scalability<ul> <li>Are able to handle a large number of requests without affecting performance</li> <li>Stateless nature allows each request to be handled independently</li> </ul> </li> <li>Flexibility<ul> <li>Support a wide range of data formats and content types</li> <li>More resilient to change</li> </ul> </li> <li>Interoperability<ul> <li>Are able to be used by a wide range of clients</li> <li>Allows developers to build applications that can integrate with a variety of different systems and services</li> </ul> </li> <li>Ease of use<ul> <li>Follow a simple, standardised protocol (HTTP, HTTPS)</li> <li>To request a resource via a REST API, you just need to provide its URL</li> </ul> </li> </ul>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#demo","title":"Demo","text":"<p>We will be doing a demo to build simple MVC and MVVM applications (if time persists).</p>"},{"location":"2022-2023-summer/mvc-mvvm-architecture-and-communications/#resources","title":"Resources","text":"<p>Keep the learning going!</p> <p>Find some useful resources below:</p> <ul> <li>MVC Framework - Introduction</li> <li>The Model-View-ViewModel Pattern</li> <li>MVC vs MVVM \u2013 Difference Between Them</li> <li>Red Hat: What is an API?</li> <li>\"What is a REST API?\" by Jamie Juviler</li> <li>Talk to an AI! (ChatGPT)<ul> <li>DISCLAIMER: May generate incorrect information</li> </ul> </li> </ul>"},{"location":"2022-2023-summer/practical-software-engineering-workflow/","title":"Practical Software Engineering Workflow","text":"<p>How software engineer GSD!</p>"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#how-do-software-engineers-work","title":"How do software engineers work?","text":"<p>They use issue/ticket management system to track their work.</p> Github Issues and Jira <p>The examples are Github Issues and Jira.</p> <p> </p> <p>Listing of issues can be displayed in kanban boards.</p> Kanban Boards <p> </p>"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#why-do-software-engineers-work-like-this","title":"Why do Software Engineers Work like this?","text":"Scrums <p>One example of \"agile\" ways of working and it looks like this. </p>"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#what-is-git","title":"What is Git?","text":"<p>Git is a</p> <ul> <li>version control system</li> <li>tools for coordinating work for different changes</li> </ul>"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#main-parts-of-git","title":"Main Parts of Git","text":"<p>Main Parts of git:</p> <ul> <li>Change Node (commit node)</li> <li>Branch</li> </ul> <p></p>"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#git-different-versions","title":"Git Different Versions","text":"Software Versions <p>Nodes - Representation of a change (commits + merge)</p> <p>Main/Master: - Branch usually as production or deployed</p> <p>Development Branch - Branch used for development Used for compiling features for a release</p> <p>Feature Branch - Branch used for development for a particular issue</p>"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#github-and-code-repositories","title":"GitHub and Code Repositories","text":"<p>GitHub - Place to hold code repositories</p> <p>Repositories - Place where codes are stored with different versions</p>"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#interactive-workshop-time","title":"INTERACTIVE WORKSHOP TIME !!!!","text":"<ol> <li>Do the following from codersforcauses/software-engineering-practices-demo: Demonstration of software engineering practices (github.com):</li> <li>Look at the GitHub issues</li> <li>Assign yourself an issue</li> <li>Clone repo with <code>git clone https://github.com/codersforcauses/software-engineering-practices-demo-2022-summer.git</code></li> <li>Create a branch with the following format s{Issue Number}-{Issue Name}. <code>git checkout -b {Issue Number}-{Issue Name}</code></li> <li>Create the change to satisfy or complete the github issue</li> <li>Commit (package) the change <code>git commit -m \"{insert message here}\"</code> and push git push.</li> <li>Create a pull request and request for a reviewer from CFC peeps</li> </ol>"},{"location":"2022-2023-summer/practical-software-engineering-workflow/#other-resources","title":"Other Resources","text":"<ul> <li>Git and Github</li> </ul>"},{"location":"2022-2023-summer/typical-codebase-structure/","title":"Typical Codebase Structure","text":"<p>Codebase Jigsaw: How it all fits together!</p> Info <p>This presentation is only intended to be a brief overview of the typical codebase structure</p> <p>If you want more information about anything mentioned feel free to reach out to CFC committee and project helpers!</p>"},{"location":"2022-2023-summer/typical-codebase-structure/#overview-and-importance","title":"Overview and Importance","text":"<ul> <li>Most codebase will follow almost the same pattern (if they change, it will only change with little quirks)</li> <li>Structure helps every software engineer understand codebase and where to put it certain codes  (better code readability = better collaboration = better profit!)</li> </ul> Profit"},{"location":"2022-2023-summer/typical-codebase-structure/#frontend","title":"Frontend","text":"<p>Example: About Us - Coders for Causes Website</p> <p></p>"},{"location":"2022-2023-summer/typical-codebase-structure/#different-folders-and-purpose","title":"Different Folders and Purpose","text":""},{"location":"2022-2023-summer/typical-codebase-structure/#components","title":"Components","text":"<p>Components are individual parts/pieces of user interfaces</p> <p></p>"},{"location":"2022-2023-summer/typical-codebase-structure/#pages","title":"Pages","text":"<p>Pages are the direct components that are related specific to a route or URL</p> <p></p>"},{"location":"2022-2023-summer/typical-codebase-structure/#public-assets","title":"Public / Assets","text":"<p>Assets are usually elements that are referenced E.g. Images, Videos</p> <p></p>"},{"location":"2022-2023-summer/typical-codebase-structure/#utilities-helpers","title":"Utilities / Helpers","text":"<p>Pieces of code that are used as utilities or helpers to other codes</p> <p></p>"},{"location":"2022-2023-summer/typical-codebase-structure/#tests","title":"Tests","text":"<ul> <li>Scripts that tests that code works</li> <li>Usually E2E frontend</li> </ul>"},{"location":"2022-2023-summer/typical-codebase-structure/#comparison-with-two-codebases","title":"Comparison with Two Codebases","text":"<p>Slight difference, look at software documentation or ask other engineers</p> <p></p>"},{"location":"2022-2023-summer/typical-codebase-structure/#backend","title":"Backend","text":"Context - Role and Subject <p>In these example, when I mean \"role\", I mean the general role of file. \"subject\" means the feature or group functionality</p>"},{"location":"2022-2023-summer/typical-codebase-structure/#method-of-organisation","title":"Method of Organisation","text":""},{"location":"2022-2023-summer/typical-codebase-structure/#subject-oriented-driven-structure","title":"Subject-Oriented Driven Structure","text":"<p>As it can be seen here, both different folders will have the same filenames based on its role. App grows, those files can itself become folders as well.</p> <p>Example: erdem/DRF-TDD-example: An example Django REST framework project for test driven development. (github.com)</p> <p></p>"},{"location":"2022-2023-summer/typical-codebase-structure/#role-oriented-driven-structure","title":"Role-Oriented Driven Structure","text":"<p>As it can be seen here, both both different folders will have the same filenames based on its subject</p> <p>Example: our-lab-training/olt-backend: Our Lab Training - Feathers Backend (github.com)</p> <p></p>"},{"location":"2022-2023-summer/typical-codebase-structure/#different-folders-and-purpose_1","title":"Different Folders and Purpose","text":""},{"location":"2022-2023-summer/typical-codebase-structure/#models-database-connection","title":"Models / Database Connection","text":"<p>Object-Relational Model (ORM). Links the database into your app into objects</p> <p></p>"},{"location":"2022-2023-summer/typical-codebase-structure/#migrations","title":"Migrations","text":"<ul> <li>Stores changes to be applied to our database</li> </ul>"},{"location":"2022-2023-summer/typical-codebase-structure/#serializers","title":"Serializers","text":"<ul> <li>Specifies how your data are formatted across requests</li> </ul> <p>)</p>"},{"location":"2022-2023-summer/typical-codebase-structure/#views","title":"Views","text":"<ul> <li>In REST API, Views are your main \u201cview\u201d of the API</li> <li>Handles your business logic</li> </ul>"},{"location":"2022-2023-summer/typical-codebase-structure/#urls","title":"URLs","text":"<ul> <li>Used for routing and determining the rules for the URL pattern.</li> </ul>"},{"location":"2022-2023-summer/typical-codebase-structure/#tests_1","title":"Tests","text":"<ul> <li>Contains unit testing (+ possibly e2e testing)</li> <li>Most common candidate for transitioning from file to a folder containing more files</li> </ul>"},{"location":"2022-2023-summer/typical-codebase-structure/#other-resources","title":"Other Resources","text":"<ul> <li>Writing your first Django app, part 1 | Django documentation | Django (djangoproject.com)</li> <li>File Structure \u2013 React (reactjs.org)</li> <li>Best practice for Django project working directory structure - Stack Overflow</li> </ul>"},{"location":"2023-winter/introduction-to-backend-development-with-django/","title":"Welcome to the Djangol!","text":"<p>Welcome to the (Django)l !: Introduction to Backend Programming with Django </p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#prerequisites-to-this-workshop","title":"Prerequisites to this Workshop","text":"<p>You need the following installed:</p> <ul> <li>Python3</li> <li>Docker</li> <li>Git</li> </ul> <p>The starting repo for this workshop: https://github.com/CodersforLearning/django-csf</p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#what-you-will-be-building-as-part-of-this-workshop","title":"What you will be building as part of this workshop?","text":"<p>You will be building a backend for an event management system. Below is the schematics</p> <p></p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#what-are-apis-and-rest-apis","title":"What are APIs and REST-APIs?","text":"<p>Application Programming Interface</p> Analogy <p>Who interacts with the user interface? - the user Who interacts with the application programming interface ? - the application program (eg. the browser) </p> <p>Representational State Transfer Application Programming Interface</p> <ul> <li> <p>backend architectural pattern that follows the GET/POST/PUT/PATCH/DELETE</p> </li> <li> <p>Can be represented in Swagger/ Open API specification</p> </li> </ul> Swagger/ Open API specification <p></p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#what-is-django","title":"What is Django?","text":"<p>Django</p> <ul> <li>Python web framework for creating server-side application</li> </ul> <p>Follows MVC:</p> <ul> <li>Model - database</li> <li>View \u2013 Interface (API or User Interface)</li> <li>Controller \u2013 URLs + routes</li> </ul> <p>See Documentation</p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#what-is-django-rest-framework-drf","title":"What is Django REST Framework (DRF)?","text":"<ul> <li>library for creating REST-API</li> <li>just makes it easier develop REST-API</li> </ul> <p>In:</p> <ul> <li>Authentication + Permission</li> <li>Generic API Views</li> <li>Serialisers (payload validation and format)</li> </ul> <p>See Documentation</p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#interactive-workshop-time","title":"Interactive Workshop Time!!!","text":"<p>Firstly, open your IDE (VSCode) and open the terminal.</p> <ol> <li>Clone the repo: <code>git clone https://github.com/CodersforLearning/django-csf.git</code></li> <li>Go to the directory: <code>cd django-csf</code></li> <li>Run the setup script: <code>./setup.sh</code></li> </ol> What does the setup script do? <pre><code>#!/bin/bash\n\n# Create a Python virtual environment\npython3 -m venv venv\n\n# Activate Python environment\nsource venv/bin/activate\n\n# Install Django\npip3 install Django\n\n# Bootstraps the django codebase\ndjango-admin startproject csfevents\n\n# As per https://www.django-rest-framework.org/#installation\npip3 install djangorestframework\npip3 install markdown       # Markdown support for the browsable API.\npip3 install django-filter  # Filtering support\npip3 install pytz           # Timezone support\n\n# Freeze the requirements\ncd csfevents\npip3 freeze &gt; requirements.txt\n</code></pre>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#initial-files","title":"Initial files","text":"<ul> <li><code>manage.py</code> - the entrypoint of the Django application</li> <li><code>csfevents</code> - the main Django application</li> <li><code>csfevents/settings.py</code> - the configuration file of the Django application</li> <li><code>csfevents/urls.py</code> - the URL routes of the Django application</li> <li><code>csfevents/wsgi.py</code> and <code>csfevents/asgi.py</code> - used as the script to run production django application</li> </ul>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#lets-start-the-django-application","title":"Let's start the Django application","text":"<ol> <li>Perform the initial migration: <code>python3 manage.py migrate</code>. Notice that when you run this command, it will create a <code>db.sqlite3</code> file.</li> <li>Run the Django application: <code>python3 manage.py runserver</code></li> <li>Check out the Django application: http://localhost:8000</li> <li>Check out the Django admin: http://localhost:8000/admin</li> <li>Create a superuser: <code>python3 manage.py createsuperuser</code>. Login and look around the Django admin.</li> </ol> Additional info <p>Django ships default \"django apps\" defined <code>settings.py</code> file. You can see the list of apps in the <code>INSTALLED_APPS</code> variable.</p> <p>Django apps are plugins that can be used to extend the functionality of the Django application. It's the core method of developing with this backend framework.</p> <p>For the <code>db.sqlite3</code> file, it's the default database that Django uses. You can change this to other databases like MySQL, PostgreSQL, etc.</p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#lets-create-our-first-django-app-event","title":"Let's create our first Django app: event","text":"<p>Run this command <code>python3 manage.py startapp event</code>.</p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#what-did-this-command-do","title":"What did this command do?","text":"<p>Initial files that it created:</p> <ul> <li><code>event/admin.py</code> - the admin interface</li> <li><code>event/apps.py</code> - the configuration</li> <li><code>event/models.py</code> - the database schema</li> <li><code>event/tests.py</code> - the test cases</li> <li><code>event/views.py</code> - the views</li> </ul> <p>Some files you want to create later are:</p> <ul> <li><code>event/serializers.py</code> - the serializers</li> <li><code>event/urls.py</code> - the URL routes</li> <li><code>event/permissions.py</code> - the permissions</li> </ul>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#creation-of-the-database-schema","title":"Creation of the database schema","text":"Quick Reference: ERD WIP Answer <pre><code>class Event(models.Model):\n    # UUID id\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=100)\n    date = models.DateField()\n\n    organizer = models.ForeignKey(\n        User, on_delete=models.SET_NULL, null=True, blank=True\n    )\n\n    def __str__(self):\n        return self.name\n</code></pre> <p>After creating this, you'll need to add it in the <code>INSTALLED_APPS</code> variable in the <code>settings.py</code> file.</p> <p>Then run <code>python3 manage.py makemigrations</code> and <code>python3 manage.py migrate</code>.</p> What did these commands do? <p><code>makemigrations</code> - creates the migration files These are scripts that defines how the database schema changed.</p> <p><code>migrate</code> - applies the migration files to the database Similar to how we performed our initial migration</p> <p>When you have created that, check out <code>db.sqlite3</code> and you'll see that there's a new table called <code>event_event</code>.</p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#creation-of-the-admin-interface","title":"Creation of the admin interface","text":"WIP Answer <pre><code>from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)\n</code></pre> <p>Now visit the admin interface and you'll see the Event model there.</p> A cooler example <pre><code>@admin.register(Event)\nclass EventAdmin(admin.ModelAdmin):\n    list_display = (\"name\", \"date\", \"organizer\")\n    list_filter = (\"organizer\",)\n    search_fields = (\"name\",)\n    ordering = (\"date\",)\n    date_hierarchy = \"date\"\n</code></pre>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#do-the-same-thing-again-for-attendance","title":"Do the same thing again for Attendance","text":"Quick Reference: ERD WIP Answer <pre><code># models.py\nclass Attendance(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    event = models.ForeignKey(\n        Event, on_delete=models.CASCADE, related_name=\"attendances\"\n    )\n    # String field with only the valid choices \"going\", \"maybe\", \"not_going\"\n    status = models.CharField(\n        max_length=10,\n        choices=[(\"Going\", \"going\"), (\"Maybe\", \"maybe\"), (\"Not Going\", \"not_going\")],\n    )\n\n    def __str__(self):\n        return f\"Event '{self.event.name}' - Attendance '{self.user.username}'\"\n\n# admin.py\n@admin.register(Attendance)\nclass AttendanceAdmin(admin.ModelAdmin):\n    list_display = (\"user\", \"event\", \"status\")\n    list_filter = (\"user\", \"event\", \"status\")\n    search_fields = (\"user\", \"event\", \"status\")\n    ordering = (\"user\", \"event\", \"status\")\n    date_hierarchy = \"event__date\"\n</code></pre>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#creation-views-the-interface-in-api","title":"Creation Views: the Interface in API","text":""},{"location":"2023-winter/introduction-to-backend-development-with-django/#serializerspy","title":"<code>serializers.py</code>","text":"<p>Serialisers are a way to convert Python models to JSON, XML or any other format you wish.</p> WIP Answer <pre><code># serializers.py\nclass EventSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Event\n        fields = (\"id\", \"name\", \"date\", \"organizer\")\n</code></pre>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#viewspy-and-urlspy","title":"<code>views.py</code> and <code>urls.py</code>","text":"<p>Here's our goal: <pre><code>// Class based - programming\nGET events in the system - /events\nPOST create events - /events\nPUT/PATCH update events - /events/&lt;id&gt;\nDELETE delete events - /events/&lt;id&gt;\n\nSpecial actions\nPOST Change attendee status to an event - /events/&lt;id&gt;/change_attendee_status\n</code></pre></p> <p>Firstly, we need to set the <code>urls.py</code> to import the views from <code>event/views.py</code>.</p> <pre><code># urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/events/\", include(\"event.urls\")) # --HERE--\n]\n</code></pre> <p>There's 2 main ways to create views</p> <ul> <li>Functional</li> <li>Class-based</li> </ul> Class-based Views <p>This is the easiest way - full of magic. If you need flexibility, you can override the methods.</p> <pre><code># event/views.py\nclass EventViewSet(viewsets.ModelViewSet):\n    queryset = Event.objects.all()\n    serializer_class = EventSerializer\n\n    def perform_create(self, serializer):\n        # Set whoever is creating the event as the organizer:\n        serializer.save(organizer=self.request.user)\n\n    # Note: This is a way to override the default methods\n    def destroy(self, request, *args, **kwargs):\n        return Response(status=status.HTTP_405_METHOD_NOT_ALLOWED)\n\n# event/urls.py\nrouter = DefaultRouter()\nrouter.register(r\"\", EventViewSet, basename=\"events\")\n\nurlpatterns = [\n    path(\"\", include(router.urls)),\n]\n</code></pre> <p>Important to note that the <code>basename</code> is used to generate the URL name. In this case, it will be <code>events-list</code> and <code>events-detail</code>. (you will need this automated testing)</p> Functional Views <p>This is the more flexible way. This is currently the way CSF does it. Example</p> <pre><code># event/views.py\n@api_view([\"GET\"])\ndef event_list(request):\n    events = Event.objects.all()\n    serializer = EventSerializer(events, many=True)\n    return Response(serializer.data)\n\n@api_view([\"GET\"])\ndef event_detail(request, pk):\n    event = get_object_or_404(Event, pk=pk)\n    serializer = EventSerializer(event)\n    return Response(serializer.data)\n\n@api_view([\"POST\"])\ndef event_create(request):\n    # Set whoever is creating the event as the organizer:\n    serializer = EventSerializer(data=request.data)\n    if serializer.is_valid():\n        serializer.save(organizer=request.user)\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@api_view([\"PUT\"])\ndef event_update(request, pk):\n    event = get_object_or_404(Event, pk=pk)\n    serializer = EventSerializer(event, data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n        return Response(serializer.data)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@api_view([\"DELETE\"])\ndef event_delete(request, pk):\n    return Response(status=status.HTTP_405_METHOD_NOT_ALLOWED)\n\n# urls.py\nurlpatterns = [\n    path(\"\", views.event_list),\n    path(\"&lt;int:pk&gt;/\", views.event_detail),\n    path(\"create/\", views.event_create),\n    path(\"&lt;int:pk&gt;/update/\", views.event_update),\n    path(\"&lt;int:pk&gt;/delete/\", views.event_delete),\n]\n</code></pre> Reuse Same Path with different HTTP Methods <pre><code>@api_view([\"GET\", \"POST\"])\ndef event_list(request):\n    if request.method == \"GET\":\n        queryset = Event.objects.all()\n        serializer = EventSerializer(queryset, many=True)\n        return Response(serializer.data)\n    elif request.method == \"POST\":\n        serializer = EventSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=201)\n        return Response(serializer.errors, status=400)\n\n@api_view([\"GET\", \"PUT\", \"PATCH\", \"DELETE\"])\ndef event_detail(request, pk):\n    try:\n        event = Event.objects.get(pk=pk)\n    except Event.DoesNotExist:\n        return Response(status=404)\n\n    if request.method == \"GET\":\n        serializer = EventSerializer(event)\n        return Response(serializer.data)\n    elif request.method in [\"PUT\", \"PATCH\"]:\n        serializer = EventSerializer(event, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=400)\n    elif request.method == \"DELETE\":\n        event.delete()\n        return Response(status=204)\n</code></pre> Another Example Class-based Views <p>This is the easiest way - full of magic. If you need flexibility, you can override the methods. <pre><code># views.py\nclass EventViewSet(viewsets.ModelViewSet):\n    queryset = Event.objects.all()\n    serializer_class = EventSerializer\n\n    def perform_destroy(self, instance):\n        if not instance.is_public:  # Assuming `is_public` is a boolean field in the `Event` model\n            raise serializers.ValidationError(\"Cannot delete a non-public event.\")\n        super().perform_destroy(instance)\n</code></pre></p> <p>After that long discussion, let's create the views and play around.</p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#going-back-to-serializer-for-organizer","title":"Going back to Serializer for Organizer","text":"<pre><code>+ class UserSerializer(serializers.ModelSerializer):\n+     # read only serializer\n+     class Meta:\n+         model = User\n+         fields = (\"id\", \"username\", \"email\")\n\n\nclass EventSerializer(serializers.ModelSerializer):\n+    organizer = UserSerializer(read_only=True)\n\n    class Meta:\n        model = Event\n        fields = (\"id\", \"name\", \"date\", \"organizer\")\n</code></pre> <p>What about if we also want to include attendees?</p> <pre><code>+ class AttendanceSerializer(serializers.ModelSerializer):\n+     user = UserSerializer(read_only=True)\n+ \n+     class Meta:\n+         model = Attendance\n+         fields = (\"user\", \"status\")\n\n\nclass EventSerializerWithAttendees(serializers.ModelSerializer):\n    organizer = UserSerializer(read_only=True)\n+    attendances = AttendanceSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Event\n-       fields = (\"id\", \"name\", \"date\", \"organizer\")\n+       fields = (\"id\", \"name\", \"date\", \"organizer\", \"attendances\")\n</code></pre>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#bonus-filters-and-search-will-not-be-covered-in-this-workshop","title":"Bonus: Filters and Search (Will not be covered in this workshop)","text":"<p>https://www.django-rest-framework.org/api-guide/filtering/</p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#eventsidchange_attendee_status","title":"<code>/events/&lt;id&gt;/change_attendee_status/</code>","text":"<p>Docs: - Viewset Actions</p> <p>eg. <code>/events/1/change_attendee_status/</code> Payload body looks like <pre><code>{\n    \"status\": \"Going\"\n}\n</code></pre></p> <pre><code># serializers.py\nclass AttendanceChangeStatusSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Attendance\n        fields = (\"status\")\n\n# views.py\nclass EventViewSet(viewsets.ModelViewSet):\n    ...\n    # Attendance\n    @action(detail=True, methods=[\"post\"])\n    def change_attendee_status(self, request, pk=None):\n        event = self.get_object()\n        serializer = AttendanceChangeStatusSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n\n        user = request.user\n        status = serializer.validated_data[\"status\"]\n        Attendance.objects.update_or_create(\n            user=user, event=event, defaults={\"status\": status}\n        )\n        return Response(status=status.HTTP_200_OK)\n</code></pre>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#automated-testing","title":"Automated Testing","text":"<p>https://www.django-rest-framework.org/api-guide/testing/</p> <pre><code>from rest_framework.test import APITestCase\nfrom django.contrib.auth.models import User\nfrom event.models import Event\n\n# Test to test all the HTTP methods of `EventViewSet`\nclass EventTest(APITestCase):\n    def setUp(self):\n        # Create a user\n        self.user = User.objects.create_user(\n            username=\"test_user\", email=\"test@test.com\", password=\"test_password\"\n        )\n\n        # Create an event\n        self.event = Event.objects.create(\n            name=\"test_event\", date=\"2021-01-01\", organizer=self.user\n        )\n\n    def test_get(self):\n        # Test GET method\n        url = reverse(\"events-list\")\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.data[0][\"name\"], \"test_event\")\n        self.assertEqual(response.data[0][\"date\"], \"2021-01-01\")\n        self.assertEqual(response.data[0][\"organizer\"][\"username\"], \"test_user\")\n\n    def test_post(self):\n        # Test POST method\n        self.client.login(username=\"test_user\", password=\"test_password\")\n        url = reverse(\"events-list\")\n        response = self.client.post(url, {\"name\": \"test_event2\", \"date\": \"2021-01-02\"})\n        self.assertEqual(response.status_code, 201)\n\n        event_data = response.data\n        self.assertEqual(event_data[\"name\"], \"test_event2\")\n        self.assertEqual(event_data[\"date\"], \"2021-01-02\")\n        self.assertEqual(event_data[\"organizer\"][\"username\"], \"test_user\")\n\n        # Make sure the event by checking the database\n        event = Event.objects.get(name=\"test_event2\")\n        self.assertEqual(str(event.id), event_data[\"id\"])\n    # ... All other methods are left to the reader to implement\n</code></pre> <p>To run this test, run <code>python manage.py test</code></p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>What if we only want the <code>PUT/PATCH/DELETE</code> methods to be accessible by the organizer?</p> <p>Docs: - Authentication https://www.django-rest-framework.org/api-guide/authentication/ - Authorization/Permissions https://www.django-rest-framework.org/api-guide/permissions/</p> <pre><code># permissions.py\nfrom rest_framework import permissions\n\n# The organizer is the only one allowed to update or delete an event.\nclass IsOrganizerOrReadOnly(permissions.BasePermission):\n    def has_object_permission(self, request, view, obj):\n        # Read permissions are allowed to any request,\n        # so we'll always allow GET, HEAD or OPTIONS POST.\n        if request.method in [permissions.SAFE_METHODS, 'POST']:\n            return True\n\n        # Write permissions are only allowed to the organiser of the event.\n        return obj.organizer == request.user\n\n# views.py\nclass EventViewSet(viewsets.ModelViewSet):\n    ...\n    permission_classes = [IsOrganizerOrReadOnly]\n    ...\n</code></pre>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#tdd-test-driven-development-with-multiple-accounts","title":"TDD: Test-Driven Development With Multiple Accounts","text":"<p>This is a perfect showcase how it's very difficult to manage manually testing with multiple accounts.</p> <pre><code>class EventTest(APITestCase):\n    ...\n    def test_not_organizer_cannot_modify(self):\n        # Test that a user who is not the organizer cannot modify the event\n        # Create another user\n        self.user2 = User.objects.create_user(\n            username=\"test_user2\", email=\"test2@test.com\", password=\"test_password\"\n        )\n        self.client.login(username=\"test_user2\", password=\"test_password\")\n        url = reverse(\"events-detail\", args=[self.event.id])\n        response = self.client.put(url, {\"name\": \"test_event2\", \"date\": \"2021-01-02\"})\n        self.assertEqual(response.status_code, 403)\n</code></pre> How to manually test this? <ul> <li>Login as the organiser</li> <li>Create an event</li> <li>Create a new user</li> <li>Login as the new user</li> <li>Try to modify the event</li> <li>Check that it returns a 403 Forbidden</li> </ul>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#extra-reading-jwt-authentication","title":"Extra-Reading - JWT Authentication","text":"<p>Summary of Django Simple JWT</p> <p>The only key bit to know is</p> <p>install <code>pip install djangorestframework-simplejwt</code></p> <p>in <code>settings.py</code> <pre><code>REST_FRAMEWORK = {\n    ...\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        ...\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n    ...\n}\n</code></pre></p> <p>in <code>urls.py</code> <pre><code>from rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n)\n\nurlpatterns = [\n    ...\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'), # Login\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'), # Refresh tokens\n    ...\n]\n</code></pre></p> <p>If you login via <code>/api/token</code> , you will send something like this </p> <pre><code>{\n    \"username\":\"test_user\",\n    \"password\":\"test_password\"\n}\n</code></pre> <p>you're going to get something like this back</p> <pre><code>{\n  \"access\":\"eyJh...\",\n  \"refresh\":\"eyJhb...\"\n}\n</code></pre> <p>And if you are using an authenticated endpoint, you need to add the <code>Authorization</code> header with the token. <code>\"Authorization: Bearer eyJhbEXAMPLEOFJWTOKEN...\"</code></p>"},{"location":"2023-winter/introduction-to-backend-development-with-django/#bonus-sending-emails","title":"Bonus\" Sending Emails","text":"<p>Run <code>docker-compose up</code> to start the mail server.</p> <p>Your mail server will have this UI at http://localhost:8025/. It communicates via SMTP on port 1025.</p> <p>Add these in your <code>settings.py</code> <pre><code>EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'localhost'\nEMAIL_PORT = 1025\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\nEMAIL_USE_TLS = False\n\nEMAIL_ADDRESS_FROM = 'email-tester@test.com;\n</code></pre></p> Where are these values coming from? <p>If you check the <code>docker-compose.yml</code>, you will understand that we are just configuring the values to send via SMTP to the mail server.</p> <p>In actual production services, you will change this to your actual SMTP server like AWS SES, Sendgrid, Mailgun, etc.</p> <p>New file called <code>utils.py</code> <pre><code>from django.core.mail import send_mail\nfrom django.conf import settings\n\ndef send_email(subject, message, recipient_list):\n    send_mail(\n        subject=subject,\n        message=message,\n        from_email=settings.EMAIL_ADDRESS_FROM,\n        recipient_list=recipient_list,\n        fail_silently=False,\n    )\n</code></pre></p> <p>Now let's change it so that when a new event is created, an email is sent to the organizer.</p> <pre><code># views.py\nfrom event.utils import send_email\n\nclass EventViewSet(viewsets.ModelViewSet):\n    ...\n    def perform_create(self, serializer):\n        # Set whoever is creating the event as the organizer:\n        serializer.save(organizer=self.request.user)\n        send_email(\n            subject=\"New event created\",\n            message=\"A new event has been created\",\n            recipient_list=[self.request.user.email],\n        )\n</code></pre>"},{"location":"2024-2025-summer/introduction-to-web-development/","title":"Introduction to Web Development Space","text":"<p>Navigating the Deep Dark Space of Web Development</p> <p>This workshop covers a brief overview of the most common tools and technologies used in web development.</p>"},{"location":"2024-2025-summer/introduction-to-web-development/#content","title":"Content","text":"<ul> <li>What and Why Web Development?</li> <li>FAQs about Web Development</li> <li>Basics of Web and Limitation</li> <li>Server-side Applications (Backend)</li> <li>Others<ul> <li>Languages of the Web (the usual)</li> <li>Hosting Stuff</li> <li>CSS Frameworks</li> <li>Developer Tools</li> <li>TypeScript</li> <li>Testing</li> <li>Continuous Integration / Continuous Deployment</li> <li>Virtualisation and Containerisation</li> <li>Browsers</li> <li>Firefox Developer Tools</li> <li>Package Managers</li> <li>Version Control</li> <li>Linters and Formatters</li> <li>Teamwork</li> <li>Roadmaps</li> </ul> </li> <li>Word of Encouragement</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#what-and-why-web-development","title":"What and Why Web Development?","text":""},{"location":"2024-2025-summer/introduction-to-web-development/#what-is-web-development","title":"What is web development?","text":"<ul> <li>Websites development</li> <li>Web applications (client-side and server-side) development</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#why-web-development","title":"Why Web Development ?","text":"<ul> <li>Accessibility and Portability</li> <li>Career and On-demand in job market</li> <li>Huge possibility to combine with other emerging technologies (e.g. IoT, Machine Learning) and industry (e.g. Health, Mining, O&amp;G)</li> </ul> Career in Web Development <p>Source: Insights from Stack Overflow\u2019s 2016 survey of 50,000 developers</p> <p>\"Half of Developers are Web Developers\" </p>"},{"location":"2024-2025-summer/introduction-to-web-development/#faqs-about-web-development","title":"FAQs about Web Development","text":""},{"location":"2024-2025-summer/introduction-to-web-development/#why-code-websites-why-not-use-drag-and-drops-like-wordpress-wix","title":"Why code websites, why not use drag and drops like Wordpress, WIX?","text":"<ul> <li>Content Management System (CMS)</li> <li>Limitations on theme/template used</li> <li>Difficult to extend</li> <li>Cybersecurity</li> </ul> More information <p>CMS are one of the application of web development, but there are plenty more such as - internet of things, custom software for a particular industrial application (eg. using Machine Learning)</p> <p>CMS are usually limited to the template or plugin that you use. If those plugin don't exist, then it limits your productivity very much (difficulty to extend).</p> <p>CMS are usually built to cater for non-technical users. This means that thye become the subject of hackers. Think about a scenario where a hacker was able to find a vulnerability in WordPress, now every other WordPress site will be vulnerable.</p>"},{"location":"2024-2025-summer/introduction-to-web-development/#what-is-the-best-way-to-learn-all-these","title":"What is the best way to learn all these?","text":"<p>In summary, the best way to learn:</p> <ul> <li>Do personal projects (inspiration + motivation)</li> <li>Do team projects (get peer reviews and correct bad practices straight away)</li> <li>Watch Online Courses (to figure out what is available)</li> </ul> More Information <p>To be told that you have to learn \"this, this, and that\" before you could do things is tiresome.</p> <p>Often times, we want to learn to be a developer so that we can create cool things like software where thousands of people can use the app. We don't tend to be a developer for the sake of us needing to watch endless videos on different things.</p>"},{"location":"2024-2025-summer/introduction-to-web-development/#why-does-cfc-not-do-mobile-development-as-much-as-web-development","title":"Why does CFC not do mobile development as much as web development?","text":"<ul> <li>App stores has a developer cost</li> <li>Easier to deal/teach web technologies</li> <li>Accessibility (mobile, sensors, tablets, laptops and PCs)</li> <li>Bigger open-source community</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#if-i-already-know-a-frontend-framework-is-it-better-to-learn-another-frontend-framework-or-to-learn-a-backend-framework","title":"If I already know a frontend framework, is it better to learn another frontend framework or to learn a backend framework?","text":"<ul> <li>It is better to learn a backend framework</li> </ul> Reasoning <p>You want to build skills that complement one another rather than be an alternative.</p> <p>It is much more valuable for you to learn a backend framework because that helps you build a functional app.</p>"},{"location":"2024-2025-summer/introduction-to-web-development/#basics-of-web-and-limitation","title":"Basics of Web and Limitation","text":"HTML <p>What is it?</p> <ul> <li>Hypertext Markup Language</li> <li>Describes the structure of a web page</li> </ul> <p>Limitation</p> <ul> <li>Doesn\u2019t handle repeated content well</li> <li>No variables or calculation</li> </ul> HTML Syntax <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    Hello World!\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> CSS <p>What is it?</p> <ul> <li>Cascading Style Sheets</li> <li>Describes the presentation of a web page</li> </ul> <p>Limitation</p> <ul> <li>Most css is quite similar (Handled by CSS Libraries)</li> <li>Not very dynamic (Handled by CSS Frameworks)</li> </ul> CSS Syntax <pre><code>body {\n    background-color: #f0f0f0;\n    font-family: sans-serif;\n}\n\n.container{\n    width: 80%;\n    margin: 0 auto;\n}\n</code></pre> JS <p>What is it?</p> <ul> <li>JavaScript</li> <li>Used to program complex features on a web page</li> </ul> <p>Limitation</p> <ul> <li>Has the capability to modify the user interface, but becomes really tedious to modify interface (more about this in another workshop)</li> </ul> JS Syntax <pre><code>const bodySelector = document.querySelector('body');\nconst myFunction = () =&gt; {\n    bodySelector.innerHTML = 'Hello World 2!';\n    // Add a container class to space out\n    bodySelector.classList.add('container');\n}\nbodySelector.onclick = myFunction;\n</code></pre>"},{"location":"2024-2025-summer/introduction-to-web-development/#modern-frameworks","title":"Modern Frameworks","text":"<ul> <li>Websites can be much more\u2026 they can be web applications</li> <li>\u201cApp\u201d in a website (client-side rendering)</li> </ul> Modern Frameworks React.js <ul> <li>More mature and used more in industry</li> </ul> Vue.js <ul> <li>Growing fast in popularity and use.</li> </ul> <p>General Information</p> <ul> <li>Both are good to use and learn. </li> <li>Knowledge is transferable between the two frameworks.</li> </ul> Comparison between HTML and JSX <p></p> <p>Highlighted portions are starting chunk of distinct code.</p> HTML <pre><code>&lt;div class=\"row\"&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;devices&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Applications\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Build custom web and mobile applications to engage with your audience\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;web&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;Websites&lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Build new websites or optimise existing pages to improve online\n            visibility\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;storage&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Data Storage\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Design and create databases for efficient information storage and\n            retrieval\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;how_to_reg&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Consulting\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Empower your organisation through technical knowledge and advice\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> JSX <pre><code>import { memo } from 'react'\nimport { Row, Col, Card, CardBody } from 'reactstrap'\nimport services from 'data/services.json'\n\nconst Service = (props: {\nicon: string\ntitle: string\ndescription: string\n}) =&gt; (\n&lt;Card className='text-center border-0 bg-transparent'&gt;\n    &lt;CardBody className='px-0'&gt;\n    &lt;i className='material-icons-sharp md-lg'&gt;{props.icon}&lt;/i&gt;\n    &lt;p className='mt-4 font-weight-bold text-monospace text-larger'&gt;\n        {props.title}\n    &lt;/p&gt;\n    &lt;p className='mb-0'&gt;{props.description}&lt;/p&gt;\n    &lt;/CardBody&gt;\n&lt;/Card&gt;\n)\n\nconst Services = () =&gt; (\n&lt;Row&gt;\n    {services.map(service =&gt; (\n    &lt;Col\n        xs={12}\n        md={6}\n        lg={12 / services.length}\n        className='m-0'\n        key={service.title}\n    &gt;\n        &lt;Service {...service} /&gt;\n    &lt;/Col&gt;\n    ))}\n&lt;/Row&gt;\n)\n\nexport default memo(Services)\n</code></pre>"},{"location":"2024-2025-summer/introduction-to-web-development/#server-side-applications-backend","title":"Server-side Applications (Backend)","text":""},{"location":"2024-2025-summer/introduction-to-web-development/#how-do-devices-communicate","title":"How do devices communicate?","text":"<ul> <li>HTTP Request - Hypertext Transfer Protocol</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#what-do-server-applications-do","title":"What do server applications do?","text":"<ul> <li>Serve frontends (server-side rendering)</li> <li>Web API (Application Programming Interface)<ul> <li>Serve data (usually from a database)</li> <li>Process Request (Sending emails or SMS, Machine Learning)</li> </ul> </li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#databases","title":"Databases","text":"<p>Place to store the data</p> <p>Mongodb</p> <p>Allows for database design to be modified without complex migration or data loss</p> <p>SQL</p> <p>Typically faster and better for large amounts of data or systems that need data consistency and reliability</p>"},{"location":"2024-2025-summer/introduction-to-web-development/#others","title":"Others","text":""},{"location":"2024-2025-summer/introduction-to-web-development/#languages-of-the-web-the-usual","title":"Languages of the Web (the usual)","text":"<ul> <li>Python (Django, Flask)</li> <li>JavaScript (Node.js, Express)</li> <li>Ruby, Go, Rust, C</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#hosting-stuff","title":"Hosting Stuff","text":"<p>Many ways - Own a server - Use a 3<sup>rd</sup> party platform</p>"},{"location":"2024-2025-summer/introduction-to-web-development/#css-frameworks","title":"CSS Frameworks","text":"<p>Frontend (JS)</p> <ul> <li>Vue, React</li> <li>Nuxt.js, Next.js</li> </ul> <p>Frontend (CSS)</p> <ul> <li>MaterialUI, Vuetify</li> <li>Bootstrap</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#developer-tools","title":"Developer Tools","text":""},{"location":"2024-2025-summer/introduction-to-web-development/#typescript","title":"TypeScript","text":"<ul> <li>Type checking is super useful for complex apps</li> <li>Allows for way better javascript developer tooling</li> <li>Can be annoying if you\u2019re new at it</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#testing","title":"Testing","text":"<ul> <li>Selenium, Cypress<ul> <li>End to end automated testing tools</li> </ul> </li> <li>Jest, Mocha, Pytest<ul> <li>Unit testing</li> </ul> </li> <li>Testing is vital to software projects</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#continuous-integration-continuous-deployment","title":"Continuous Integration / Continuous Deployment","text":"<ul> <li>Automated Testing</li> <li>Event-driven scripts</li> <li>E.g. Github Action, Bitbucket Pipelines</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#virtualisation-and-containerisation","title":"Virtualisation and Containerisation","text":"<ul> <li>Allows execution of services in a virtual environment</li> <li>eg. Docker (Containerisation), Vagrant (Virtualisation)</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#browsers","title":"Browsers","text":"<ul> <li>Standard browsers<ul> <li>Google Chrome, Firefox, Edge, etc.</li> </ul> </li> <li>Backwards compatibility<ul> <li>Internet Explorer</li> </ul> </li> <li>Other<ul> <li>Mobile - Responsive</li> <li>Screen readers - Accessibility</li> </ul> </li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#firefox-developer-tools","title":"Firefox Developer Tools","text":"<ul> <li>Page Inspector<ul> <li>Visualise page aspects</li> <li>Grid layout</li> </ul> </li> <li>Web Console<ul> <li><code>console.log(\u201cHello World\u201d)</code></li> </ul> </li> <li>Responsive Design Mode<ul> <li>View from POV of different screen sizes such as mobile, tablets, etc.</li> </ul> </li> </ul> Some more tools <ul> <li>JavaScript Debugger</li> <li>Network Monitor</li> <li>Performance Tools</li> <li>Rulers</li> <li>Colour Pickers Learn more at: https://developer.mozilla.org/en-US/docs/Tools</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#package-managers","title":"Package Managers","text":"<ul> <li>Installs libraries that can be used</li> <li>Also has code shortcuts (e.g. npm run start)</li> </ul> <p>(More about <code>package.json</code> and <code>poetry.toml</code> in the projects and Package Manager Workshop)</p>"},{"location":"2024-2025-summer/introduction-to-web-development/#version-control","title":"Version Control","text":"<ul> <li>Essential for developer teams and complex software development</li> <li>Git</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#linters-and-formatters","title":"Linters and Formatters","text":"<ul> <li>Makes code formatting consistent (following standard)</li> <li>Useful with version controls to avoid pointless change</li> </ul> <p>eg.ESLint, Prettier</p>"},{"location":"2024-2025-summer/introduction-to-web-development/#teamwork","title":"Teamwork","text":"<ul> <li>Many tools out there</li> <li>Used to stop teams from stepping on each others toes</li> <li>Github Issues + Pull Requests</li> </ul>"},{"location":"2024-2025-summer/introduction-to-web-development/#roadmaps","title":"Roadmaps","text":"<p>There's an open-source community that maintains a learning roadmap for developers. See https://roadmap.sh/</p> Frontend Developer <p></p> Backend Developer <p></p> Dev-Ops <p></p>"},{"location":"2024-2025-summer/introduction-to-web-development/#word-of-encouragement","title":"Word of Encouragement","text":"Encouragement from the Tech Lead <p>\"I can admit that this journey of learning will be difficult, and can sometimes be overwhelming and demotivating. Please, if at any point of this project, you feel that you don't know enough, or you're feeling lost, please reach out! We are all in this journey together! Nobody is born talented, skills are honed with determination and willingness to learn.\" </p> <p>\"When I was a first year student entering on the CFC winter project, I didn't feel like I was good enough. I couldn't create a good looking interface, I didn't know how to use npm and all sorts of those things. I was just like many of you! if I gave up just because of all those things I didn't know, of all those self-doubts, then I wouldn't be here today. I admit that I was lucky because I was in CFC, I had connections where I can just ask questions instead of feeling lost of not knowing. So please do leverage that opportunity to reach out\" </p> <p>\"You being in this project not only gives you the opportunity to raise your talents, but you also unlock one of the biggest factor of the growth of your career, and that is the connections with your fellow software engineers.\"</p>"},{"location":"2024-2025-summer/practical-software-engineering-workflow/","title":"Practical Software Engineering Workflow","text":"<p>How software engineer GSD!</p>"},{"location":"2024-2025-summer/practical-software-engineering-workflow/#how-do-software-engineers-work","title":"How do software engineers work?","text":"<p>They use issue/ticket management system to track their work.</p> Github Issues and Jira <p>The examples are Github Issues and Jira.</p> <p> </p> <p>Listing of issues can be displayed in kanban boards.</p> Kanban Boards <p> </p>"},{"location":"2024-2025-summer/practical-software-engineering-workflow/#why-do-software-engineers-work-like-this","title":"Why do Software Engineers Work like this?","text":"Scrums <p>One example of \"agile\" ways of working and it looks like this. </p>"},{"location":"2024-2025-summer/practical-software-engineering-workflow/#what-is-git","title":"What is Git?","text":"<p>Git is a</p> <ul> <li>version control system</li> <li>tools for coordinating work for different changes</li> </ul>"},{"location":"2024-2025-summer/practical-software-engineering-workflow/#main-parts-of-git","title":"Main Parts of Git","text":"<p>Main Parts of git:</p> <ul> <li>Change Node (commit node)</li> <li>Branch</li> </ul> <p></p>"},{"location":"2024-2025-summer/practical-software-engineering-workflow/#git-different-versions","title":"Git Different Versions","text":"Software Versions <p>Nodes - Representation of a change (commits + merge)</p> <p>Main/Master: - Branch usually as production or deployed</p> <p>Development Branch - Branch used for development Used for compiling features for a release</p> <p>Feature Branch - Branch used for development for a particular issue</p>"},{"location":"2024-2025-summer/practical-software-engineering-workflow/#github-and-code-repositories","title":"GitHub and Code Repositories","text":"<p>GitHub - Place to hold code repositories</p> <p>Repositories - Place where codes are stored with different versions</p>"},{"location":"2024-2025-summer/practical-software-engineering-workflow/#interactive-workshop-time","title":"INTERACTIVE WORKSHOP TIME !!!!","text":"<ol> <li>Do the following from codersforcauses/software-engineering-practices-demo-2024-summer: Demonstration of software engineering practices (github.com):</li> <li>Look at the GitHub issues</li> <li>Assign yourself an issue</li> <li>Clone repo with <code>git clone https://github.com/codersforcauses/software-engineering-practices-demo-2024-summer.git</code></li> <li>Create a branch with the following format s{Issue Number}-{Issue Name}. <code>git checkout -b {Issue Number}-{Issue Name}</code></li> <li>Create the change to satisfy or complete the github issue</li> <li>Commit (package) the change <code>git commit -m \"{insert message here}\"</code> and push git push.</li> <li>Create a pull request and request for a reviewer from CFC peeps</li> </ol>"},{"location":"2024-2025-summer/practical-software-engineering-workflow/#other-resources","title":"Other Resources","text":"<ul> <li>Git and Github</li> <li>Superpowers Of Git</li> </ul>"},{"location":"2024-2025-summer/working-with-typescript/","title":"Working With Typescript","text":""},{"location":"2024-2025-summer/working-with-typescript/#quick-links-and-references","title":"Quick Links and References","text":"<ul> <li>Typescript Handbook</li> <li>Total Typescript (In Depth)</li> <li>Cheatsheets</li> </ul>"},{"location":"2024-2025-summer/working-with-typescript/#some-problems-with-javascript","title":"Some Problems With Javascript","text":"<p>Javascript is critical to web development but poses some challenges to developers working on large projects.  - Runtime issues (errors and undefined) - Lack of developer tooling (type annotations, refactoring)</p>"},{"location":"2024-2025-summer/working-with-typescript/#static-types-the-missing-piece","title":"Static Types, The Missing Piece","text":"<p>Static types allow for strong tooling and developer confidence - Autocomplete - Runtime error and undefined warnings - Refactoring and IDE Tools (Imports, Quick fixes)</p>"},{"location":"2024-2025-summer/working-with-typescript/#core-typescript-concepts","title":"Core Typescript Concepts","text":""},{"location":"2024-2025-summer/working-with-typescript/#typescript-in-the-wild","title":"Typescript In The Wild","text":"Spot the Typescript <pre><code>interface UserProfile {\n    id: number;\n    name: string;\n    email?: string;\n    preferences: {\n        theme: \"dark\" | \"light\";\n        notifications: boolean | null;\n    };\n}\n\nfunction getUserProfile(userId: number): UserProfile {\n    const profiles: UserProfile[] = [\n        { id: 1, name: \"Alice\", email: \"alice@example.com\", preferences: { theme: \"dark\", notifications: true } },\n        { id: 2, name: \"Bob\", preferences: { theme: \"light\", notifications: null } },\n    ];\n\n    let profile = profiles.find((p) =&gt; p.id === userId);\n    if (!profile) {\n        profile = {\n            id: userId,\n            name: `Guest-${userId}`,\n            preferences: { theme: \"light\", notifications: null },\n        };\n    }\n\n    return profile;\n}\n\nfunction getActiveUsers(userProfiles: UserProfile[]): UserProfile[] {\n    const active: UserProfile[] = userProfiles.filter(\n        (user) =&gt; user.preferences.notifications === true &amp;&amp; !!user.email\n    );\n\n    return active;\n}\n\nconst users: UserProfile[] = [\n    { id: 1, name: \"Alice\", email: \"alice@example.com\", preferences: { theme: \"dark\", notifications: true } },\n    { id: 2, name: \"Bob\", preferences: { theme: \"light\", notifications: null } },\n    { id: 3, name: \"Charlie\", email: \"charlie@example.com\", preferences: { theme: \"dark\", notifications: false } },\n];\n\nconst activeUsers = getActiveUsers(users);\n\nfunction logUserNames(users: UserProfile[]): void {\n    users.forEach((user) =&gt; {\n        console.log(user.name || \"Unknown User\");\n    });\n}\n\nlogUserNames(activeUsers);\n</code></pre> <ul> <li>Variable annotations</li> <li>Interfaces</li> <li>Arrays</li> <li>Optional and null</li> <li>Functions</li> <li>Union</li> </ul>"},{"location":"2024-2025-summer/working-with-typescript/#basic-types","title":"Basic Types","text":"Type Description Example <code>string</code> Represents text data. <code>let name: string = \"Alice\";</code> <code>number</code> Represents numeric values. <code>let age: number = 30;</code> <code>boolean</code> Represents true/false values. <code>let isActive: boolean = true;</code> <code>array</code> Represents a collection of values. <code>let items: number[] = [1, 2, 3];</code> <code>object</code> Represents a collection of key-value pairs. <code>let person: { name: string; age: number; } = { name: \"Alice\", age: 30 };</code> <code>null</code> Represents an explicitly empty value. <code>let value: null = null;</code> <code>undefined</code> Represents an uninitialized variable. <code>let value: undefined = undefined;</code> <code>any</code> Allows any type (used sparingly). <code>let data: any = \"text\"; data = 42; data = true;</code> <code>tuple</code> Represents an array with fixed types. <code>let tuple: [string, number] = [\"Alice\", 30];</code> <code>enum</code> Represents named constants. <code>enum Status { Active, Inactive } let s: Status = Status.Active;</code> <code>void</code> Represents no return value from a function. <code>function log(message: string): void { console.log(message); }</code> <code>never</code> Represents a function that never returns. <code>function error(msg: string): never { throw new Error(msg); }</code>"},{"location":"2024-2025-summer/working-with-typescript/#type-aliases","title":"Type Aliases","text":"<pre><code>type ID = number | string;\nlet productId: ID = \"123-abc\";\n</code></pre>"},{"location":"2024-2025-summer/working-with-typescript/#type-inference","title":"Type Inference","text":"<pre><code>let selectedUser = null;\n\nselectedUser = { name: 'Bob', }\n</code></pre>"},{"location":"2024-2025-summer/working-with-typescript/#functions","title":"Functions","text":"<pre><code>function add(a: number, b: number): number {\n    return a + b;\n}\n</code></pre>"},{"location":"2024-2025-summer/working-with-typescript/#objects-and-interfaces","title":"Objects and Interfaces","text":"<pre><code>type Name = {\n    first: string,\n    last: string,\n}\n\ninterface User {\n    id: number;\n    name: string;\n    isActive: boolean;\n}\n\nlet user: User = { id: 1, name: \"Alice\", isActive: true };\n</code></pre>"},{"location":"2024-2025-summer/working-with-typescript/#arrays-and-inline-objects","title":"Arrays and Inline Objects","text":"<pre><code>type StringArray = string[];\ntype NumberArray = Array&lt;number&gt;;\ntype ObjectWithNameArray = Array&lt;{ name: string }&gt;;\n</code></pre>"},{"location":"2024-2025-summer/working-with-typescript/#generics","title":"Generics","text":""},{"location":"2024-2025-summer/working-with-typescript/#typescript-in-the-ide-vs-browser","title":"Typescript In The IDE vs Browser","text":""},{"location":"2024-2025-summer/working-with-typescript/#compiling-for-the-web","title":"Compiling For The Web","text":"<p>Typescript uses the Typescript compiler (<code>tsc</code>) to transform Typescript into Javascript which can be run on the web. While applying this transformation it will check for issues and report them while compiling. </p>"},{"location":"2024-2025-summer/working-with-typescript/#local-development","title":"Local Development","text":"<p>Checking your code from the command line constantly would be tedious. IDEs come with language servers that run checks in real time using the Typescript compiler. <code>tsconfig.json</code> is a common file you will see in all Typescript projects that configures how the Typescript server runs and gives it information about your project. Typescript can then be used with other build tools to bundle and compile your Typescript into something suitable for the browser.</p>"},{"location":"2024-2025-summer/working-with-typescript/#thinking-about-types","title":"Thinking About Types","text":""},{"location":"2024-2025-summer/working-with-typescript/#help-yourself-help-others","title":"Help Yourself, Help Others","text":"<p>It's very easy to write \"loose\" types in Typescript.  <pre><code>    type file = any;\n    // vs \n    type file = string\n    // vs\n    type file = `${string}.png`\n</code></pre></p> <pre><code>    interface User {\n        name: string;\n        age: number;\n        email: string;\n    }\n\n    const user = { name: \"Bob\", age: 54 } as User;\n</code></pre> <pre><code>const getFirstElement = (arr: any[]) =&gt; {\n  return arr[0];\n};\n\nconst first = getFirstElement([1, 2, 3]);\n</code></pre> <p><code>first</code> is typed as <code>any</code></p> <pre><code>const getFirstElement = &lt;T&gt;(arr: T[]) =&gt; {\n  return arr[0];\n};\n\nconst firstNumber = getFirstElement([1, 2, 3]);\n\nconst firstString = getFirstElement([\"a\", \"b\", \"c\"]);\n</code></pre>"},{"location":"2024-winter/introduction-to-backend-development-with-django/","title":"Welcome to the Djangol!","text":"<p>Welcome to the (Django)l !: Introduction to Backend Programming with Django </p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#prerequisites-to-this-workshop","title":"Prerequisites to this Workshop","text":"<p>You need the following installed:</p> <ul> <li>Browser</li> <li>VsCode</li> <li>Docker</li> </ul> <p>The starting repo for this workshop: https://github.com/CodersforLearning/django-workshop-winter-2024</p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#what-you-will-be-building-as-part-of-this-workshop","title":"What you will be building as part of this workshop?","text":"<p>You're launching a new startup called \"Snapstagram\" - a social media app that showcases images through posts.</p> <p>Below is the schematics</p> <pre><code>erDiagram\n    user {\n        uuid user_id PK\n        string username\n        string email\n        string password\n        datetime created_at\n    }\n\n    post {\n        uuid post_id PK\n        uuid user_id FK\n        string content\n        boolean is_draft\n        datetime created_at\n        datetime updated_at\n    }\n\n    comment {\n        uuid comment_id PK\n        uuid post_id FK\n        uuid user_id FK\n        string content\n        uuid parent_comment_id\n        datetime created_at\n        datetime updated_at\n    }\n\n    image {\n        uuid image_id PK\n        uuid post_id FK\n        string url\n    }\n\n    user ||--o{ post : creates\n    user ||--o{ comment : creates\n    post ||--o{ image : contains\n    post ||--o{ comment : has\n    comment ||--o{ comment : \"replies to\"</code></pre>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#what-are-apis-and-rest-apis","title":"What are APIs and REST-APIs?","text":"<p>Application Programming Interface</p> Analogy <p>Who interacts with the user interface? - the user Who interacts with the application programming interface ? - the application program (eg. the browser) </p> <p>Representational State Transfer Application Programming Interface</p> <ul> <li> <p>backend architectural pattern that follows the GET/POST/PUT/PATCH/DELETE</p> </li> <li> <p>Can be represented in Swagger/ Open API specification</p> </li> </ul> Swagger/ Open API specification <p></p> <p>In terms of using RESTful APIs, there are some naming and implementation conventions used to accurately label the endpoint with what it does.</p> CRUD to HTTP Verb Matching for JSON standard communications with REST-APIs <p>CRUD stands for Create, Read, Update, and Delete. RESTful APIs use HTTP verbs to specify the CRUD operation an endpoint is performing.</p> HTTP Verb CRUD Operation POST Create/Update GET Read PUT Update/Replace PATCH Update/Modify DELETE Delete <p></p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#what-is-django","title":"What is Django?","text":"<p>Django</p> <ul> <li>Python web framework for creating server-side application</li> </ul> <p>Follows MVC:</p> <ul> <li>Model - database</li> <li>View \u2013 Interface (API or User Interface)</li> <li>Controller \u2013 URLs + routes</li> </ul> <p>See Documentation</p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#what-is-django-rest-framework-drf","title":"What is Django REST Framework (DRF)?","text":"<ul> <li>library for creating REST-API</li> <li>just makes it easier develop REST-API</li> </ul> <p>In:</p> <ul> <li>Authentication + Permission</li> <li>Generic API Views</li> <li>Serialisers (payload validation and format)</li> </ul> <p>See Documentation</p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#interactive-workshop-time","title":"Interactive Workshop Time!!!","text":"<p>Firstly, open your IDE (VSCode) and open the terminal.</p> <ol> <li>Clone the repo: <code>git clone https://github.com/CodersforLearning/django-workshop-winter-2024.git</code></li> <li>Go to the directory: <code>cd django-workshop-winter-2024</code></li> <li>Open in dev container</li> </ol> What does the setup script do? <pre><code>#!/bin/bash\n\nset -euxo pipefail\n\n# Install Python in the container\npip install Django==5.0.6\n\n# Bootstraps the django codebase\nrm -rf snapstagram || true # just in case it exist\ndjango-admin startproject snapstagram\n\n# Libraries needed by DRF\n# As per https://www.django-rest-framework.org/#installation\npip3 install djangorestframework==3.15.2\npip3 install Markdown==3.6       # Markdown support for the browsable API.\npip3 install django-filter==24.2  # Filtering support\npip3 install pytz==2024.1           # Timezone support\n\n# Additional libraries\n# For Frontend JWT Authentication\npip install djangorestframework-simplejwt==5.3.1\n\npip freeze &gt; snapstagram/requirements.txt\n</code></pre>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#initial-files","title":"Initial files","text":"<ul> <li><code>manage.py</code> - the entrypoint of the Django application</li> <li><code>snapstagram</code> - the main Django application</li> <li><code>snapstagram/settings.py</code> - the configuration file of the Django application</li> <li><code>snapstagram/urls.py</code> - the URL routes of the Django application</li> <li><code>snapstagram/wsgi.py</code> and <code>snapstagram/asgi.py</code> - used as the script to run production django application</li> </ul>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#lets-start-the-django-application","title":"Let's start the Django application","text":"<ol> <li>Run <code>cd snapstagram</code></li> <li>Perform the initial migration: <code>python manage.py migrate</code>. Notice that when you run this command, it will create a <code>db.sqlite3</code> file.</li> <li>Let's take a look at this file - just click it in the file explorer.</li> <li>Run the Django application: <code>python manage.py runserver</code></li> <li>Check out the Django application: http://localhost:8000</li> <li>Check out the Django admin: http://localhost:8000/admin</li> <li>Create a superuser: <code>python manage.py createsuperuser</code>. Login and look around the Django admin.</li> </ol> Additional info <p>Django ships default \"django apps\" defined <code>settings.py</code> file. You can see the list of apps in the <code>INSTALLED_APPS</code> variable.</p> <p>Django apps are plugins that can be used to extend the functionality of the Django application. It's the core method of developing with this backend framework.</p> <p>For the <code>db.sqlite3</code> file, it's the default database that Django uses. You can change this to other databases like MySQL, PostgreSQL, etc.</p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#lets-create-our-first-django-app-post","title":"Let's create our first Django app: post","text":"<p>Run this command <code>python manage.py startapp post</code>.</p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#what-did-this-command-do","title":"What did this command do?","text":"<p>Initial files that it created:</p> <ul> <li><code>post/admin.py</code> - the admin interface</li> <li><code>post/apps.py</code> - the configuration</li> <li><code>post/models.py</code> - the database schema</li> <li><code>post/tests.py</code> - the test cases</li> <li><code>post/views.py</code> - the views</li> </ul> <p>Some files you want to create later are:</p> <ul> <li><code>post/serializers.py</code> - the serializers</li> <li><code>post/urls.py</code> - the URL routes</li> <li><code>post/permissions.py</code> - the permissions</li> </ul>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#creation-of-the-database-schema","title":"Creation of the database schema","text":"Quick Reference: ERD <pre><code>erDiagram\n    user {\n        uuid user_id PK\n        string username\n        string email\n        string password\n        datetime created_at\n    }\n\n    post {\n        uuid post_id PK\n        uuid user_id FK\n        string content\n        boolean is_draft\n        datetime created_at\n        datetime updated_at\n    }\n\n    comment {\n        uuid comment_id PK\n        uuid post_id FK\n        uuid user_id FK\n        string content\n        uuid parent_comment_id\n        datetime created_at\n        datetime updated_at\n    }\n\n    image {\n        uuid image_id PK\n        uuid post_id FK\n        string url\n    }\n\n    user ||--o{ post : creates\n    user ||--o{ comment : creates\n    post ||--o{ image : contains\n    post ||--o{ comment : has\n    comment ||--o{ comment : \"replies to\"</code></pre> WIP Answer <pre><code>class Post(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    content = models.TextField()\n    is_draft = models.BooleanField(default=True)\n\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name=\"posts\")\n\n    def __str__(self):\n        # Format when printed: Post ID (Author): Content\n        return f\"Post {self.id} ({self.author}): {self.content[:30]}\"\n</code></pre> <p>After creating this, you'll need to add it in the <code>INSTALLED_APPS</code> variable in the <code>settings.py</code> file.</p> <p>Then run <code>python manage.py makemigrations</code> and <code>python manage.py migrate</code>.</p> What did these commands do? <p><code>makemigrations</code> - creates the migration files These are scripts that defines how the database schema changed.</p> <p><code>migrate</code> - applies the migration files to the database Similar to how we performed our initial migration</p> <p>When you have created that, check out <code>db.sqlite3</code> and you'll see that there's a new table called <code>post_post</code>.</p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#creation-of-the-admin-interface","title":"Creation of the admin interface","text":"WIP Answer <pre><code>from django.contrib import admin\nfrom .models import Post\n\nadmin.site.register(Post)\n</code></pre> <p>Now visit the admin interface and you'll see the Post model there.</p> A cooler example <pre><code>@admin.register(Post)\nclass PostAdmin(admin.ModelAdmin):\n    list_display = (\"id\", \"content\", \"is_draft\", \"created_at\", \"updated_at\", \"author\")\n    list_filter = (\"is_draft\", \"created_at\", \"updated_at\", \"author\")\n    search_fields = (\"content\", \"author__username\")\n    date_hierarchy = \"created_at\"\n    ordering = (\"-created_at\",)\n</code></pre>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#do-the-same-thing-again-for-image-and-comment","title":"Do the same thing again for Image and Comment","text":"Quick Reference: ERD <pre><code>erDiagram\n    user {\n        uuid user_id PK\n        string username\n        string email\n        string password\n        datetime created_at\n    }\n\n    post {\n        uuid post_id PK\n        uuid user_id FK\n        string content\n        boolean is_draft\n        datetime created_at\n        datetime updated_at\n    }\n\n    comment {\n        uuid comment_id PK\n        uuid post_id FK\n        uuid user_id FK\n        string content\n        uuid parent_comment_id\n        datetime created_at\n        datetime updated_at\n    }\n\n    image {\n        uuid image_id PK\n        uuid post_id FK\n        string url\n    }\n\n    user ||--o{ post : creates\n    user ||--o{ comment : creates\n    post ||--o{ image : contains\n    post ||--o{ comment : has\n    comment ||--o{ comment : \"replies to\"</code></pre> WIP Answer <pre><code># models.py\nclass Comment(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    content = models.TextField()\n\n    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name=\"comments\")\n    # When a comment is a reply to another comment, this field will be set\n    parent_comment = models.ForeignKey(\n        \"self\", on_delete=models.CASCADE, null=True, blank=True, related_name=\"replies\"\n    )\n\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)\n\n    def __str__(self):\n        # Format when printed: Comment ID (Author): Content\n        return f\"Comment {self.id} ({self.author}): {self.content[:30]}\"\n\n    def clean(self):\n        if self.parent_comment == self:\n            raise ValidationError(\"A comment cannot be a reply to itself\")\n        if self.parent_comment and self.parent_comment.post != self.post:\n            raise ValidationError(\"Parent comment must belong to the same post\")\n\n\nclass Image(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    url = models.URLField()\n    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name=\"images\")\n\n    def __str__(self):\n        return f\"Image {self.id} for Post {self.post.id}\"\n\n    def clean(self):\n        accepted_extensions = [\".png\", \".jpg\", \".jpeg\", \".gif\"]\n        if not self.url.endswith(tuple(accepted_extensions)):\n            raise ValidationError(\n                f\"Invalid image URL. Must end with any of {accepted_extensions}\"\n            )\n\n# admin.py\n@admin.register(Comment)\nclass CommentAdmin(admin.ModelAdmin):\n    list_display = (\n        \"id\",\n        \"content\",\n        \"post\",\n        \"parent_comment\",\n        \"created_at\",\n        \"updated_at\",\n        \"author\",\n    )\n    list_filter = (\"post\", \"parent_comment\", \"created_at\", \"updated_at\", \"author\")\n    search_fields = (\"content\", \"author__username\")\n    date_hierarchy = \"created_at\"\n    ordering = (\"-created_at\",)\n\n\n@admin.register(Image)\nclass ImageAdmin(admin.ModelAdmin):\n    list_display = (\"id\", \"url\", \"post\")\n    list_filter = (\"post\",)\n    search_fields = (\"url\",)\n    ordering = (\"id\",)\n</code></pre>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#creation-views-the-interface-in-api","title":"Creation Views: the Interface in API","text":"Installed Apps Rest Framework <p>Before going further, add <code>rest_framework</code> in <code>INSTALLED_APPS</code> in <code>settings.py</code>.</p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#serializerspy","title":"<code>serializers.py</code>","text":"<p>Serialisers are a way to convert Python models to JSON, XML or any other format you wish.</p> WIP Answer <pre><code># serializers.py\nclass PostSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Post\n        fields = \"__all__\"\n        read_only_fields = (\"id\", \"created_at\", \"updated_at\")\n</code></pre>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#viewspy-and-urlspy","title":"<code>views.py</code> and <code>urls.py</code>","text":"<p>Here's our goal: <pre><code>// Class based - programming\nGET posts in the system - /posts\nPOST create posts - /posts\nGET specific post in the system - /posts/&lt;id&gt;\nPUT/PATCH update specific post - /posts/&lt;id&gt;\nDELETE delete specific post - /posts/&lt;id&gt;\n\n// Add a comment to a post\nPOST create comment - /posts/&lt;id&gt;/comments\nUPDATE comment - /posts/&lt;id&gt;/comments/&lt;id&gt;\nDELETE comment - /posts/&lt;id&gt;/comments/&lt;id&gt;\n\n// Add image to post\nPOST create image - /posts/&lt;id&gt;/images\nDELETE image - /posts/&lt;id&gt;/images/&lt;id&gt;\n</code></pre></p> <p>Firstly, we need to set the <code>urls.py</code> to import the views from <code>post/views.py</code>.</p> <pre><code># urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/posts/\", include(\"post.urls\")) # --HERE--\n]\n</code></pre> <p>There's 2 main ways to create views</p> <ul> <li>Functional</li> <li>Class-based</li> </ul> Class-based Views <p>This is the easiest way - full of magic. If you need flexibility, you can override the methods.</p> <pre><code># post/views.py\nfrom rest_framework import viewsets\nfrom .models import Post\nfrom .serializers import PostSerializer\n\n\nclass PostViewSet(viewsets.ModelViewSet):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n\n    def perform_create(self, serializer):\n        # Automatically set the author of a post to the user making the request\n        serializer.save(author=self.request.user)\n\n# post/urls.py\nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .views import PostViewSet\n\n\nrouter = DefaultRouter()\nrouter.register(r\"\", PostViewSet, basename=\"posts\")\n\nurlpatterns = [\n    path(\"\", include(router.urls)),\n]\n</code></pre> <p>Important to note that the <code>basename</code> is used to generate the URL name. In this case, it will be <code>posts-list</code> and <code>posts-detail</code>. (you will need this automated testing)</p> Functional Views <p>This is the more flexible way, but it does mean there's quite of bit of boilerplate code.</p> <pre><code># post/views.py\n@api_view([\"GET\"])\ndef post_list(request):\n    posts = post.objects.all()\n    serializer = PostSerializer(posts, many=True)\n    return Response(serializer.data)\n\n@api_view([\"GET\"])\ndef post_detail(request, pk):\n    post = get_object_or_404(post, pk=pk)\n    serializer = PostSerializer(post)\n    return Response(serializer.data)\n\n@api_view([\"POST\"])\ndef post_create(request):\n    # Set whoever is creating the post as the organizer:\n    serializer = PostSerializer(data=request.data)\n    if serializer.is_valid():\n        serializer.save(organizer=request.user)\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@api_view([\"PUT\"])\ndef post_update(request, pk):\n    post = get_object_or_404(post, pk=pk)\n    serializer = PostSerializer(post, data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n        return Response(serializer.data)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@api_view([\"DELETE\"])\ndef post_delete(request, pk):\n    return Response(status=status.HTTP_405_METHOD_NOT_ALLOWED)\n\n# urls.py\nurlpatterns = [\n    path(\"\", views.post_list),\n    path(\"&lt;int:pk&gt;/\", views.post_detail),\n    path(\"create/\", views.post_create),\n    path(\"&lt;int:pk&gt;/update/\", views.post_update),\n    path(\"&lt;int:pk&gt;/delete/\", views.post_delete),\n]\n</code></pre> Reuse Same Path with different HTTP Methods <pre><code>@api_view([\"GET\", \"POST\"])\ndef post_list(request):\n    if request.method == \"GET\":\n        queryset = Post.objects.all()\n        serializer = PostSerializer(queryset, many=True)\n        return Response(serializer.data)\n    elif request.method == \"POST\":\n        serializer = PostSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=201)\n        return Response(serializer.errors, status=400)\n\n@api_view([\"GET\", \"PUT\", \"PATCH\", \"DELETE\"])\ndef post_detail(request, pk):\n    try:\n        post = Post.objects.get(pk=pk)\n    except Post.DoesNotExist:\n        return Response(status=404)\n\n    if request.method == \"GET\":\n        serializer = PostSerializer(post)\n        return Response(serializer.data)\n    elif request.method in [\"PUT\", \"PATCH\"]:\n        serializer = PostSerializer(post, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=400)\n    elif request.method == \"DELETE\":\n        post.delete()\n        return Response(status=204)\n</code></pre> Another Example Class-based Views <p>This is the easiest way - full of magic. If you need flexibility, you can override the methods. <pre><code># views.py\nclass PostViewSet(viewsets.ModelViewSet):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n\n    def perform_destroy(self, instance):\n        if not instance.is_draft:\n            raise serializers.ValidationError(\"Cannot delete a post.\")\n        super().perform_destroy(instance)\n</code></pre></p> <p>After that long discussion, let's create the views and play around.</p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#going-back-to-serializer-for-organizer","title":"Going back to Serializer for Organizer","text":"<pre><code>+ class UserSerializer(serializers.ModelSerializer):\n+     # read only serializer\n+     class Meta:\n+         model = User\n+         fields = (\"id\", \"username\", \"email\")\n\n\nclass PostSerializer(serializers.ModelSerializer):\n+   author = UserSerializer(read_only=True)\n\n    class Meta:\n        model = Post\n        fields = \"__all__\"\n        read_only_fields = (\"id\", \"created_at\", \"updated_at\")\n</code></pre> <p>What about if we also want to include comments?</p> <pre><code>+ class CommentSerializer(serializers.ModelSerializer):\n+     author = UserSerializer(read_only=True)\n+\n+     class Meta:\n+         model = Comment\n+         fields = \"__all__\"\n+         read_only_fields = (\"id\", \"created_at\", \"updated_at\")\n\nclass PostSerializer(serializers.ModelSerializer):\n    author = UserSerializer(read_only=True)\n+   comments = CommentSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Post\n        fields = \"__all__\"\n        read_only_fields = (\"id\", \"created_at\", \"updated_at\")\n</code></pre> <p>Now what if you want to nest all the replies as well? <pre><code>class CommentSerializer(serializers.ModelSerializer):\n    author = UserSerializer(read_only=True)\n+   replies = serializers.SerializerMethodField()\n\n    class Meta:\n        model = Comment\n        fields = \"__all__\"\n        read_only_fields = (\"id\", \"created_at\", \"updated_at\")\n\n+   def get_replies(self, obj):\n+       return CommentSerializer(obj.replies, many=True).data\n</code></pre></p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#now-lets-do-comment-endpoints","title":"Now let's do comment endpoints","text":"<pre><code># views.py\nclass PostCommentViewSet(viewsets.ModelViewSet):\n    serializer_class = CommentSerializer\n\n    def get_queryset(self):\n        # Get all comments for a specific post\n        return Comment.objects.filter(post_id=self.kwargs[\"post_pk\"])\n\n    def perform_create(self, serializer):\n        # Automatically set the author of a comment to the user making the request\n        serializer.save(author=self.request.user)\n</code></pre> <pre><code># urls.py\nrouter = DefaultRouter()\nrouter.register(r\"\", PostViewSet, basename=\"posts\")\n+router.register(\n+    r\"(?P&lt;post_pk&gt;[^/.]+)/comments\", PostCommentViewSet, basename=\"comments\"\n+)\n</code></pre> Image API endpoints are left as an exercise to the reader <ul> <li>Create a new serializer for images</li> <li>Create a new viewset for images</li> <li>Add the viewset to the router</li> <li>Add the router to the urls</li> </ul>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#bonus-filters-and-search","title":"Bonus: Filters and Search","text":"<p>https://www.django-rest-framework.org/api-guide/filtering/</p> <p>What if I want to only see posts that are not yet published?</p> <p>Need to add this in <code>settings.py</code> <pre><code>REST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']\n}\n</code></pre></p> <p>then in <code>views.py</code> <pre><code>+ from django_filters.rest_framework import DjangoFilterBackend\n+ from rest_framework import filters\n...\nclass PostViewSet(viewsets.ModelViewSet):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n+   filter_backends = [DjangoFilterBackend, filters.SearchFilter]\n+   filterset_fields = [\"is_draft\", \"author\"]\n+   search_fields = [\"content\", \"author__username\"]\n\n    def perform_create(self, serializer):\n        # Automatically set the author of a post to the user making the request\n        serializer.save(author=self.request.user)\n</code></pre></p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#bonus-viewset-actions-will-not-be-covered-in-this-workshop","title":"Bonus: Viewset Actions (Will not be covered in this workshop)","text":"<p>If you want to create a special endpoint that doesn't follow the traditional CRUD operations, you can use viewset actions. Docs: Viewset Actions</p> <p>For example, what if you want a new endpoint called <code>POST /api/posts/&lt;id&gt;/schedule-publish</code>, which adds to another database, and there's some task that will change the <code>is_draft</code> to <code>False</code> after a certain time.</p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#automated-testing","title":"Automated Testing","text":"<p>https://www.django-rest-framework.org/api-guide/testing/</p> <pre><code>from rest_framework.test import APITestCase\nfrom django.contrib.auth.models import User\nfrom .models import Post\nfrom django.urls import reverse\n\n\n# Test all HTTP methods for `PostViewSet`\nclass PostTest(APITestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username=\"test\", password=\"test\")\n        self.client.force_authenticate(user=self.user)\n\n    def test_create_post(self):\n        data = {\"content\": \"Hello, World!\"}\n        url = reverse(\"posts-list\")\n        response = self.client.post(url, data)\n        self.assertEqual(response.status_code, 201)\n        self.assertEqual(Post.objects.count(), 1)\n        self.assertEqual(Post.objects.get().content, \"Hello, World!\")\n\n    def test_list_posts(self):\n        Post.objects.create(content=\"Hello, World!\")\n        Post.objects.create(content=\"Hello, Django!\")\n        url = reverse(\"posts-list\")\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(len(response.data), 2)\n\n    def test_retrieve_post(self):\n        post = Post.objects.create(content=\"Hello, World!\")\n        url = reverse(\"posts-detail\", args=[post.id])\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.data[\"content\"], \"Hello, World!\")\n\n    def test_delete_post(self):\n        post = Post.objects.create(content=\"Hello, World!\")\n        url = reverse(\"posts-detail\", args=[post.id])\n        response = self.client.delete(url)\n        self.assertEqual(response.status_code, 204)\n        self.assertEqual(Post.objects.count(), 0)\n\n    # ... All other methods are left to the reader to implement\n</code></pre> <p>To run this test, run <code>python manage.py test</code></p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>What if we only want the <code>PUT/PATCH/DELETE</code> methods to be accessible by the organizer?</p> <p>Docs: - Authentication https://www.django-rest-framework.org/api-guide/authentication/ - Authorization/Permissions https://www.django-rest-framework.org/api-guide/permissions/</p> <pre><code># permissions.py\nfrom rest_framework import permissions\n\n# The organizer is the only one allowed to update or delete an post.\nclass IsAuthorOrReadOnly(permissions.BasePermission):\n    def has_object_permission(self, request, view, obj):\n        # Read permissions are allowed to any request,\n        # so we'll always allow GET, HEAD or OPTIONS POST.\n        if request.method in [*permissions.SAFE_METHODS, 'POST']:\n            return True\n\n        # Write permissions are only allowed to the organiser of the post.\n        return obj.author == request.user\n\n# views.py\nclass PostViewSet(viewsets.ModelViewSet):\n    ...\n    permission_classes = [IsAuthorOrReadOnly]\n    ...\n</code></pre>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#tdd-test-driven-development-with-multiple-accounts","title":"TDD: Test-Driven Development With Multiple Accounts","text":"<p>This is a perfect showcase how it's very difficult to manage manually testing with multiple accounts.</p> <pre><code>class PostTest(APITestCase):\n    ...\n    def test_not_author_cannot_modify(self):\n        other_user = User.objects.create_user(username=\"other\", password=\"other\")\n        post = Post.objects.create(content=\"Hello, World!\", author=other_user)\n        data = {\"content\": \"Hello, Django!\"}\n        url = reverse(\"posts-detail\", args=[post.id])\n\n        # The client is authenticated as `self.user`, not `other_user`\n        response = self.client.put(url, data)\n        self.assertEqual(response.status_code, 403)\n        self.assertEqual(Post.objects.get().content, \"Hello, World!\")\n        response = self.client.patch(url, data)\n        self.assertEqual(response.status_code, 403)\n        self.assertEqual(Post.objects.get().content, \"Hello, World!\")\n        response = self.client.delete(url)\n        self.assertEqual(response.status_code, 403)\n        self.assertEqual(Post.objects.count(), 1)\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n</code></pre> How to manually test this? <ul> <li>Login as the organiser</li> <li>Create an Post</li> <li>Create a new user</li> <li>Login as the new user</li> <li>Try to modify the Post</li> <li>Check that it returns a 403 Forbidden</li> </ul> Exercise for the reader: Fix broken test <p>The example code given is broken after the authentication enforcement. Can you fix the issue?</p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#extra-reading-jwt-authentication","title":"Extra-Reading - JWT Authentication","text":"<p>Summary of Django Simple JWT</p> <p>The only key bit to know is</p> <p>install <code>pip install djangorestframework-simplejwt</code></p> <p>in <code>settings.py</code> <pre><code>REST_FRAMEWORK = {\n    ...\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        ...\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n    ...\n}\n</code></pre></p> <p>in <code>urls.py</code> <pre><code>from rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n)\n\nurlpatterns = [\n    ...\n    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'), # Login\n    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'), # Refresh tokens\n    ...\n]\n</code></pre></p> <p>If you login via <code>/api/token</code> , you will send something like this </p> <pre><code>{\n    \"username\":\"test_user\",\n    \"password\":\"test_password\"\n}\n</code></pre> <p>you're going to get something like this back</p> <pre><code>{\n  \"access\":\"eyJh...\",\n  \"refresh\":\"eyJhb...\"\n}\n</code></pre> <p>And if you are using an authenticated endpoint, you need to add the <code>Authorization</code> header with the token. <code>\"Authorization: Bearer eyJhbEXAMPLEOFJWTOKEN...\"</code></p>"},{"location":"2024-winter/introduction-to-backend-development-with-django/#bonus-sending-emails","title":"Bonus\" Sending Emails","text":"<p>Run <code>docker-compose up</code> to start the mail server.</p> <p>Your mail server will have this UI at http://localhost:8025/. It communicates via SMTP on port 1025.</p> <p>Add these in your <code>settings.py</code> <pre><code>EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'host.docker.internal'\nEMAIL_PORT = 1025\nEMAIL_HOST_USER = ''\nEMAIL_HOST_PASSWORD = ''\nEMAIL_USE_TLS = False\n\nEMAIL_ADDRESS_FROM = 'email-tester@test.com'\n</code></pre></p> Where are these values coming from? <p>If you check the <code>docker-compose.yml</code>, you will understand that we are just configuring the values to send via SMTP to the mail server.</p> <p>In actual production services, you will change this to your actual SMTP server like AWS SES, Sendgrid, Mailgun, etc.</p> <p>New file called <code>utils.py</code> <pre><code>from django.core.mail import send_mail\nfrom django.conf import settings\n\ndef send_email(subject, message, recipient_list):\n    send_mail(\n        subject=subject,\n        message=message,\n        from_email=settings.EMAIL_ADDRESS_FROM,\n        recipient_list=recipient_list,\n        fail_silently=False,\n    )\n</code></pre></p> <p>Now let's change it so that when a new post is created, an email is sent to the organizer.</p> <pre><code># views.py\nfrom .utils import send_email\n\nclass PostViewSet(viewsets.ModelViewSet):\n    ...\n    def perform_create(self, serializer):\n        # Automatically set the author of a post to the user making the request\n        serializer.save(author=self.request.user)\n        send_email(\"New Post Created\", \"A new post has been created on Snapstagram!\", [self.request.user.email])\n</code></pre> <p>Now when you create a new post, you should see an email in the mail server at http://localhost:8025/.</p>"},{"location":"2024-winter/introduction-to-docker/","title":"Introduction to Docker","text":""},{"location":"2024-winter/introduction-to-docker/#prerequisites","title":"Prerequisites","text":"<p>You need the following installed:</p> <ul> <li>Git</li> <li>Node.js</li> <li>Docker</li> <li>VSCode (highly recommended)</li> </ul> <p>The starting repo for this workshop: https://github.com/codersforcauses/docker-workshop</p>"},{"location":"2024-winter/introduction-to-docker/#what-you-will-be-building-as-part-of-this-workshop","title":"What you will be building as part of this workshop?","text":"<p>CFC wants to make an app for accepting coffee orders. You will be creating a Dockerfile for CFC's (totally real) new and upcoming rebrand: Coders for Coffee \ud83d\udc33. The architecture is a simple frontend and backend both made in TypeScript. Below is a diagram of it:</p> <p></p>"},{"location":"2024-winter/introduction-to-docker/#important-information","title":"Important information","text":"<p>This workshop relies on a certain understanding of terminal commands and a bit of familiarity with Node.js projects. If you're not familiar with these, don't worry! I'll be explaining everything as we go along. If you have any questions, feel free to ask.</p>"},{"location":"2024-winter/introduction-to-docker/#what-is-docker","title":"What is Docker?","text":"<p>Docker is a platform for developing, shipping, and running applications using containerization. It allows you to package an application and its dependencies into a container that can run on any machine. This makes it easy to deploy applications in a consistent and reproducible way. Simply put, it's like a way of running mini virtual machines inside your computer.</p>"},{"location":"2024-winter/introduction-to-docker/#why-use-docker","title":"Why use Docker?","text":"<ul> <li>Consistency: Docker containers are isolated from the host system and other containers, ensuring that the application runs the same way everywhere.</li> <li>Portability: Containers can be run on any machine that has Docker installed, making it easy to move applications between environments.</li> <li>Efficiency: Containers are lightweight and share the host system's resources, making them more efficient than virtual machines.</li> <li>Scalability: Docker makes it easy to scale applications by running multiple containers on the same host or across multiple hosts.</li> <li>Security: Containers are isolated from each other and the host system, providing an additional layer of security.</li> <li>DevOps: Docker is a key tool in the DevOps toolchain, enabling developers to build, test, and deploy applications more easily. Imagine a software job where instead of writing software for end-users, you write software to make developers' lives easier!</li> </ul>"},{"location":"2024-winter/introduction-to-docker/#definitions","title":"Definitions","text":"<ul> <li>Dockerfile \ud83d\udcdc: A text file that contains instructions for building a Docker image. It specifies the base image, dependencies, environment variables, and commands to run when the container starts. Think like a recipe for baking a cake.</li> <li>Image \ud83d\udcc0: A read-only template with instructions for creating a Docker container. It contains the application code, runtime, libraries, environment variables, and configuration files. Think like a CD with music on it.</li> <li>Container \u25b6\ufe0f: An instance of an image that can be run as a process on the host machine. It is isolated from other containers and the host system. Think like a CD in a CD player.</li> </ul>"},{"location":"2024-winter/introduction-to-docker/#how-do-i-use-docker","title":"How do I use Docker?","text":"<p>This is a high-level overview of how Docker works:</p> <p></p> <p>In action, you'll only need to know a few commands to get started:</p> <ol> <li><code>docker pull</code>: Pull an image from a registry (like Docker Hub).</li> <li><code>docker run &lt;image&gt;</code>: Run a container from an image.</li> <li><code>docker build</code>: Build a Dockerfile into an image.</li> </ol>"},{"location":"2024-winter/introduction-to-docker/#getting-started","title":"Getting started","text":"<p>Firstly, open your IDE and open the terminal.</p> <ol> <li>Clone the repository: <code>git clone https://github.com/codersforcauses/docker-workshop.git</code></li> <li>Go to the directory: <code>cd docker-workshop</code></li> <li>Run the setup script: <code>npm run setup</code></li> <li>Run the app: <code>npm run dev</code>. Visit http://localhost:3000 to see it in action.</li> </ol> What does the setup script do? <p>The setup script installs the dependencies for both the frontend and backend. It is located in the <code>package.json</code> in the root. Formatted nicely:</p> <pre><code>npm install --prefix apps/frontend -g &amp;&amp; # install dependencies for the frontend\nnpm install --prefix apps/backend -g &amp;&amp; # install dependencies for the backend\nnpm install # install dependencies for the root (just a little handy package to run both apps with one command)\n</code></pre>"},{"location":"2024-winter/introduction-to-docker/#what-does-the-app-do","title":"What does the app do?","text":"<p>The frontend is a simple form that takes a user's order and sends it to the backend. The backend then saves the order to a \"database\". Below is a screenshot of the app:</p> <p></p>"},{"location":"2024-winter/introduction-to-docker/#frontend","title":"Frontend","text":"<p>The frontend is a single page app that takes orders. It runs at http://localhost:3000.</p> Where is the frontend code? <p>The frontend code is located in the <code>apps/frontend</code> directory. The main file is <code>src/App.tsx</code>.</p>"},{"location":"2024-winter/introduction-to-docker/#backend","title":"Backend","text":"<p>The backend is a simple Hono http server that listens for certain requests. It runs at http://localhost:3001. There are 3 important endpoints:</p> <ol> <li><code>GET /</code> - Show a simple page to check if the server is running</li> <li><code>GET /orders</code> - Get all orders</li> <li><code>POST /orders</code> - Create an order</li> </ol> Where is the backend code? <p>The backend code is located in the <code>apps/backend</code> directory. The main file is <code>src/index.ts</code>.</p> <p>You can view the first two by going to http://localhost:3001 and http://localhost:3001/orders in your browser.</p>"},{"location":"2024-winter/introduction-to-docker/#what-do-we-need-to-do","title":"What do we need to do?","text":"<p>We need to create a Dockerfile to build the frontend and backend to images, then run them as containers. I have already created a Dockerfile for the backend, which is located in the <code>apps/backend</code> directory. You will need to create a Dockerfile for the frontend.</p> Can I cheat? <p>Yes... If you choose to look at it, you might find it helpful. However, it comes with a few optimisations which may be confusing.</p>"},{"location":"2024-winter/introduction-to-docker/#building-and-running-an-image","title":"Building and running an image","text":"<p>Close the app dev server we ran earlier with <code>CTRL+C</code>.</p> <p>Let's start by learning how to build and run a Docker image. First, let's build the backend:</p> <pre><code>docker build -t docker-workshop-backend ./apps/backend\n</code></pre> <p>This command builds an image from the Dockerfile in the <code>apps/backend</code> directory and tags it (<code>-t</code>) with the name <code>docker-workshop-backend</code>. Otherwise, Docker will give it a random name.</p> <p>Now, let's run the image we've built:</p> <pre><code>docker run -p 3001:3001 docker-workshop-backend\n</code></pre> <p>Port Mapping</p> <p>But wait, what does <code>-p 3001:3001</code> do? I mentioned earlier that Docker basically runs mini virtual machines --- so let's visualise what that looks like.</p> <p></p> <p>In order for our container to make connect with the outside world, we need to create a little tunnel. This is done by mapping a port on the host machine to a port on the container. In our case, I've configured the backend to run internally on port <code>3001</code>. Therefore, we need to map that internal port to a port on the host machine so we can access it. I kept it simple and mapped it to the same port, but you can change it to any port you like (given our frontend knows about it). Ports are mapped like this: <code>-p &lt;host-port&gt;:&lt;container-port&gt;</code> This also improves security, as you can run multiple containers on the same host machine without them interfering with each other.</p> <p>Now, visit http://localhost:3001 to see the backend now running from a Docker container.</p>"},{"location":"2024-winter/introduction-to-docker/#manual-build","title":"Manual build","text":"<p>To get a better idea of what we need to do, let's build the frontend manually.</p>"},{"location":"2024-winter/introduction-to-docker/#step-1-what-are-we-building","title":"Step 1: What are we building?","text":"<p>Imagine you are a robot that will execute commands to build the app to be production-ready. Regardless of what you're making, it'll usually fall into this pattern:</p> <ol> <li>Install dependencies</li> <li>Build the app (if needed)</li> <li>Serve or run the build files</li> </ol>"},{"location":"2024-winter/introduction-to-docker/#step-2-mapping-them-to-commands","title":"Step 2: Mapping them to commands","text":"<p>The frontend is a React app that uses TypeScript, so we'll follow the template. If you're unsure, you can always Google what you need e.g. \"How to install dependenceis React app\":</p> <ol> <li>In your terminal, navigate to the frontend directory: <code>cd apps/frontend</code></li> <li>Install dependencies: <code>npm install</code></li> <li>Build the app: <code>npm run build</code></li> <li>Serve the build files: <code>npm run start</code></li> </ol> <p>The <code>build</code> and <code>start</code> scripts are located in <code>apps/frontend/package.json</code>.</p> <pre><code>{\n    // ...\n    \"scripts\": {\n        \"build\": \"tsc &amp;&amp; vite build\",\n        \"start\": \"serve dist -p 9876\"\n    }\n    // ...\n}\n</code></pre> <p>You can run these commands in the terminal yourself and open it up at http://localhost:9876/ to see the optimised production build of the frontend. Notice how the bottom text has changed from \"development\" to \"production\".</p>"},{"location":"2024-winter/introduction-to-docker/#creating-a-dockerfile","title":"Creating a Dockerfile","text":"<p>When creating a Dockerfile, it's essentially the same process as manually doing it. The only difference is that you're automating it in a file. Start by creating a new file called <code>Dockerfile</code> in the <code>apps/frontend</code> directory.</p>"},{"location":"2024-winter/introduction-to-docker/#base-image","title":"Base image","text":"<p>All Dockerfiles start with a <code>FROM</code> command, which specifies the base image to use. This image is usually a lightweight Linux distribution with the necessary tools and libraries to run the application. For our frontend, we will use the <code>node:20-alpine</code> image. This specifies the (as of writing) LTS version of Node.js with the Alpine Linux distribution.</p> How do I know what image to use? <p>There are a number of things to consider when choosing a base image:</p> <ul> <li>Application: Because we're running a Node.js app, an image with Node.js already installed is a good choice.</li> <li>Size: Smaller images are faster to download and use less disk space.</li> <li>Security: Official images are more secure and are regularly updated. Most of the time you'll be using images from Docker Hub.</li> <li>Compatibility: Make sure the image is compatible with your application. In this case, the current LTS release for Node.js is 20, so we will use <code>node:20-alpine</code>. Locking the version down is also good practice to prevent images from suddenly breaking.</li> </ul> <pre><code># Use the official Node.js image as the base image\nFROM node:20-alpine\n</code></pre>"},{"location":"2024-winter/introduction-to-docker/#working-directory","title":"Working directory","text":"<p>We're in linux land now. First, let's create a directory to put our production files in. This is done with the <code>WORKDIR</code> command.</p> <pre><code>FROM node:20-alpine\n\n# Set the working directory in the container\nWORKDIR /app\n</code></pre> Why do we need a working directory? <p>The <code>WORKDIR</code> command sets the working directory for any subsequent commands in the Dockerfile. This is where the application code will be copied to and where the application will run from. It's like changing directories in the terminal. Just like your own computer, you don't want to group important system files with your projects. It can be named anything you like, but the general convention is to name it <code>/app</code>.</p>"},{"location":"2024-winter/introduction-to-docker/#copying-files","title":"Copying files","text":"<p>Next, we need to copy our source code into the image. This is done with the <code>COPY</code> command.</p> <pre><code># Use the official Node.js image as the base image\nFROM node:20-alpine\nWORKDIR /app\n\n# Copy the important files to the working directory\nCOPY . ./\n</code></pre> What are we copying? <p>This command copies everything in the same directory where the Dockerfile is (<code>.</code>) from the host machine to the working directory in the container (<code>./</code>). This is the bare minimum we need to build the frontend. i.e. src, public, package.json, etc.</p>"},{"location":"2024-winter/introduction-to-docker/#installing-dependencies-and-building","title":"Installing dependencies and building","text":"<p>Now that we have our source code in the image, we need to install the dependencies. This is done with the <code>RUN</code> command. You can execute any supported command from the base image specified. Here, we run both <code>npm install</code> and <code>npm run build</code> in succession using <code>&amp;&amp;</code>.</p> <pre><code>FROM node:20-alpine\n\nWORKDIR /app\nCOPY . ./\n\n# Install dependencies and build the app\nRUN npm install &amp;&amp; npm run build\n</code></pre> Why not do it on separate lines? <p>The reason we chain install <code>&amp;&amp;</code> build is to reduce the number of layers in the image. Each <code>RUN</code> command creates a new layer in the image, which is essentially a snapshot of everything you've <code>RUN</code> up until now. More layers means a larger image size. By chaining commands together, we can reduce the number of layers and make the image smaller. Docker uses this to cache layers, so if you change a file, it will only rebuild the layers that depend on that file, saving time. In our case, our two commands both depend on the same files, so we should group them together.</p>"},{"location":"2024-winter/introduction-to-docker/#serving-the-build","title":"Serving the build","text":"<p>We're almost there! The last thing we need to do is serve the build files. This is done with the <code>CMD</code> command. This command specifies the command to run when the container starts. In our case, we want to run <code>npm run start</code>.</p> <pre><code>FROM node:20-alpine\nWORKDIR /app\n\nCOPY . ./\n\nRUN npm install &amp;&amp; npm run build\n\n# Serve the build files, note how it's an array\nCMD [\"npm\", \"run\", \"start\"]\n</code></pre> <p>We're done --- not. There's one last thing we need to do: specify the port the server will run on. This is done with the <code>EXPOSE</code> command. Notice how earlier, <code>npm run start</code> actually started the server on port <code>9876</code>, so let's expose that instead.</p> <pre><code>FROM node:20-alpine\nWORKDIR /app\n\nCOPY . ./\n\nRUN npm install &amp;&amp; npm run build\n\n# Serve the build files\nEXPOSE 9876\nCMD [\"npm\", \"run\", \"start\"]\n</code></pre>"},{"location":"2024-winter/introduction-to-docker/#done","title":"Done","text":"<p>You can now build and run the frontend image. We can actually specify a specific port in the <code>CMD</code>, but I'm just going to map it to port <code>3000</code> on the host machine when running the container.</p> <pre><code>docker build -t docker-workshop-frontend ./apps/frontend\ndocker run -p 3000:9876 docker-workshop-frontend\n</code></pre> <p>If we open up Docker desktop, you can even inspect the container's filesystem to see what we've done.</p> <p></p> <p>The frontend is now running at http://localhost:3000!</p>"},{"location":"2024-winter/introduction-to-docker/#optimising-the-dockerfile","title":"Optimising the Dockerfile","text":"<p>Let's think about what we've done. We've copied the source code, installed dependencies, built the app, and served the build files. But there are a few things we can do to optimise the Dockerfile:</p> <ul> <li>Only have production dependencies in the image. Sometimes we developers install dev dependencies that aren't needed in production, but make our lives easier. If you take a look at <code>apps/frontend/package.json</code>, you'll see a bunch of them.</li> <li>Don't have the source code in the image. We only need the built files to run the app. This reduces the image size.</li> </ul>"},{"location":"2024-winter/introduction-to-docker/#prune-the-dependencies","title":"Prune the dependencies","text":"<p>This is the easiest one. For a node app, you can do <code>npm prune --production</code> to remove all dev dependencies.</p> <pre><code>FROM node:20-alpine\nWORKDIR /app\n\nCOPY . ./\n\n# Cleanup in the same layer\nRUN npm install &amp;&amp; npm run build &amp;&amp; npm prune --production\n\n# Serve the build files\nEXPOSE 9876\nCMD [\"npm\", \"run\", \"start\"]\n</code></pre>"},{"location":"2024-winter/introduction-to-docker/#multi-stage-builds","title":"Multi-Stage builds","text":"<p>Now we want to remove the source code from the image. You might think you could build the app outside the image, but that would mean you'd need to have Node.js installed on your machine, which defeats the purpose of containerisation. Additionally, some dependencies are platform-specific, so the app might not even work when put inside the container. This is where multi-stage builds come in.</p> <p>A multi-stage build is a feature of Docker that allows you to use multiple <code>FROM</code> commands in a single Dockerfile. Each <code>FROM</code> command starts a new stage in the build process. You can copy files from one stage to another, allowing you to build the app in one stage and copy the built files to another stage.</p> <pre><code># Stage 0: Define a common image for building and running\nFROM node:20-alpine AS base\n\n\n# Stage 1: Build the app\nFROM base AS builder\nWORKDIR /app\n\nCOPY . ./\n\nRUN npm install &amp;&amp; npm run build &amp;&amp; npm prune --production\n\n# Stage 2: Serve the build files\nFROM base AS runner\nWORKDIR /app\n\n# Copy dependencies\nCOPY --from=builder /app/node_modules ./node_modules\n# Copy built files\nCOPY --from=builder /app/dist ./dist\n# Copy package.json so we can run `npm run start`\nCOPY --from=builder /app/package.json ./package.json\n\nEXPOSE 9876\nCMD [\"npm\", \"run\", \"start\"]\n</code></pre>"},{"location":"2024-winter/introduction-to-docker/#final-touches","title":"Final touches","text":"<p>So now we know how to build a Dockerfile into an image and run it as a container. But there is one more thing we can do to make our lives easier: Docker Compose.</p> <p>Docker Compose is a tool for defining and running multi-container Docker applications. It allows you to define the services, networks, and volumes for your application in a single file. This makes it easy to start, stop, and manage your application with a single command.</p> <p>I've already created a <code>docker-compose.yml</code> file for you. It defines two services: <code>frontend</code> and <code>backend</code>. Instead of doing <code>docker run ...</code> in two terminals, you can now can run both services with a single command. You don't even have to build the images, as Docker Compose will do that for you!</p> <pre><code>docker compose up\n</code></pre> <p>You also might find the frontend starting on port <code>9876</code> inside the container to be a little confusing. You can change the port mapping in the <code>docker-compose.yml</code> file to map it to port <code>3000</code> on the host machine. Don't forget to change the <code>package.json</code> script and the <code>EXPOSE</code> command in the Dockerfile as well.</p>"},{"location":"2024-winter/introduction-to-docker/#conclusion","title":"Conclusion","text":"<p>This is just a small taste of what Docker can do. You could put your entire dev environment inside, push images to a registry and run them in the cloud, or even run a bunch of them in a Kubernetes cluster. Keep in mind that we only built a Dockerfile for a simple React app, so it'll be a different depending on what you do. Luckily, there are countless resources online to help you out --- just google \"how to dockerise a  app\"."},{"location":"2024-winter/introduction-to-web-development/","title":"Introduction to Web Development Space","text":"<p>Navigating the Deep Dark Space of Web Development</p> <p>This workshop covers a brief overview of the most common tools and technologies used in web development.</p>"},{"location":"2024-winter/introduction-to-web-development/#content","title":"Content","text":"<ul> <li>What and Why Web Development?</li> <li>FAQs about Web Development</li> <li>Basics of Web and Limitation</li> <li>Server-side Applications (Backend)</li> <li>Others<ul> <li>Languages of the Web (the usual)</li> <li>Hosting Stuff</li> <li>CSS Frameworks</li> <li>Developer Tools</li> <li>TypeScript</li> <li>Testing</li> <li>Continuous Integration / Continuous Deployment</li> <li>Virtualisation and Containerisation</li> <li>Browsers</li> <li>Firefox Developer Tools</li> <li>Package Managers</li> <li>Version Control</li> <li>Linters and Formatters</li> <li>Teamwork</li> <li>Roadmaps</li> </ul> </li> <li>Word of Encouragement</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#what-and-why-web-development","title":"What and Why Web Development?","text":""},{"location":"2024-winter/introduction-to-web-development/#what-is-web-development","title":"What is web development?","text":"<ul> <li>Websites development</li> <li>Web applications (client-side and server-side) development</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#why-web-development","title":"Why Web Development ?","text":"<ul> <li>Accessibility and Portability</li> <li>Career and On-demand in job market</li> <li>Huge possibility to combine with other emerging technologies (e.g. IoT, Machine Learning) and industry (e.g. Health, Mining, O&amp;G)</li> </ul> Career in Web Development <p>Source: Insights from Stack Overflow\u2019s 2016 survey of 50,000 developers</p> <p>\"Half of Developers are Web Developers\" </p>"},{"location":"2024-winter/introduction-to-web-development/#faqs-about-web-development","title":"FAQs about Web Development","text":""},{"location":"2024-winter/introduction-to-web-development/#why-code-websites-why-not-use-drag-and-drops-like-wordpress-wix","title":"Why code websites, why not use drag and drops like Wordpress, WIX?","text":"<ul> <li>Content Management System (CMS)</li> <li>Limitations on theme/template used</li> <li>Difficult to extend</li> <li>Cybersecurity</li> </ul> More information <p>CMS are one of the application of web development, but there are plenty more such as - internet of things, custom software for a particular industrial application (eg. using Machine Learning)</p> <p>CMS are usually limited to the template or plugin that you use. If those plugin don't exist, then it limits your productivity very much (difficulty to extend).</p> <p>CMS are usually built to cater for non-technical users. This means that thye become the subject of hackers. Think about a scenario where a hacker was able to find a vulnerability in WordPress, now every other WordPress site will be vulnerable.</p>"},{"location":"2024-winter/introduction-to-web-development/#what-is-the-best-way-to-learn-all-these","title":"What is the best way to learn all these?","text":"<p>In summary, the best way to learn:</p> <ul> <li>Do personal projects (inspiration + motivation)</li> <li>Do team projects (get peer reviews and correct bad practices straight away)</li> <li>Watch Online Courses (to figure out what is available)</li> </ul> More Information <p>To be told that you have to learn \"this, this, and that\" before you could do things is tiresome.</p> <p>Often times, we want to learn to be a developer so that we can create cool things like software where thousands of people can use the app. We don't tend to be a developer for the sake of us needing to watch endless videos on different things.</p>"},{"location":"2024-winter/introduction-to-web-development/#why-does-cfc-not-do-mobile-development-as-much-as-web-development","title":"Why does CFC not do mobile development as much as web development?","text":"<ul> <li>App stores has a developer cost</li> <li>Easier to deal/teach web technologies</li> <li>Accessibility (mobile, sensors, tablets, laptops and PCs)</li> <li>Bigger open-source community</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#if-i-already-know-a-frontend-framework-is-it-better-to-learn-another-frontend-framework-or-to-learn-a-backend-framework","title":"If I already know a frontend framework, is it better to learn another frontend framework or to learn a backend framework?","text":"<ul> <li>It is better to learn a backend framework</li> </ul> Reasoning <p>You want to build skills that complement one another rather than be an alternative.</p> <p>It is much more valuable for you to learn a backend framework because that helps you build a functional app.</p>"},{"location":"2024-winter/introduction-to-web-development/#basics-of-web-and-limitation","title":"Basics of Web and Limitation","text":"HTML <p>What is it?</p> <ul> <li>Hypertext Markup Language</li> <li>Describes the structure of a web page</li> </ul> <p>Limitation</p> <ul> <li>Doesn\u2019t handle repeated content well</li> <li>No variables or calculation</li> </ul> HTML Syntax <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    Hello World!\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> CSS <p>What is it?</p> <ul> <li>Cascading Style Sheets</li> <li>Describes the presentation of a web page</li> </ul> <p>Limitation</p> <ul> <li>Most css is quite similar (Handled by CSS Libraries)</li> <li>Not very dynamic (Handled by CSS Frameworks)</li> </ul> CSS Syntax <pre><code>body {\n    background-color: #f0f0f0;\n    font-family: sans-serif;\n}\n\n.container{\n    width: 80%;\n    margin: 0 auto;\n}\n</code></pre> JS <p>What is it?</p> <ul> <li>JavaScript</li> <li>Used to program complex features on a web page</li> </ul> <p>Limitation</p> <ul> <li>Has the capability to modify the user interface, but becomes really tedious to modify interface (more about this in another workshop)</li> </ul> JS Syntax <pre><code>const bodySelector = document.querySelector('body');\nconst myFunction = () =&gt; {\n    bodySelector.innerHTML = 'Hello World 2!';\n    // Add a container class to space out\n    bodySelector.classList.add('container');\n}\nbodySelector.onclick = myFunction;\n</code></pre>"},{"location":"2024-winter/introduction-to-web-development/#modern-frameworks","title":"Modern Frameworks","text":"<ul> <li>Websites can be much more\u2026 they can be web applications</li> <li>\u201cApp\u201d in a website (client-side rendering)</li> </ul> Modern Frameworks React.js <ul> <li>More mature and used more in industry</li> </ul> Vue.js <ul> <li>Growing fast in popularity and use.</li> </ul> <p>General Information</p> <ul> <li>Both are good to use and learn. </li> <li>Knowledge is transferable between the two frameworks.</li> </ul> Comparison between HTML and JSX <p></p> <p>Highlighted portions are starting chunk of distinct code.</p> HTML <pre><code>&lt;div class=\"row\"&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;devices&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Applications\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Build custom web and mobile applications to engage with your audience\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;web&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;Websites&lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Build new websites or optimise existing pages to improve online\n            visibility\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;storage&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Data Storage\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Design and create databases for efficient information storage and\n            retrieval\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;how_to_reg&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Consulting\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Empower your organisation through technical knowledge and advice\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> JSX <pre><code>import { memo } from 'react'\nimport { Row, Col, Card, CardBody } from 'reactstrap'\nimport services from 'data/services.json'\n\nconst Service = (props: {\nicon: string\ntitle: string\ndescription: string\n}) =&gt; (\n&lt;Card className='text-center border-0 bg-transparent'&gt;\n    &lt;CardBody className='px-0'&gt;\n    &lt;i className='material-icons-sharp md-lg'&gt;{props.icon}&lt;/i&gt;\n    &lt;p className='mt-4 font-weight-bold text-monospace text-larger'&gt;\n        {props.title}\n    &lt;/p&gt;\n    &lt;p className='mb-0'&gt;{props.description}&lt;/p&gt;\n    &lt;/CardBody&gt;\n&lt;/Card&gt;\n)\n\nconst Services = () =&gt; (\n&lt;Row&gt;\n    {services.map(service =&gt; (\n    &lt;Col\n        xs={12}\n        md={6}\n        lg={12 / services.length}\n        className='m-0'\n        key={service.title}\n    &gt;\n        &lt;Service {...service} /&gt;\n    &lt;/Col&gt;\n    ))}\n&lt;/Row&gt;\n)\n\nexport default memo(Services)\n</code></pre>"},{"location":"2024-winter/introduction-to-web-development/#server-side-applications-backend","title":"Server-side Applications (Backend)","text":""},{"location":"2024-winter/introduction-to-web-development/#how-do-devices-communicate","title":"How do devices communicate?","text":"<ul> <li>HTTP Request - Hypertext Transfer Protocol</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#what-do-server-applications-do","title":"What do server applications do?","text":"<ul> <li>Serve frontends (server-side rendering)</li> <li>Web API (Application Programming Interface)<ul> <li>Serve data (usually from a database)</li> <li>Process Request (Sending emails or SMS, Machine Learning)</li> </ul> </li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#databases","title":"Databases","text":"<p>Place to store the data</p> <p>Mongodb</p> <p>Allows for database design to be modified without complex migration or data loss</p> <p>SQL</p> <p>Typically faster and better for large amounts of data or systems that need data consistency and reliability</p>"},{"location":"2024-winter/introduction-to-web-development/#others","title":"Others","text":""},{"location":"2024-winter/introduction-to-web-development/#languages-of-the-web-the-usual","title":"Languages of the Web (the usual)","text":"<ul> <li>Python (Django, Flask)</li> <li>JavaScript (Node.js, Express)</li> <li>Ruby, Go, Rust, C</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#hosting-stuff","title":"Hosting Stuff","text":"<p>Many ways - Own a server - Use a 3<sup>rd</sup> party platform</p>"},{"location":"2024-winter/introduction-to-web-development/#css-frameworks","title":"CSS Frameworks","text":"<p>Frontend (JS)</p> <ul> <li>Vue, React</li> <li>Nuxt.js, Next.js</li> </ul> <p>Frontend (CSS)</p> <ul> <li>MaterialUI, Vuetify</li> <li>Bootstrap</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#developer-tools","title":"Developer Tools","text":""},{"location":"2024-winter/introduction-to-web-development/#typescript","title":"TypeScript","text":"<ul> <li>Type checking is super useful for complex apps</li> <li>Allows for way better javascript developer tooling</li> <li>Can be annoying if you\u2019re new at it</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#testing","title":"Testing","text":"<ul> <li>Selenium, Cypress<ul> <li>End to end automated testing tools</li> </ul> </li> <li>Jest, Mocha, Pytest<ul> <li>Unit testing</li> </ul> </li> <li>Testing is vital to software projects</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#continuous-integration-continuous-deployment","title":"Continuous Integration / Continuous Deployment","text":"<ul> <li>Automated Testing</li> <li>Event-driven scripts</li> <li>E.g. Github Action, Bitbucket Pipelines</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#virtualisation-and-containerisation","title":"Virtualisation and Containerisation","text":"<ul> <li>Allows execution of services in a virtual environment</li> <li>eg. Docker (Containerisation), Vagrant (Virtualisation)</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#browsers","title":"Browsers","text":"<ul> <li>Standard browsers<ul> <li>Google Chrome, Firefox, Edge, etc.</li> </ul> </li> <li>Backwards compatibility<ul> <li>Internet Explorer</li> </ul> </li> <li>Other<ul> <li>Mobile - Responsive</li> <li>Screen readers - Accessibility</li> </ul> </li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#firefox-developer-tools","title":"Firefox Developer Tools","text":"<ul> <li>Page Inspector<ul> <li>Visualise page aspects</li> <li>Grid layout</li> </ul> </li> <li>Web Console<ul> <li><code>console.log(\u201cHello World\u201d)</code></li> </ul> </li> <li>Responsive Design Mode<ul> <li>View from POV of different screen sizes such as mobile, tablets, etc.</li> </ul> </li> </ul> Some more tools <ul> <li>JavaScript Debugger</li> <li>Network Monitor</li> <li>Performance Tools</li> <li>Rulers</li> <li>Colour Pickers Learn more at: https://developer.mozilla.org/en-US/docs/Tools</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#package-managers","title":"Package Managers","text":"<ul> <li>Installs libraries that can be used</li> <li>Also has code shortcuts (e.g. npm run start)</li> </ul> <p>(More about <code>package.json</code> and <code>poetry.toml</code> in the projects and Package Manager Workshop)</p>"},{"location":"2024-winter/introduction-to-web-development/#version-control","title":"Version Control","text":"<ul> <li>Essential for developer teams and complex software development</li> <li>Git</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#linters-and-formatters","title":"Linters and Formatters","text":"<ul> <li>Makes code formatting consistent (following standard)</li> <li>Useful with version controls to avoid pointless change</li> </ul> <p>eg.ESLint, Prettier</p>"},{"location":"2024-winter/introduction-to-web-development/#teamwork","title":"Teamwork","text":"<ul> <li>Many tools out there</li> <li>Used to stop teams from stepping on each others toes</li> <li>Github Issues + Pull Requests</li> </ul>"},{"location":"2024-winter/introduction-to-web-development/#roadmaps","title":"Roadmaps","text":"<p>There's an open-source community that maintains a learning roadmap for developers. See https://roadmap.sh/</p> Frontend Developer <p></p> Backend Developer <p></p> Dev-Ops <p></p>"},{"location":"2024-winter/introduction-to-web-development/#word-of-encouragement","title":"Word of Encouragement","text":"Encouragement from the Tech Lead <p>\"I can admit that this journey of learning will be difficult, and can sometimes be overwhelming and demotivating. Please, if at any point of this project, you feel that you don't know enough, or you're feeling lost, please reach out! We are all in this journey together! Nobody is born talented, skills are honed with determination and willingness to learn.\" </p> <p>\"When I was a first year student entering on the CFC winter project, I didn't feel like I was good enough. I couldn't create a good looking interface, I didn't know how to use npm and all sorts of those things. I was just like many of you! if I gave up just because of all those things I didn't know, of all those self-doubts, then I wouldn't be here today. I admit that I was lucky because I was in CFC, I had connections where I can just ask questions instead of feeling lost of not knowing. So please do leverage that opportunity to reach out\" </p> <p>\"You being in this project not only gives you the opportunity to raise your talents, but you also unlock one of the biggest factor of the growth of your career, and that is the connections with your fellow software engineers.\"</p>"},{"location":"2024-winter/practical-software-engineering-workflow/","title":"Practical Software Engineering Workflow","text":"<p>How software engineer GSD!</p>"},{"location":"2024-winter/practical-software-engineering-workflow/#how-do-software-engineers-work","title":"How do software engineers work?","text":"<p>They use issue/ticket management system to track their work.</p> Github Issues and Jira <p>The examples are Github Issues and Jira.</p> <p> </p> <p>Listing of issues can be displayed in kanban boards.</p> Kanban Boards <p> </p>"},{"location":"2024-winter/practical-software-engineering-workflow/#why-do-software-engineers-work-like-this","title":"Why do Software Engineers Work like this?","text":"Scrums <p>One example of \"agile\" ways of working and it looks like this. </p>"},{"location":"2024-winter/practical-software-engineering-workflow/#what-is-git","title":"What is Git?","text":"<p>Git is a</p> <ul> <li>version control system</li> <li>tools for coordinating work for different changes</li> </ul>"},{"location":"2024-winter/practical-software-engineering-workflow/#main-parts-of-git","title":"Main Parts of Git","text":"<p>Main Parts of git:</p> <ul> <li>Change Node (commit node)</li> <li>Branch</li> </ul> <p></p>"},{"location":"2024-winter/practical-software-engineering-workflow/#git-different-versions","title":"Git Different Versions","text":"Software Versions <p>Nodes - Representation of a change (commits + merge)</p> <p>Main/Master: - Branch usually as production or deployed</p> <p>Development Branch - Branch used for development Used for compiling features for a release</p> <p>Feature Branch - Branch used for development for a particular issue</p>"},{"location":"2024-winter/practical-software-engineering-workflow/#github-and-code-repositories","title":"GitHub and Code Repositories","text":"<p>GitHub - Place to hold code repositories</p> <p>Repositories - Place where codes are stored with different versions</p>"},{"location":"2024-winter/practical-software-engineering-workflow/#interactive-workshop-time","title":"INTERACTIVE WORKSHOP TIME !!!!","text":"<ol> <li>Do the following from codersforcauses/software-engineering-practices-demo: Demonstration of software engineering practices (github.com):</li> <li>Look at the GitHub issues</li> <li>Assign yourself an issue</li> <li>Clone repo with <code>git clone https://github.com/codersforcauses/software-engineering-practices-demo-2024-winter.git</code></li> <li>Create a branch with the following format s{Issue Number}-{Issue Name}. <code>git checkout -b {Issue Number}-{Issue Name}</code></li> <li>Create the change to satisfy or complete the github issue</li> <li>Commit (package) the change <code>git commit -m \"{insert message here}\"</code> and push git push.</li> <li>Create a pull request and request for a reviewer from CFC peeps</li> </ol>"},{"location":"2024-winter/practical-software-engineering-workflow/#other-resources","title":"Other Resources","text":"<ul> <li>Git and Github</li> <li>Superpowers Of Git</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/","title":"Introduction to Web Development Space","text":"<p>Navigating the Deep Dark Space of Web Development</p> <p>This workshop covers a brief overview of the most common tools and technologies used in web development.</p>"},{"location":"2025-winter/introduction-to-web-development/#this-workshop-is-proudly-sponsorsed-by","title":"This workshop is proudly sponsorsed by","text":""},{"location":"2025-winter/introduction-to-web-development/#content","title":"Content","text":"<ul> <li>What and Why Web Development?</li> <li>FAQs about Web Development</li> <li>Basics of Web and Limitation</li> <li>Server-side Applications (Backend)</li> <li>Others<ul> <li>Languages of the Web (the usual)</li> <li>Hosting Stuff</li> <li>CSS Frameworks</li> <li>Developer Tools</li> <li>TypeScript</li> <li>Testing</li> <li>Continuous Integration / Continuous Deployment</li> <li>Virtualisation and Containerisation</li> <li>Browsers</li> <li>Firefox Developer Tools</li> <li>Package Managers</li> <li>Version Control</li> <li>Linters and Formatters</li> <li>Teamwork</li> <li>Roadmaps</li> </ul> </li> <li>Word of Encouragement</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#what-and-why-web-development","title":"What and Why Web Development?","text":""},{"location":"2025-winter/introduction-to-web-development/#what-is-web-development","title":"What is web development?","text":"<ul> <li>Static websites (e.g. this workshop website!)</li> <li>Web applications (e.g. Youtube)</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#why-web-development","title":"Why Web Development ?","text":"<ul> <li>Accessibility and Portability</li> <li>Career and In-demand job opportunities</li> <li>Huge possibility to combine with other emerging technologies (e.g. IoT, Machine Learning) and industry (e.g. Health, Mining, O&amp;G)</li> </ul> Career in Web Development <p>Source: Stack Overflow 2024 Developer Survey</p> <p>\"over half of Developers are Web Developers\" </p>"},{"location":"2025-winter/introduction-to-web-development/#faqs-about-web-development","title":"FAQs about Web Development","text":""},{"location":"2025-winter/introduction-to-web-development/#why-code-websites-why-not-use-drag-and-drops-like-wordpress-wix","title":"Why code websites, why not use drag and drops like Wordpress, WIX?","text":"<ul> <li>Content Management System (CMS)</li> <li>Limitations on theme/template used</li> <li>Difficult to extend</li> <li>Cybersecurity</li> </ul> More information <p>CMS are one of the application of web development, but there are plenty more such as - internet of things, custom software for a particular industrial application (eg. using Machine Learning)</p> <p>CMS are usually limited to the template or plugin that you use. If those plugin don't exist, then it limits your productivity very much (difficulty to extend).</p> <p>CMS are usually built to cater for non-technical users. This means that thye become the subject of hackers. Think about a scenario where a hacker was able to find a vulnerability in WordPress, now every other WordPress site will be vulnerable.</p>"},{"location":"2025-winter/introduction-to-web-development/#why-does-cfc-not-do-mobile-development-as-much-as-web-development","title":"Why does CFC not do mobile development as much as web development?","text":"<ul> <li>App stores have a developer cost</li> <li>Easier to deal/teach web technologies</li> <li>Accessibility (mobile, sensors, tablets, laptops and PCs)</li> <li>Bigger communities</li> <li>We sometimes do mobile development! (Kind of)<ul> <li>Progressive web apps</li> </ul> </li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#if-i-already-know-a-frontend-framework-is-it-better-to-learn-another-frontend-framework-or-to-learn-a-backend-framework","title":"If I already know a frontend framework, is it better to learn another frontend framework or to learn a backend framework?","text":"<ul> <li>It is better to learn a backend framework</li> </ul> Reasoning <p>You want to build skills that complement one another rather than be an alternative.</p> <p>It is much more valuable for you to learn a backend framework because that helps you build a functional app.</p>"},{"location":"2025-winter/introduction-to-web-development/#basics-of-web-and-limitation","title":"Basics of Web and Limitation","text":"HTML <p>What is it?</p> <ul> <li>Hypertext Markup Language</li> <li>Describes the structure of a web page</li> </ul> <p>Limitation</p> <ul> <li>Doesn\u2019t handle repeated content well</li> <li>No variables or calculation</li> </ul> HTML Syntax <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    Hello World!\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> CSS <p>What is it?</p> <ul> <li>Cascading Style Sheets</li> <li>Describes the presentation of a web page</li> </ul> <p>Limitation</p> <ul> <li>Most css is quite similar (Handled by CSS Libraries)</li> <li>Not very dynamic (Handled by CSS Frameworks)</li> </ul> CSS Syntax <pre><code>body {\n    background-color: #f0f0f0;\n    font-family: sans-serif;\n}\n\n.container{\n    width: 80%;\n    margin: 0 auto;\n}\n</code></pre> JS <p>What is it?</p> <ul> <li>JavaScript</li> <li>Used to program complex features on a web page</li> </ul> <p>Limitation</p> <ul> <li>Has the capability to modify the user interface, but becomes really tedious to modify interface (more about this in another workshop)</li> </ul> JS Syntax <pre><code>const bodySelector = document.querySelector('body');\nconst myFunction = () =&gt; {\n    bodySelector.innerHTML = 'Hello World 2!';\n    // Add a container class to space out\n    bodySelector.classList.add('container');\n}\nbodySelector.onclick = myFunction;\n</code></pre>"},{"location":"2025-winter/introduction-to-web-development/#modern-frameworks","title":"Modern Frameworks","text":"<ul> <li>Websites can be much more\u2026 they can be web applications</li> <li>\u201cApp\u201d in a website (client-side rendering)</li> </ul> Modern Frameworks React.js <ul> <li>More mature and used more in industry</li> </ul> Vue.js <ul> <li>Growing fast in popularity and use.</li> </ul> <p>General Information</p> <ul> <li>Both are good to use and learn. </li> <li>Knowledge is transferable between the two frameworks.</li> </ul> Comparison between HTML and JSX <p></p> <p>Highlighted portions are starting chunk of distinct code.</p> HTML <pre><code>&lt;div class=\"row\"&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;devices&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Applications\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Build custom web and mobile applications to engage with your audience\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;web&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;Websites&lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Build new websites or optimise existing pages to improve online\n            visibility\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;storage&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Data Storage\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Design and create databases for efficient information storage and\n            retrieval\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"m-0 col-12 col-md-6 col-lg-3\"&gt;\n        &lt;div class=\"text-center border-0 bg-transparent card\"&gt;\n        &lt;div class=\"px-0 card-body\"&gt;\n            &lt;i class=\"material-icons-sharp md-lg\"&gt;how_to_reg&lt;/i&gt;\n            &lt;p class=\"mt-4 font-weight-bold text-monospace text-larger\"&gt;\n            Consulting\n            &lt;/p&gt;\n            &lt;p class=\"mb-0\"&gt;\n            Empower your organisation through technical knowledge and advice\n            &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> JSX <pre><code>import { memo } from 'react'\nimport { Row, Col, Card, CardBody } from 'reactstrap'\nimport services from 'data/services.json'\n\nconst Service = (props: {\nicon: string\ntitle: string\ndescription: string\n}) =&gt; (\n&lt;Card className='text-center border-0 bg-transparent'&gt;\n    &lt;CardBody className='px-0'&gt;\n    &lt;i className='material-icons-sharp md-lg'&gt;{props.icon}&lt;/i&gt;\n    &lt;p className='mt-4 font-weight-bold text-monospace text-larger'&gt;\n        {props.title}\n    &lt;/p&gt;\n    &lt;p className='mb-0'&gt;{props.description}&lt;/p&gt;\n    &lt;/CardBody&gt;\n&lt;/Card&gt;\n)\n\nconst Services = () =&gt; (\n&lt;Row&gt;\n    {services.map(service =&gt; (\n    &lt;Col\n        xs={12}\n        md={6}\n        lg={12 / services.length}\n        className='m-0'\n        key={service.title}\n    &gt;\n        &lt;Service {...service} /&gt;\n    &lt;/Col&gt;\n    ))}\n&lt;/Row&gt;\n)\n\nexport default memo(Services)\n</code></pre>"},{"location":"2025-winter/introduction-to-web-development/#server-side-applications-backend","title":"Server-side Applications (Backend)","text":""},{"location":"2025-winter/introduction-to-web-development/#how-do-devices-communicate","title":"How do devices communicate?","text":"<ul> <li>HTTP Request - Hypertext Transfer Protocol</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#what-do-server-applications-do","title":"What do server applications do?","text":"<ul> <li>Serve frontends (server-side rendering)</li> <li>Web API (Application Programming Interface)<ul> <li>Serve data (usually from a database)</li> <li>Process Request (Sending emails or SMS, Machine Learning)</li> </ul> </li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#databases","title":"Databases","text":"<p>Place to store the data</p> <p>Mongodb</p> <p>Allows for database design to be modified without complex migration or data loss</p> <p>SQL</p> <p>Typically faster and better for large amounts of data or systems that need data consistency and reliability</p>"},{"location":"2025-winter/introduction-to-web-development/#others","title":"Others","text":""},{"location":"2025-winter/introduction-to-web-development/#languages-of-the-web-the-usual","title":"Languages of the Web (the usual)","text":"<ul> <li>Python (Django, Flask)</li> <li>JavaScript (Node.js, Express)</li> <li>Ruby, Go, Rust, C</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#hosting-stuff","title":"Hosting Stuff","text":"<p>Many ways - Self host/On premise - 3<sup>rd</sup> party options     - shared/dedicated server     - Serverless     - AWS ECS/Digital Ocean App Platform</p>"},{"location":"2025-winter/introduction-to-web-development/#frontend-frameworks","title":"Frontend Frameworks","text":"<p>Frontend (JS)</p> <ul> <li>Vue, React</li> <li>Nuxt.js, Next.js</li> <li>Svelte</li> </ul> <p>Frontend (CSS)</p> <ul> <li>MaterialUI, Vuetify</li> <li>Bootstrap</li> <li>Tailwind</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#developer-tools","title":"Developer Tools","text":""},{"location":"2025-winter/introduction-to-web-development/#typescript","title":"TypeScript","text":"<ul> <li>Type checking is super useful for complex apps</li> <li>Allows for way better javascript developer tooling</li> <li>Can be annoying if you\u2019re new at it</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#testing","title":"Testing","text":"<ul> <li>Selenium, Cypress<ul> <li>End to end automated testing tools</li> </ul> </li> <li>Jest, Mocha, Pytest<ul> <li>Unit testing</li> </ul> </li> <li>Testing is vital to software projects</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#continuous-integration-continuous-deployment","title":"Continuous Integration / Continuous Deployment","text":"<ul> <li>Automated Testing</li> <li>Event-driven scripts</li> <li>E.g. Github Action, Bitbucket Pipelines</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#virtualisation-and-containerisation","title":"Virtualisation and Containerisation","text":"<ul> <li>Allows execution of services in a virtual environment</li> <li>eg. Docker (Containerisation), Vagrant (Virtualisation)</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#browsers","title":"Browsers","text":"<ul> <li>Standard browsers<ul> <li>Google Chrome, Firefox, Edge, etc.</li> </ul> </li> <li>Backwards compatibility<ul> <li>Internet Explorer</li> </ul> </li> <li>Other<ul> <li>Mobile - Responsive</li> <li>Screen readers - Accessibility</li> </ul> </li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#firefox-developer-tools","title":"Firefox Developer Tools","text":"<ul> <li>Page Inspector<ul> <li>Visualise page aspects</li> <li>Grid layout</li> </ul> </li> <li>Web Console<ul> <li><code>console.log(\u201cHello World\u201d)</code></li> </ul> </li> <li>Responsive Design Mode<ul> <li>View from POV of different screen sizes such as mobile, tablets, etc.</li> </ul> </li> </ul> Some more tools <ul> <li>JavaScript Debugger</li> <li>Network Monitor</li> <li>Performance Tools</li> <li>Rulers</li> <li>Colour Pickers Learn more at: https://developer.mozilla.org/en-US/docs/Tools</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#package-managers","title":"Package Managers","text":"<ul> <li>Installs libraries that can be used</li> <li>Also has code shortcuts (e.g. npm run start)</li> </ul> <p>(More about <code>package.json</code> and <code>poetry.toml</code> in the projects and Package Manager Workshop)</p>"},{"location":"2025-winter/introduction-to-web-development/#version-control","title":"Version Control","text":"<ul> <li>Essential for developer teams and complex software development</li> <li>Git<ul> <li>Hosted options<ul> <li>Bitbucket</li> <li>Github</li> <li>Gitlab</li> </ul> </li> </ul> </li> <li>Subversion</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#linters-and-formatters","title":"Linters and Formatters","text":"<ul> <li>Makes code formatting consistent (following standard)</li> <li>Useful with version controls to avoid pointless change</li> </ul> <p>eg.ESLint, Prettier</p>"},{"location":"2025-winter/introduction-to-web-development/#teamwork","title":"Teamwork","text":"<ul> <li>Many tools out there</li> <li>Used to stop teams from stepping on each others toes</li> <li>Github Issues + Pull Requests</li> </ul>"},{"location":"2025-winter/introduction-to-web-development/#roadmaps","title":"Roadmaps","text":"<p>There's an open-source community that maintains a learning roadmap for developers. See https://roadmap.sh/</p> Frontend Developer <p></p> Backend Developer <p></p> Dev-Ops <p></p>"},{"location":"2025-winter/practical-software-engineering-workflow/","title":"Practical Software Engineering Workflow","text":"<p>How software engineer GSD!</p>"},{"location":"2025-winter/practical-software-engineering-workflow/#how-do-software-engineers-work","title":"How do software engineers work?","text":"<p>They use issue/ticket management system to track their work.</p> Github Issues and Jira <p>The examples are Github Issues and Jira.</p> <p> </p> <p>Listing of issues can be displayed in kanban boards.</p> Kanban Boards <p> </p>"},{"location":"2025-winter/practical-software-engineering-workflow/#why-do-software-engineers-work-like-this","title":"Why do Software Engineers Work like this?","text":"Scrums <p>One example of \"agile\" ways of working and it looks like this. </p>"},{"location":"2025-winter/practical-software-engineering-workflow/#what-is-git","title":"What is Git?","text":"<p>Git is a</p> <ul> <li>version control system</li> <li>tools for coordinating work for different changes</li> </ul>"},{"location":"2025-winter/practical-software-engineering-workflow/#main-parts-of-git","title":"Main Parts of Git","text":"<p>Main Parts of git:</p> <ul> <li>Change Node (commit node)</li> <li>Branch</li> </ul> <p></p>"},{"location":"2025-winter/practical-software-engineering-workflow/#git-different-versions","title":"Git Different Versions","text":"Software Versions <p>Nodes - Representation of a change (commits + merge)</p> <p>Main/Master: - Branch usually as production or deployed</p> <p>Development Branch - Branch used for development Used for compiling features for a release</p> <p>Feature Branch - Branch used for development for a particular issue</p>"},{"location":"2025-winter/practical-software-engineering-workflow/#github-and-code-repositories","title":"GitHub and Code Repositories","text":"<p>GitHub - Place to hold code repositories</p> <p>Repositories - Place where codes are stored with different versions</p>"},{"location":"2025-winter/practical-software-engineering-workflow/#interactive-workshop-time","title":"INTERACTIVE WORKSHOP TIME !!!!","text":"<ol> <li>Do the following from codersforcauses/software-engineering-practices-demo-2024-summer: Demonstration of software engineering practices (github.com):</li> <li>Look at the GitHub issues</li> <li>Assign yourself an issue</li> <li>Clone repo with <code>git clone https://github.com/codersforcauses/software-engineering-practices-demo-2024-summer.git</code></li> <li>Create a branch with the following format s{Issue Number}-{Issue Name}. <code>git checkout -b {Issue Number}-{Issue Name}</code></li> <li>Create the change to satisfy or complete the github issue</li> <li>Commit (package) the change <code>git commit -m \"{insert message here}\"</code> and push git push.</li> <li>Create a pull request and request for a reviewer from CFC peeps</li> </ol>"},{"location":"2025-winter/practical-software-engineering-workflow/#other-resources","title":"Other Resources","text":"<ul> <li>Git and Github</li> <li>Superpowers Of Git</li> </ul>"}]}